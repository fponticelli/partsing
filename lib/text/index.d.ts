import { Decoder } from '../core/decoder';
import { DecodeFailure, DecodeResult } from '../core/result';
import { DecodeError } from '../error';
import { TextInput } from './input';
export declare type TextDecoder<T> = Decoder<TextInput, T, DecodeError>;
export declare const decodeText: <T>(decoder: Decoder<TextInput, T, DecodeError>) => (input: string) => DecodeResult<string, T, string>;
export declare const regexp: (pattern: RegExp, group?: number) => Decoder<TextInput, string, DecodeError>;
export declare const withPosition: Decoder<TextInput, number, DecodeError>;
export declare const rest: Decoder<TextInput, string, DecodeError>;
export declare const eoi: Decoder<TextInput, void, DecodeError>;
export declare const match: <V extends string>(s: V) => Decoder<TextInput, V, DecodeError>;
export declare const matchInsensitive: (s: string) => Decoder<TextInput, string, DecodeError>;
export declare const letter: Decoder<TextInput, string, DecodeError>;
export declare const letters: (min?: number, max?: number | undefined) => Decoder<TextInput, string, DecodeError>;
export declare const upperCaseLetter: Decoder<TextInput, string, DecodeError>;
export declare const upperCaseLetters: (min?: number, max?: number | undefined) => Decoder<TextInput, string, DecodeError>;
export declare const lowerCaseLetter: Decoder<TextInput, string, DecodeError>;
export declare const lowerCaseLetters: (min?: number, max?: number | undefined) => Decoder<TextInput, string, DecodeError>;
export declare const digit: Decoder<TextInput, string, DecodeError>;
export declare const digits: (min?: number, max?: number | undefined) => Decoder<TextInput, string, DecodeError>;
export declare const whitespace: Decoder<TextInput, string, DecodeError>;
export declare const optionalWhitespace: Decoder<TextInput, string, DecodeError>;
export declare const char: Decoder<TextInput, {}, DecodeError>;
export declare const testChar: (f: (c: string) => boolean) => Decoder<TextInput, string, DecodeError>;
export declare const matchAnyCharOf: (anyOf: string) => Decoder<TextInput, string, DecodeError>;
export declare const matchNoCharOf: (noneOf: string) => Decoder<TextInput, string, DecodeError>;
export declare const takeCharWhile: (f: (c: string) => boolean, atLeast?: number) => Decoder<TextInput, string, DecodeError>;
export declare const takeCharBetween: (f: (c: string) => boolean, min: number, max: number) => Decoder<TextInput, string, DecodeError>;
export declare const failureToString: <Out>(err: DecodeFailure<TextInput, Out, DecodeError>) => string;
