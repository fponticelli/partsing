import { Parser } from '../core/parser';
import { ParseResult } from '../core/result';
import { DecodeError } from '../error';
import { TextInput } from './input';
export declare type TextParser<T> = Parser<TextInput, T, DecodeError>;
export declare const parseText: <T>(parser: Parser<TextInput, T, DecodeError>, input: string) => ParseResult<TextInput, T, DecodeError>;
export declare const regexp: (pattern: RegExp, group?: number) => Parser<TextInput, string, DecodeError>;
export declare const withPosition: Parser<TextInput, number, DecodeError>;
export declare const rest: Parser<TextInput, string, DecodeError>;
export declare const eot: Parser<TextInput, {} | undefined, DecodeError>;
export declare const match: <V extends string>(s: V) => Parser<TextInput, V, DecodeError>;
export declare const letter: Parser<TextInput, string, DecodeError>;
export declare const letters: (min?: number, max?: number | undefined) => Parser<TextInput, string, DecodeError>;
export declare const upperCaseLetter: Parser<TextInput, string, DecodeError>;
export declare const upperCaseLetters: (min?: number, max?: number | undefined) => Parser<TextInput, string, DecodeError>;
export declare const lowerCaseLetter: Parser<TextInput, string, DecodeError>;
export declare const lowerCaseLetters: (min?: number, max?: number | undefined) => Parser<TextInput, string, DecodeError>;
export declare const digit: Parser<TextInput, string, DecodeError>;
export declare const digits: (min?: number, max?: number | undefined) => Parser<TextInput, string, DecodeError>;
export declare const whitespace: Parser<TextInput, string, DecodeError>;
export declare const optionalWhitespace: Parser<TextInput, string, DecodeError>;
export declare const char: Parser<TextInput, {}, DecodeError>;
export declare const testChar: (f: (c: string) => boolean) => Parser<TextInput, string, DecodeError>;
export declare const matchAnyCharOf: (anyOf: string) => Parser<TextInput, string, DecodeError>;
export declare const matchNoCharOf: (noneOf: string) => Parser<TextInput, string, DecodeError>;
export declare const takeCharWhile: (f: (c: string) => boolean, atLeast?: number) => Parser<TextInput, string, DecodeError>;
export declare const takeCharBetween: (f: (c: string) => boolean, min: number, max: number) => Parser<TextInput, string, DecodeError>;
