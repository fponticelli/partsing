var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/CombineErrors.html",[0,0.201,1,1.744]],["body/classes/CombineErrors.html",[0,0.346,1,3.002,2,0.505,3,0.364,4,0.3,5,2.61,6,0.567,7,0.899,8,3.75,9,4.197,10,4.197,11,4.197,12,1.032,13,0.871,14,4.197,15,0.24,16,0.662,17,0.633,18,0.672,19,0.763,20,0.904,21,0.753,22,3.199,23,3.002,24,0.739,25,4.197,26,1.114,27,0.988,28,0.664,29,0.045,30,0.505,31,0.351,32,0.664,33,4.197,34,0.753,35,0.534,36,0.871,37,3.199,38,0.662,39,0.871,40,0.763,41,0.763,42,0.763,43,0.662,44,0.567,45,1.507,46,0.505,47,1.069,48,0.849,49,1.932,50,3.199,51,4.197,52,3.199,53,2.222,54,3.199,55,0.664,56,1.7,57,3.199,58,0.032,59,0.032]],["title/classes/CustomError.html",[0,0.201,60,1.744]],["body/classes/CustomError.html",[0,0.307,2,0.543,3,0.392,4,0.323,6,0.595,7,0.806,12,0.913,15,0.258,16,0.694,17,0.656,18,0.691,19,0.8,20,0.929,21,0.81,24,0.765,26,1.168,27,1.035,28,0.714,29,0.045,30,0.543,31,0.383,32,0.714,34,0.81,35,0.553,36,0.913,38,0.694,39,1.061,40,0.929,41,0.8,42,0.8,43,0.694,44,0.691,46,0.543,47,1.151,48,0.913,58,0.033,59,0.033,60,2.657,61,2.808,62,2.808,63,5.113,64,4.409,65,3.442,66,4.401,67,4.401,68,4.401,69,2.338,70,3.442,71,3.442]],["title/classes/DecodeResultBase.html",[0,0.201,72,2.006]],["body/classes/DecodeResultBase.html",[0,0.176,2,0.144,3,0.104,4,0.086,6,0.123,7,0.144,12,0.523,13,1.006,15,0.068,16,0.494,17,0.608,18,0.424,19,0.289,20,0.57,21,0.593,24,0.721,26,0.422,27,1.059,28,0.901,29,0.045,30,0.531,31,0.409,32,0.699,35,0.587,36,0.523,38,0.59,39,0.523,40,0.458,41,0.458,42,0.458,43,0.828,44,0.341,46,0.45,47,0.843,48,0.242,49,0.959,53,1.103,55,0.438,58,0.036,59,0.019,62,2.057,64,0.745,69,2.464,72,1.983,73,0.634,74,3.779,75,0.634,76,1.464,77,1.464,78,3.097,79,3.562,80,5.307,81,0.634,82,2.258,83,0.745,84,0.745,85,0.745,86,3.452,87,3.891,88,3.134,89,3.134,90,1.589,91,1.589,92,3.134,93,3.134,94,3.134,95,3.134,96,1.589,97,1.589,98,1.589,99,2.109,100,1.589,101,1.477,102,1.296,103,1.296,104,1.657,105,3.299,106,0.913,107,1.589,108,1.72,109,1.589,110,1.296,111,1.589,112,1.103,113,0.959,114,0.913,115,2.868,116,0.913,117,3.54,118,2.521,119,4.502,120,2.856,121,0.913,122,3.368,123,3.568,124,2.576,125,2.91,126,3.001,127,4.425,128,2.521,129,0.913,130,3.368,131,2.109,132,1.589,133,1.296,134,1.681,135,0.913,136,2.521,137,2.067,138,3.134,139,2.91,140,2.057,141,2.521,142,0.913,143,0.913,144,3.134,145,2.521,146,2.057,147,1.522,148,2.521,149,0.913,150,2.521,151,0.913,152,2.057,153,2.521,154,0.913,155,2.521,156,0.913,157,3.134,158,2.176,159,1.72,160,2.521,161,1.589,162,0.913,163,4.637,164,1.296,165,0.844,166,1.296,167,1.296,168,1.296,169,1.589,170,1.751,171,0.913,172,2.678,173,1.589,174,1.589,175,0.745,176,0.745,177,0.745,178,0.749,179,1.589,180,1.589,181,0.913,182,1.589,183,0.913,184,1.589,185,0.913,186,2.109,187,0.913,188,1.589,189,2.057,190,1.589,191,1.589,192,0.913,193,1.589,194,1.589,195,1.589,196,1.589,197,1.589,198,1.589,199,1.589,200,0.913,201,0.745,202,0.745,203,0.745,204,0.913,205,0.913,206,2.109,207,2.521,208,0.913,209,0.913,210,0.913,211,0.913,212,0.634,213,0.745,214,0.634,215,0.745,216,0.634,217,0.485,218,0.552,219,1.589,220,1.589,221,0.913,222,0.913,223,0.913]],["title/classes/ExpectedAnyOf.html",[0,0.201,224,1.744]],["body/classes/ExpectedAnyOf.html",[0,0.242,2,0.548,3,0.396,4,0.326,6,0.732,7,0.548,12,0.721,15,0.26,16,0.698,17,0.598,18,0.658,19,0.804,20,0.885,21,0.817,24,0.768,26,0.921,27,0.817,28,0.721,29,0.045,30,0.548,31,0.331,32,0.721,34,0.817,35,0.584,36,0.721,38,0.548,39,0.918,40,0.804,41,0.631,42,0.631,43,0.698,44,0.693,45,1.636,46,0.548,49,2.672,55,0.721,56,2.352,58,0.034,59,0.039,126,2.096,147,2.096,178,1.636,224,2.672,225,2.832,226,2.552,227,1.636,228,1.845,229,2.411,230,4.425,231,2.411,232,3.472,233,1.845,234,2.832,235,3.472,236,2.832,237,2.832,238,3.472,239,3.472,240,2.411,241,4.871,242,3.472,243,2.411]],["title/classes/ExpectedAtLeast.html",[0,0.201,244,1.744]],["body/classes/ExpectedAtLeast.html",[0,0.296,2,0.515,3,0.372,4,0.307,6,0.575,7,0.671,12,0.883,15,0.245,16,0.671,17,0.677,18,0.677,19,0.773,20,0.911,21,0.768,24,0.746,26,1.129,27,1.001,28,0.678,29,0.045,30,0.515,31,0.354,32,0.678,34,0.768,35,0.539,36,0.883,38,0.671,39,0.883,40,0.773,41,0.773,42,0.773,43,0.671,44,0.441,45,1.538,46,0.515,47,1.422,48,0.866,55,1.106,58,0.032,59,0.032,113,2.568,172,1.735,226,2.664,233,1.735,244,3.026,245,2.664,246,4.254,247,4.24,248,2.664,249,2.762,250,4.254,251,3.47,252,2.954,253,4.254,254,3.265,255,3.47,256,2.267]],["title/classes/ExpectedEoi.html",[0,0.201,257,1.744]],["body/classes/ExpectedEoi.html",[0,0.324,2,0.591,3,0.427,4,0.352,6,0.507,7,0.591,12,0.964,15,0.281,16,0.733,17,0.682,18,0.713,19,0.844,20,0.959,24,0.733,29,0.044,31,0.348,34,0.882,35,0.575,36,0.964,38,0.733,39,0.964,40,0.844,41,0.844,42,0.844,43,0.733,44,0.507,46,0.591,55,1.125,58,0.035,59,0.035,104,1.739,257,2.805,258,3.06,259,3.226,260,5.046,261,3.751,262,3.751]],["title/classes/ExpectedField.html",[0,0.201,263,1.744]],["body/classes/ExpectedField.html",[0,0.307,2,0.545,3,0.394,4,0.325,6,0.596,7,0.545,12,0.916,15,0.259,16,0.696,17,0.657,18,0.692,19,0.802,20,0.931,21,0.813,24,0.767,26,1.171,27,1.038,28,0.717,29,0.045,30,0.767,31,0.364,32,0.717,34,0.813,35,0.554,36,0.916,38,0.696,39,0.916,40,0.802,41,0.802,42,0.802,43,0.696,44,0.692,46,0.545,47,1.156,48,0.917,55,1.063,58,0.034,59,0.034,101,2.649,231,3.376,263,3.092,264,2.82,265,3.457,266,3.457,267,4.413,268,4.413,269,3.457,270,3.457]],["title/classes/ExpectedMatch.html",[0,0.201,271,1.744]],["body/classes/ExpectedMatch.html",[0,0.305,2,0.539,3,0.39,4,0.321,6,0.689,7,0.539,12,0.909,15,0.256,16,0.691,17,0.654,18,0.689,19,0.797,20,0.927,21,0.805,24,0.763,26,1.163,27,1.031,28,0.71,29,0.045,30,0.539,31,0.362,32,0.71,34,0.805,35,0.615,36,0.909,38,0.691,39,1.058,40,0.927,41,0.797,42,0.797,43,0.691,44,0.713,46,0.539,47,1.143,48,0.907,55,1.094,58,0.033,59,0.042,134,1.611,189,2.79,227,1.611,231,3.043,271,3.079,272,2.79,273,3.42,274,3.42,275,4.383,276,3.42]],["title/classes/ExpectedNoneOf.html",[0,0.201,277,1.744]],["body/classes/ExpectedNoneOf.html",[0,0.289,2,0.495,3,0.357,4,0.294,6,0.753,7,0.809,12,0.86,13,1.024,15,0.235,16,0.653,17,0.667,18,0.667,19,0.753,20,0.897,21,0.738,24,0.731,26,1.099,27,0.975,28,0.651,29,0.045,30,0.495,31,0.347,32,0.651,34,0.738,35,0.584,36,0.86,38,0.653,39,1.024,40,0.897,41,0.753,42,0.753,43,0.653,44,0.667,45,1.952,46,0.495,47,1.385,48,0.832,55,0.963,58,0.031,59,0.037,134,1.952,147,2.501,172,1.667,226,2.626,227,1.952,228,2.201,229,2.178,233,1.667,240,2.178,256,2.178,277,2.979,278,2.559,279,4.143,280,4.639,281,3.136,282,3.136,283,1.894,284,3.136]],["title/classes/ExpectedOnce.html",[0,0.201,285,1.744]],["body/classes/ExpectedOnce.html",[0,0.304,2,0.536,3,0.387,4,0.319,6,0.459,7,0.688,12,0.906,13,0.906,15,0.254,16,0.688,17,0.652,18,0.688,19,0.793,20,0.925,21,0.799,24,0.76,26,1.158,27,1.027,28,0.705,29,0.045,30,0.536,31,0.361,32,0.705,34,0.799,35,0.549,36,0.906,38,0.688,39,0.906,40,0.793,41,0.793,42,0.793,43,0.688,44,0.459,45,1.601,46,0.536,48,0.902,55,1.118,58,0.033,59,0.033,172,1.806,226,2.64,229,2.36,233,1.806,256,2.36,283,2.052,285,3.072,286,2.772,287,3.031,288,4.293,289,4.364,290,3.398]],["title/classes/ExpectedWithinRange.html",[0,0.201,291,1.744]],["body/classes/ExpectedWithinRange.html",[0,0.294,2,0.509,3,0.367,4,0.303,6,0.57,7,0.509,12,0.876,13,0.669,15,0.242,16,0.665,17,0.674,18,0.674,19,0.767,20,0.907,21,0.759,24,0.742,26,1.12,27,0.993,28,0.669,29,0.045,30,0.509,31,0.352,32,0.669,34,0.759,35,0.59,36,0.876,38,0.665,39,0.876,40,0.767,41,0.767,42,0.767,43,0.665,44,0.731,46,0.509,47,1.41,48,0.856,55,1.139,58,0.032,59,0.032,103,3.442,227,1.52,247,4.069,248,2.631,249,2.651,251,3.442,252,3.464,255,2.631,287,2.24,291,3.012,292,2.631,293,3.225,294,5.177,295,4.22,296,4.988,297,4.22,298,3.266,299,4.703,300,3.225,301,3.225]],["title/classes/PatternMismatch.html",[0,0.201,302,1.744]],["body/classes/PatternMismatch.html",[0,0.304,2,0.536,3,0.387,4,0.319,6,0.688,7,0.536,12,0.906,13,0.705,15,0.254,16,0.688,17,0.652,18,0.688,19,0.793,20,0.925,21,0.799,24,0.76,26,1.158,27,1.027,28,0.705,29,0.045,30,0.536,31,0.361,32,0.705,34,0.799,35,0.549,36,0.906,38,0.688,39,1.056,40,0.793,41,0.793,42,0.793,43,0.688,44,0.688,46,0.536,47,1.136,48,0.902,55,0.906,58,0.033,59,0.041,302,3.072,303,2.772,304,4.822,305,5.65,306,3.398,307,4.364,308,4.364,309,4.822,310,3.398,311,3.398]],["title/interfaces/TextInput.html",[312,1.212,313,1.535]],["body/interfaces/TextInput.html",[2,0.591,3,0.427,4,0.352,6,0.507,13,1.094,15,0.414,16,0.733,17,0.628,29,0.044,31,0.348,35,0.575,44,0.746,46,0.591,58,0.035,59,0.035,81,3.226,104,2.096,137,2.682,216,2.605,217,1.993,249,2.682,312,1.949,313,2.682,314,3.06,315,3.06,316,3.06,317,2.605,318,3.504,319,3.06,320,4.645,321,3.789,322,4.645,323,4.645]],["title/classes/UnexpectedEoi.html",[0,0.201,324,1.744]],["body/classes/UnexpectedEoi.html",[0,0.323,2,0.59,3,0.426,4,0.351,6,0.506,7,0.59,12,0.963,13,0.777,15,0.28,16,0.731,17,0.681,18,0.712,19,0.843,20,0.958,24,0.731,29,0.044,31,0.347,34,0.88,35,0.574,36,0.963,38,0.731,39,0.963,40,0.843,41,0.843,42,0.843,43,0.731,44,0.506,46,0.59,55,0.777,58,0.035,59,0.035,104,1.736,259,3.221,324,2.8,325,3.053,326,5.27,327,4.112,328,3.742,329,3.742]],["title/interfaces/ValueInput.html",[312,1.212,330,1.535]],["body/interfaces/ValueInput.html",[2,0.543,3,0.553,4,0.323,6,0.465,13,1.061,15,0.33,16,0.694,17,0.595,29,0.044,30,0.543,31,0.383,35,0.661,44,0.691,46,0.543,58,0.033,59,0.033,101,1.622,104,2.103,110,3.59,137,2.872,165,2.578,166,3.59,175,3.59,217,1.829,228,2.717,249,2.717,312,1.846,315,2.808,318,2.39,319,2.808,330,2.578,331,2.808,332,2.808,333,4.538,334,2.39,335,3.442,336,4.401,337,4.401,338,4.401]],["title/contributing.html",[339,1.682,340,1.463,341,1.682]],["body/contributing.html",[3,0.416,4,0.343,29,0.035,56,2.429,58,0.035,59,0.035,82,3.012,86,2.539,124,1.943,137,1.943,178,1.722,218,2.207,288,2.982,341,3.736,342,3.656,343,3.656,344,2.982,345,3.656,346,5.488,347,2.982,348,3.656,349,4.988,350,4.069,351,3.729,352,3.729,353,3.175,354,4.069,355,3.656,356,3.656,357,2.982,358,2.982,359,3.656,360,2.539,361,2.982,362,2.982,363,2.982,364,3.656,365,2.982,366,3.656,367,3.656,368,3.729,369,3.656,370,3.656,371,3.656,372,2.982,373,2.539,374,2.982,375,2.982,376,3.656,377,2.982,378,4.572,379,3.729,380,2.982,381,3.656,382,2.982,383,4.572,384,4.572,385,3.729,386,2.982,387,3.656,388,3.656,389,2.982,390,3.729,391,3.656,392,3.656]],["title/coverage.html",[393,3.198]],["body/coverage.html",[0,0.374,1,1.161,4,0.18,5,1.568,13,0.399,23,1.161,29,0.045,31,0.144,58,0.022,59,0.027,60,1.161,61,1.568,69,1.021,72,1.335,73,2.952,78,1.161,79,1.335,117,1.568,124,1.021,134,0.906,224,1.161,225,2.385,233,1.021,240,1.335,243,1.335,244,1.161,245,1.568,257,1.161,258,1.568,263,1.161,264,1.568,271,1.161,272,1.568,277,1.161,278,1.568,285,1.161,286,1.568,291,1.161,292,1.568,302,1.161,303,1.568,312,1.226,313,1.021,314,1.568,324,1.161,325,1.568,327,1.568,330,1.021,331,1.568,334,1.335,393,1.568,394,1.568,395,1.568,396,3.653,397,3.537,398,1.922,399,5.89,400,5.928,401,5.886,402,1.922,403,1.568,404,1.922,405,1.922,406,2.923,407,1.922,408,5.011,409,1.568,410,3.952,411,1.568,412,4.592,413,1.922,414,1.568,415,2.385,416,2.923,417,2.385,418,2.923,419,2.03,420,1.922,421,1.922,422,1.922,423,1.922,424,1.922,425,1.922,426,1.922,427,1.922,428,1.922,429,1.922,430,2.923,431,1.568,432,1.922,433,4.578,434,1.922,435,1.922,436,1.922,437,1.922,438,1.568,439,1.922,440,1.922,441,1.922,442,1.922,443,1.922,444,1.922,445,1.922,446,1.568,447,1.922,448,1.922,449,1.922,450,1.922,451,1.922,452,1.922,453,1.922,454,1.922,455,1.922,456,1.922,457,1.922,458,1.922]],["title/miscellaneous/enumerations.html",[459,1.463,460,2.829]],["body/miscellaneous/enumerations.html",[13,0.894,15,0.323,18,0.583,29,0.038,58,0.038,59,0.038,104,1.614,176,3.516,226,2.524,287,2.993,317,2.993,373,2.993,409,3.516,415,3.516,417,3.516,431,3.516,459,2.602,460,4.121,461,4.31,462,3.516,463,4.31,464,4.31,465,4.31,466,4.31]],["title/index.html",[15,0.181,339,1.682,340,1.463]],["body/index.html",[0,0.273,7,0.702,8,2.006,13,1.173,15,0.262,17,0.39,18,0.473,19,0.344,20,0.344,23,1.143,24,0.456,27,0.445,28,0.393,29,0.045,30,0.298,31,0.38,32,0.393,35,0.6,38,0.618,41,0.344,42,0.344,43,0.666,44,0.661,48,0.93,49,2.953,53,2.433,56,1.535,58,0.03,59,0.022,69,1.006,74,2.006,76,1.314,78,1.143,82,2.795,83,1.544,101,1.361,104,1.95,105,1.314,113,1.143,115,1.143,124,2.599,126,2.687,134,0.892,137,1.862,158,1.314,165,1.006,168,2.858,170,2.723,178,0.892,202,2.357,212,2.006,214,1.314,227,0.892,228,1.535,234,1.544,243,2.006,249,2.365,283,1.143,298,2.433,313,1.006,316,1.544,318,2.932,330,1.006,332,2.357,333,2.357,340,1.143,347,1.544,350,3.198,360,1.314,365,1.544,374,1.544,385,1.544,403,2.357,414,2.357,419,1.314,438,2.357,446,2.357,467,2.889,468,3.504,469,1.893,470,1.893,471,1.893,472,1.893,473,1.893,474,2.357,475,1.893,476,2.889,477,1.893,478,1.893,479,3.444,480,1.893,481,1.893,482,1.544,483,1.893,484,1.893,485,1.893,486,1.893,487,1.893,488,1.893,489,2.889,490,1.544,491,2.357,492,1.893,493,2.889,494,1.893,495,1.893,496,1.893,497,1.893,498,3.631,499,2.889,500,2.889,501,2.357,502,1.893,503,1.544,504,1.893,505,1.544,506,1.893,507,1.893,508,2.889,509,2.889,510,1.893,511,1.893,512,1.893,513,1.893,514,1.893,515,1.893,516,1.893,517,1.893,518,3.198,519,2.889,520,3.504,521,3.504,522,4.222,523,3.921,524,1.893,525,1.893,526,1.893,527,2.889,528,1.893,529,2.889,530,1.893,531,1.893,532,1.893,533,4.451,534,1.893,535,1.544,536,1.893,537,2.889,538,1.893,539,1.893,540,1.893,541,1.893,542,1.893,543,2.889,544,1.893,545,1.893,546,1.893,547,1.893,548,1.893,549,1.893,550,1.893,551,1.893,552,2.889,553,1.893,554,1.893,555,1.544,556,1.893,557,1.893,558,1.893,559,1.893,560,1.893,561,1.893,562,1.893,563,1.893,564,1.893,565,1.893,566,1.893,567,1.893,568,1.893,569,1.893,570,2.889,571,2.889,572,1.893,573,1.893,574,1.544,575,1.893,576,3.921,577,3.504,578,2.889,579,3.504,580,2.889,581,1.893,582,2.889,583,1.544,584,1.893,585,1.544,586,1.893,587,4.222,588,1.893,589,3.921,590,2.889,591,1.893,592,1.544,593,1.893,594,2.889,595,1.893,596,1.893,597,1.893,598,1.893,599,1.893]],["title/license.html",[339,1.682,340,1.463,353,1.682]],["body/license.html",[0,0.089,3,0.529,4,0.436,6,0.173,8,0.889,18,0.286,24,0.202,29,0.021,30,0.549,31,0.096,38,0.654,40,0.233,45,0.603,56,0.68,58,0.024,59,0.016,69,0.68,75,0.889,77,0.889,82,2.743,84,1.044,86,0.889,101,0.603,102,1.044,112,0.889,115,0.773,125,2.206,133,3.858,139,2.206,140,2.563,146,1.044,147,2.856,152,2.206,158,0.889,159,1.044,164,1.044,165,1.991,172,0.68,178,0.997,201,1.044,203,1.726,217,0.68,218,1.277,226,2.141,227,0.603,236,1.726,237,1.044,252,1.469,259,0.889,283,0.773,298,2.88,312,0.537,317,0.889,321,2.563,334,0.889,341,2.88,344,2.563,351,2.206,352,3.615,353,3.835,354,1.044,357,1.044,358,3.858,360,0.889,361,2.563,362,2.206,363,2.563,368,2.838,372,1.044,373,0.889,375,1.044,377,2.206,379,1.044,380,3.977,382,2.563,386,3.235,389,1.044,390,2.206,394,2.563,395,1.044,419,1.469,462,1.044,474,2.838,479,1.044,482,3.057,490,1.044,491,1.044,498,2.563,503,2.563,505,1.726,518,1.044,555,1.044,574,1.044,583,2.206,585,2.206,592,3.787,600,3.142,601,2.705,602,2.705,603,1.28,604,1.28,605,1.28,606,4.3,607,3.142,608,4.73,609,4.876,610,2.116,611,1.28,612,1.28,613,4.431,614,3.748,615,2.116,616,4.147,617,3.479,618,2.705,619,4.3,620,1.28,621,3.142,622,2.116,623,2.116,624,2.116,625,5.044,626,3.142,627,2.116,628,3.748,629,1.28,630,2.116,631,1.28,632,1.28,633,1.28,634,1.28,635,1.28,636,1.28,637,2.705,638,2.116,639,1.28,640,3.748,641,3.966,642,2.116,643,1.28,644,1.28,645,1.28,646,1.28,647,1.28,648,5.695,649,2.705,650,2.116,651,1.28,652,4.993,653,2.116,654,2.116,655,1.28,656,5.091,657,1.28,658,1.28,659,1.28,660,1.28,661,1.28,662,2.116,663,2.116,664,1.28,665,1.28,666,1.28,667,3.142,668,2.116,669,3.479,670,2.116,671,1.28,672,1.28,673,1.28,674,1.28,675,2.116,676,1.28,677,1.28,678,1.28,679,2.705,680,1.28,681,1.726,682,1.28,683,1.28,684,1.28,685,2.116,686,2.116,687,3.142,688,2.116,689,2.116,690,2.116,691,2.705,692,2.116,693,2.705,694,2.116,695,2.116,696,2.116,697,2.705,698,1.28,699,2.116,700,2.116,701,1.28,702,3.966,703,3.142,704,2.116,705,2.116,706,1.28,707,2.705,708,1.28,709,2.705,710,2.705,711,1.28,712,1.28,713,2.116,714,2.116,715,1.28,716,1.28,717,1.28,718,1.28,719,1.28,720,1.28,721,1.28,722,1.28,723,3.142,724,1.28,725,3.479,726,1.28,727,1.28,728,1.28,729,1.28,730,1.28,731,1.28,732,1.28,733,2.705,734,3.142,735,2.116,736,1.28,737,1.28,738,1.28,739,2.116,740,2.116,741,1.28,742,2.116,743,2.116,744,1.28,745,1.28,746,1.28,747,1.28,748,1.28,749,1.28,750,1.28,751,1.28,752,1.28,753,1.28,754,1.28,755,1.28,756,1.28,757,1.28,758,1.28,759,1.28,760,3.966,761,2.705,762,2.705,763,3.142,764,2.116,765,2.116,766,1.28,767,1.28,768,1.28,769,2.116,770,2.116,771,1.28,772,2.116,773,1.28,774,1.28,775,3.479,776,1.28,777,1.28,778,1.28,779,2.116,780,1.28,781,1.28,782,1.28,783,3.479,784,1.044,785,1.28,786,1.28,787,1.28,788,1.28,789,2.116,790,1.28,791,1.28,792,1.28,793,1.28,794,1.28,795,1.28,796,1.28,797,1.28,798,1.28,799,1.28,800,2.116,801,1.28,802,1.28,803,1.28,804,1.28,805,1.28,806,1.28,807,1.28,808,1.28,809,1.28,810,2.116,811,2.116,812,1.28,813,1.28,814,1.28,815,1.28,816,1.28,817,1.28,818,1.28,819,1.28,820,1.28,821,1.28,822,1.28,823,1.28,824,1.28,825,1.28,826,1.28,827,1.28,828,1.28,829,1.28]],["title/modules.html",[830,2.722]],["body/modules.html",[29,0.04,58,0.04,59,0.04,830,3.192]],["title/overview.html",[831,3.198]],["body/overview.html",[0,0.317,29,0.04,58,0.04,59,0.04,167,3.707,312,1.906,535,3.707,831,3.707]],["title/miscellaneous/typealiases.html",[459,1.463,832,3.468]],["body/miscellaneous/typealiases.html",[1,1.775,7,0.816,13,1.201,15,0.22,21,0.692,23,3.031,28,0.61,29,0.043,30,0.463,31,0.436,32,0.61,35,0.548,43,0.463,55,0.61,58,0.037,59,0.03,60,1.775,73,2.041,74,3.486,75,2.041,76,2.041,77,2.755,78,2.395,79,2.755,81,2.041,85,2.398,101,1.869,104,1.879,105,2.755,108,2.398,112,2.041,113,1.775,115,2.395,124,1.562,126,2.711,134,1.869,165,2.386,170,2.041,177,3.236,178,1.869,212,2.041,213,2.398,214,2.041,215,2.398,216,2.041,217,2.108,218,1.775,224,1.775,228,1.562,244,1.775,257,1.775,263,1.775,271,1.775,277,1.775,285,1.775,291,1.775,302,1.775,313,1.562,324,1.775,330,1.562,396,2.398,411,2.398,412,2.398,433,2.398,459,1.775,501,3.663,681,2.398,784,3.236,830,2.041,833,2.939,834,4.49,835,2.939,836,2.939,837,5.02,838,4.49,839,4.49,840,4.49,841,4.49,842,2.939,843,4.49,844,2.939,845,2.939,846,2.939,847,4.49,848,2.939,849,2.939,850,2.939,851,3.967]]],"invertedIndex":[["",{"_index":29,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":243,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"coverage.html":{},"index.html":{}}}],["0.2",{"_index":578,"title":{},"body":{"index.html":{}}}],["0.3",{"_index":561,"title":{},"body":{"index.html":{}}}],["0.5",{"_index":576,"title":{},"body":{"index.html":{}}}],["0.8",{"_index":580,"title":{},"body":{"index.html":{}}}],["0/1",{"_index":426,"title":{},"body":{"coverage.html":{}}}],["003366",{"_index":575,"title":{},"body":{"index.html":{}}}],["1",{"_index":283,"title":{},"body":{"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"index.html":{},"license.html":{}}}],["1/1",{"_index":401,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":400,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":535,"title":{},"body":{"index.html":{},"overview.html":{}}}],["17/17",{"_index":407,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":167,"title":{},"body":{"classes/DecodeResultBase.html":{},"overview.html":{}}}],["2.0",{"_index":602,"title":{},"body":{"license.html":{}}}],["2004",{"_index":604,"title":{},"body":{"license.html":{}}}],["25/26",{"_index":398,"title":{},"body":{"coverage.html":{}}}],["28/29",{"_index":406,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":476,"title":{},"body":{"index.html":{}}}],["3/3",{"_index":410,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":408,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":633,"title":{},"body":{"license.html":{}}}],["9",{"_index":612,"title":{},"body":{"license.html":{}}}],["96",{"_index":397,"title":{},"body":{"coverage.html":{}}}],["9a",{"_index":531,"title":{},"body":{"index.html":{}}}],["_e",{"_index":87,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["_i",{"_index":88,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["_o",{"_index":89,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["abov",{"_index":574,"title":{},"body":{"index.html":{},"license.html":{}}}],["abstract",{"_index":80,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["accept",{"_index":344,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["accompani",{"_index":355,"title":{},"body":{"contributing.html":{}}}],["act",{"_index":618,"title":{},"body":{"license.html":{}}}],["add",{"_index":743,"title":{},"body":{"license.html":{}}}],["addendum",{"_index":745,"title":{},"body":{"license.html":{}}}],["addit",{"_index":482,"title":{},"body":{"index.html":{},"license.html":{}}}],["adopt",{"_index":487,"title":{},"body":{"index.html":{}}}],["advis",{"_index":795,"title":{},"body":{"license.html":{}}}],["again",{"_index":376,"title":{},"body":{"contributing.html":{}}}],["against",{"_index":714,"title":{},"body":{"license.html":{}}}],["agre",{"_index":763,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":354,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["alia",{"_index":851,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alias",{"_index":833,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alleg",{"_index":718,"title":{},"body":{"license.html":{}}}],["allow",{"_index":62,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{}}}],["alon",{"_index":711,"title":{},"body":{"license.html":{}}}],["along",{"_index":737,"title":{},"body":{"license.html":{}}}],["alongsid",{"_index":744,"title":{},"body":{"license.html":{}}}],["alreadi",{"_index":371,"title":{},"body":{"contributing.html":{}}}],["altern",{"_index":14,"title":{},"body":{"classes/CombineErrors.html":{}}}],["and(b",{"_index":728,"title":{},"body":{"license.html":{}}}],["and(c",{"_index":732,"title":{},"body":{"license.html":{}}}],["and(d",{"_index":736,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":801,"title":{},"body":{"license.html":{}}}],["annot",{"_index":660,"title":{},"body":{"license.html":{}}}],["anyarrayvalu",{"_index":434,"title":{},"body":{"coverage.html":{}}}],["anyvalu",{"_index":435,"title":{},"body":{"coverage.html":{}}}],["apach",{"_index":600,"title":{},"body":{"license.html":{}}}],["appear",{"_index":741,"title":{},"body":{"license.html":{}}}],["appendix",{"_index":654,"title":{},"body":{"license.html":{}}}],["appli",{"_index":125,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["applic",{"_index":761,"title":{},"body":{"license.html":{}}}],["appropri",{"_index":772,"title":{},"body":{"license.html":{}}}],["archiv",{"_index":822,"title":{},"body":{"license.html":{}}}],["aris",{"_index":787,"title":{},"body":{"license.html":{}}}],["array",{"_index":228,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedNoneOf.html":{},"interfaces/ValueInput.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["array/tupl",{"_index":517,"title":{},"body":{"index.html":{}}}],["arrayvalu",{"_index":436,"title":{},"body":{"coverage.html":{}}}],["assert",{"_index":808,"title":{},"body":{"license.html":{}}}],["associ",{"_index":159,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["assum",{"_index":773,"title":{},"body":{"license.html":{}}}],["attach",{"_index":653,"title":{},"body":{"license.html":{}}}],["attribut",{"_index":734,"title":{},"body":{"license.html":{}}}],["aunion",{"_index":213,"title":{},"body":{"classes/DecodeResultBase.html":{},"miscellaneous/typealiases.html":{}}}],["author",{"_index":615,"title":{},"body":{"license.html":{}}}],["authorship",{"_index":649,"title":{},"body":{"license.html":{}}}],["avail",{"_index":491,"title":{},"body":{"index.html":{},"license.html":{}}}],["base",{"_index":657,"title":{},"body":{"license.html":{}}}],["basi",{"_index":764,"title":{},"body":{"license.html":{}}}],["be",{"_index":572,"title":{},"body":{"index.html":{}}}],["behalf",{"_index":669,"title":{},"body":{"license.html":{}}}],["below",{"_index":655,"title":{},"body":{"license.html":{}}}],["benefici",{"_index":636,"title":{},"body":{"license.html":{}}}],["between",{"_index":103,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedWithinRange.html":{}}}],["bind",{"_index":666,"title":{},"body":{"license.html":{}}}],["boilerpl",{"_index":809,"title":{},"body":{"license.html":{}}}],["booleanvalu",{"_index":437,"title":{},"body":{"coverage.html":{}}}],["both",{"_index":168,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{}}}],["bracket",{"_index":811,"title":{},"body":{"license.html":{}}}],["bring",{"_index":108,"title":{},"body":{"classes/DecodeResultBase.html":{},"miscellaneous/typealiases.html":{}}}],["build",{"_index":469,"title":{},"body":{"index.html":{}}}],["captur",{"_index":287,"title":{},"body":{"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"miscellaneous/enumerations.html":{}}}],["carri",{"_index":729,"title":{},"body":{"license.html":{}}}],["case",{"_index":586,"title":{},"body":{"index.html":{}}}],["caus",{"_index":623,"title":{},"body":{"license.html":{}}}],["chain",{"_index":323,"title":{},"body":{"interfaces/TextInput.html":{}}}],["chang",{"_index":731,"title":{},"body":{"license.html":{}}}],["char",{"_index":413,"title":{},"body":{"coverage.html":{}}}],["charact",{"_index":317,"title":{},"body":{"interfaces/TextInput.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["charg",{"_index":693,"title":{},"body":{"license.html":{}}}],["choos",{"_index":796,"title":{},"body":{"license.html":{}}}],["cla",{"_index":369,"title":{},"body":{"contributing.html":{}}}],["claim",{"_index":707,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"coverage.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["code",{"_index":377,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["color",{"_index":520,"title":{},"body":{"index.html":{}}}],["colortextdecod",{"_index":551,"title":{},"body":{"index.html":{}}}],["colortextdecoder('#003355",{"_index":558,"title":{},"body":{"index.html":{}}}],["colortextdecoder('gray",{"_index":560,"title":{},"body":{"index.html":{}}}],["colortextdecoder('gray0.2",{"_index":563,"title":{},"body":{"index.html":{}}}],["colortextdecoder('hsl(0.1,0.2,0.3",{"_index":565,"title":{},"body":{"index.html":{}}}],["colorvaluedecod",{"_index":582,"title":{},"body":{"index.html":{}}}],["combin",{"_index":8,"title":{},"body":{"classes/CombineErrors.html":{},"index.html":{},"license.html":{}}}],["combineerror",{"_index":1,"title":{"classes/CombineErrors.html":{}},"body":{"classes/CombineErrors.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["come",{"_index":568,"title":{},"body":{"index.html":{}}}],["comma",{"_index":235,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["comment",{"_index":813,"title":{},"body":{"license.html":{}}}],["commerci",{"_index":794,"title":{},"body":{"license.html":{}}}],["common",{"_index":84,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["commun",{"_index":390,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["compil",{"_index":112,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["compli",{"_index":748,"title":{},"body":{"license.html":{}}}],["complianc",{"_index":824,"title":{},"body":{"license.html":{}}}],["comput",{"_index":792,"title":{},"body":{"license.html":{}}}],["concat",{"_index":240,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedNoneOf.html":{},"coverage.html":{}}}],["concaten",{"_index":239,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["concator(this.descript",{"_index":284,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["condit",{"_index":147,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedNoneOf.html":{},"license.html":{}}}],["configur",{"_index":643,"title":{},"body":{"license.html":{}}}],["consequenti",{"_index":786,"title":{},"body":{"license.html":{}}}],["consid",{"_index":506,"title":{},"body":{"index.html":{}}}],["consist",{"_index":802,"title":{},"body":{"license.html":{}}}],["conspicu",{"_index":680,"title":{},"body":{"license.html":{}}}],["const",{"_index":49,"title":{},"body":{"classes/CombineErrors.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"index.html":{}}}],["constitut",{"_index":719,"title":{},"body":{"license.html":{}}}],["constru",{"_index":746,"title":{},"body":{"license.html":{}}}],["construct",{"_index":26,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{}}}],["constructor",{"_index":21,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"miscellaneous/typealiases.html":{}}}],["constructor(ent",{"_index":229,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{}}}],["constructor(error",{"_index":22,"title":{},"body":{"classes/CombineErrors.html":{}}}],["constructor(field",{"_index":266,"title":{},"body":{"classes/ExpectedField.html":{}}}],["constructor(input",{"_index":99,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["constructor(messag",{"_index":65,"title":{},"body":{"classes/CustomError.html":{}}}],["constructor(min",{"_index":248,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{}}}],["constructor(pattern",{"_index":306,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["constructor(readonli",{"_index":48,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"index.html":{}}}],["constructor(valu",{"_index":274,"title":{},"body":{"classes/ExpectedMatch.html":{}}}],["consult",{"_index":387,"title":{},"body":{"contributing.html":{}}}],["consum",{"_index":177,"title":{},"body":{"classes/DecodeResultBase.html":{},"miscellaneous/typealiases.html":{}}}],["contain",{"_index":217,"title":{},"body":{"classes/DecodeResultBase.html":{},"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["content",{"_index":742,"title":{},"body":{"license.html":{}}}],["context",{"_index":335,"title":{},"body":{"interfaces/ValueInput.html":{}}}],["contract",{"_index":627,"title":{},"body":{"license.html":{}}}],["contribut",{"_index":341,"title":{"contributing.html":{}},"body":{"contributing.html":{},"license.html":{}}}],["contribution(",{"_index":710,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":352,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["contributori",{"_index":720,"title":{},"body":{"license.html":{}}}],["control",{"_index":474,"title":{},"body":{"index.html":{},"license.html":{}}}],["contruct",{"_index":174,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["convers",{"_index":646,"title":{},"body":{"license.html":{}}}],["copi",{"_index":723,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":358,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["correspond",{"_index":200,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["counterclaim",{"_index":716,"title":{},"body":{"license.html":{}}}],["coverag",{"_index":393,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cpu",{"_index":514,"title":{},"body":{"index.html":{}}}],["creat",{"_index":220,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["cross",{"_index":715,"title":{},"body":{"license.html":{}}}],["current",{"_index":137,"title":{},"body":{"classes/DecodeResultBase.html":{},"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"index.html":{}}}],["custom",{"_index":63,"title":{},"body":{"classes/CustomError.html":{}}}],["customari",{"_index":758,"title":{},"body":{"license.html":{}}}],["customererror",{"_index":67,"title":{},"body":{"classes/CustomError.html":{}}}],["customerror",{"_index":60,"title":{"classes/CustomError.html":{}},"body":{"classes/CustomError.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["cycl",{"_index":515,"title":{},"body":{"index.html":{}}}],["damag",{"_index":783,"title":{},"body":{"license.html":{}}}],["date",{"_index":722,"title":{},"body":{"license.html":{}}}],["deal",{"_index":584,"title":{},"body":{"index.html":{}}}],["debug",{"_index":42,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{}}}],["decod",{"_index":13,"title":{},"body":{"classes/CombineErrors.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["decodeerror",{"_index":23,"title":{},"body":{"classes/CombineErrors.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["decodeerror.combin",{"_index":552,"title":{},"body":{"index.html":{}}}],["decodefailur",{"_index":79,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["decodefailure(f(this.input",{"_index":211,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodefailure(input",{"_index":223,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodefailure(this.input",{"_index":206,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodererror",{"_index":489,"title":{},"body":{"index.html":{}}}],["decoderesult",{"_index":74,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["decoderesultbas",{"_index":72,"title":{"classes/DecodeResultBase.html":{}},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{}}}],["decoderesultbase.flatmap",{"_index":182,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.flatmaperror",{"_index":188,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.getunsafefailur",{"_index":197,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.getunsafesuccess",{"_index":196,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.isfailur",{"_index":194,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.issuccess",{"_index":193,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.map",{"_index":184,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.maperror",{"_index":190,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.mapinput",{"_index":191,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.match",{"_index":180,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodesuccess",{"_index":78,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["decodesuccess(f(this.input",{"_index":192,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodesuccess(input",{"_index":222,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodesuccess(this.input",{"_index":186,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodetext",{"_index":414,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["decodevalu",{"_index":438,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["default",{"_index":34,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}}}],["defend",{"_index":804,"title":{},"body":{"license.html":{}}}],["defin",{"_index":24,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{},"license.html":{}}}],["definit",{"_index":583,"title":{},"body":{"index.html":{},"license.html":{}}}],["deliber",{"_index":780,"title":{},"body":{"license.html":{}}}],["deriv",{"_index":656,"title":{},"body":{"license.html":{}}}],["describ",{"_index":227,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedWithinRange.html":{},"index.html":{},"license.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"license.html":{}}}],["design",{"_index":682,"title":{},"body":{"license.html":{}}}],["determin",{"_index":771,"title":{},"body":{"license.html":{}}}],["differ",{"_index":373,"title":{},"body":{"contributing.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["digit",{"_index":415,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["direct",{"_index":621,"title":{},"body":{"license.html":{}}}],["directli",{"_index":83,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{}}}],["disclaim",{"_index":759,"title":{},"body":{"license.html":{}}}],["discrimin",{"_index":36,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}}}],["discuss",{"_index":677,"title":{},"body":{"license.html":{}}}],["display",{"_index":700,"title":{},"body":{"license.html":{}}}],["distribut",{"_index":608,"title":{},"body":{"license.html":{}}}],["document",{"_index":394,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["don't",{"_index":375,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["e.tostr",{"_index":52,"title":{},"body":{"classes/CombineErrors.html":{}}}],["each",{"_index":687,"title":{},"body":{"license.html":{}}}],["easier",{"_index":820,"title":{},"body":{"license.html":{}}}],["editori",{"_index":658,"title":{},"body":{"license.html":{}}}],["elabor",{"_index":661,"title":{},"body":{"license.html":{}}}],["electron",{"_index":670,"title":{},"body":{"license.html":{}}}],["element",{"_index":338,"title":{},"body":{"interfaces/ValueInput.html":{}}}],["employ",{"_index":356,"title":{},"body":{"contributing.html":{}}}],["empti",{"_index":591,"title":{},"body":{"index.html":{}}}],["enclos",{"_index":810,"title":{},"body":{"license.html":{}}}],["end",{"_index":259,"title":{},"body":{"classes/ExpectedEoi.html":{},"classes/UnexpectedEoi.html":{},"license.html":{}}}],["entir",{"_index":316,"title":{},"body":{"interfaces/TextInput.html":{},"index.html":{}}}],["entiti",{"_index":226,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["entitytostr",{"_index":233,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"coverage.html":{}}}],["entitytostring(this.ent",{"_index":256,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{}}}],["enumer",{"_index":460,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["eoi",{"_index":327,"title":{},"body":{"classes/UnexpectedEoi.html":{},"coverage.html":{}}}],["eot",{"_index":260,"title":{},"body":{"classes/ExpectedEoi.html":{}}}],["err",{"_index":105,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["err2",{"_index":130,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["error",{"_index":7,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["error(\"can't",{"_index":198,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["even",{"_index":372,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["event",{"_index":776,"title":{},"body":{"license.html":{}}}],["exact",{"_index":273,"title":{},"body":{"classes/ExpectedMatch.html":{}}}],["exampl",{"_index":518,"title":{},"body":{"index.html":{},"license.html":{}}}],["except",{"_index":139,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["exclud",{"_index":679,"title":{},"body":{"license.html":{}}}],["exclus",{"_index":692,"title":{},"body":{"license.html":{}}}],["execut",{"_index":753,"title":{},"body":{"license.html":{}}}],["exercis",{"_index":638,"title":{},"body":{"license.html":{}}}],["exist",{"_index":109,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["expect",{"_index":55,"title":{},"body":{"classes/CombineErrors.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"miscellaneous/typealiases.html":{}}}],["expected_any_of",{"_index":282,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["expectedanyof",{"_index":224,"title":{"classes/ExpectedAnyOf.html":{}},"body":{"classes/ExpectedAnyOf.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedatleast",{"_index":244,"title":{"classes/ExpectedAtLeast.html":{}},"body":{"classes/ExpectedAtLeast.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedeoi",{"_index":257,"title":{"classes/ExpectedEoi.html":{}},"body":{"classes/ExpectedEoi.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedfield",{"_index":263,"title":{"classes/ExpectedField.html":{}},"body":{"classes/ExpectedField.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedmatch",{"_index":271,"title":{"classes/ExpectedMatch.html":{}},"body":{"classes/ExpectedMatch.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectednoneof",{"_index":277,"title":{"classes/ExpectedNoneOf.html":{}},"body":{"classes/ExpectedNoneOf.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedonc",{"_index":285,"title":{"classes/ExpectedOnce.html":{}},"body":{"classes/ExpectedOnce.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedwithinrang",{"_index":291,"title":{"classes/ExpectedWithinRange.html":{}},"body":{"classes/ExpectedWithinRange.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["explicitli",{"_index":749,"title":{},"body":{"license.html":{}}}],["export",{"_index":46,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{}}}],["express",{"_index":505,"title":{},"body":{"index.html":{},"license.html":{}}}],["extend",{"_index":173,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["extract",{"_index":843,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["f",{"_index":127,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["f(e",{"_index":210,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["f(this.failur",{"_index":208,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["f(this.valu",{"_index":183,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["f(v",{"_index":187,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["f]{6})/iy",{"_index":532,"title":{},"body":{"index.html":{}}}],["fail",{"_index":134,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["failur",{"_index":69,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["failuretostr",{"_index":416,"title":{},"body":{"coverage.html":{}}}],["fals",{"_index":195,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["fee",{"_index":797,"title":{},"body":{"license.html":{}}}],["few",{"_index":347,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["fieeld",{"_index":265,"title":{},"body":{"classes/ExpectedField.html":{}}}],["field",{"_index":101,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedField.html":{},"interfaces/ValueInput.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["fifti",{"_index":631,"title":{},"body":{"license.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"coverage.html":{},"license.html":{}}}],["finitenumbervalu",{"_index":439,"title":{},"body":{"coverage.html":{}}}],["fit",{"_index":490,"title":{},"body":{"index.html":{},"license.html":{}}}],["flag",{"_index":509,"title":{},"body":{"index.html":{}}}],["flatmap",{"_index":90,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["flatmap(f",{"_index":118,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["flatmaperror",{"_index":91,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["flatmaperror(f",{"_index":128,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["flexibl",{"_index":496,"title":{},"body":{"index.html":{}}}],["follow",{"_index":351,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["form",{"_index":133,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["format",{"_index":815,"title":{},"body":{"license.html":{}}}],["found",{"_index":463,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["free",{"_index":695,"title":{},"body":{"license.html":{}}}],["full",{"_index":473,"title":{},"body":{"index.html":{}}}],["function",{"_index":126,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["gener",{"_index":178,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"contributing.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["get",{"_index":339,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["getunsafefailur",{"_index":92,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["getunsafesuccess",{"_index":93,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["github",{"_index":383,"title":{},"body":{"contributing.html":{}}}],["give",{"_index":360,"title":{},"body":{"contributing.html":{},"index.html":{},"license.html":{}}}],["given",{"_index":845,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["goodwil",{"_index":790,"title":{},"body":{"license.html":{}}}],["google'",{"_index":391,"title":{},"body":{"contributing.html":{}}}],["govern",{"_index":829,"title":{},"body":{"license.html":{}}}],["grant",{"_index":616,"title":{},"body":{"license.html":{}}}],["granular",{"_index":497,"title":{},"body":{"index.html":{}}}],["grey",{"_index":522,"title":{},"body":{"index.html":{}}}],["grey(0.2",{"_index":564,"title":{},"body":{"index.html":{}}}],["grey(0.3",{"_index":562,"title":{},"body":{"index.html":{}}}],["grey(v",{"_index":542,"title":{},"body":{"index.html":{}}}],["grey(v.grey",{"_index":593,"title":{},"body":{"index.html":{}}}],["greydecod",{"_index":537,"title":{},"body":{"index.html":{}}}],["greyvalu",{"_index":590,"title":{},"body":{"index.html":{}}}],["grossli",{"_index":781,"title":{},"body":{"license.html":{}}}],["guard",{"_index":145,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["guidelin",{"_index":349,"title":{},"body":{"contributing.html":{}}}],["h",{"_index":577,"title":{},"body":{"index.html":{}}}],["handi",{"_index":569,"title":{},"body":{"index.html":{}}}],["happen",{"_index":11,"title":{},"body":{"classes/CombineErrors.html":{}}}],["harmless",{"_index":806,"title":{},"body":{"license.html":{}}}],["head",{"_index":364,"title":{},"body":{"contributing.html":{}}}],["help",{"_index":388,"title":{},"body":{"contributing.html":{}}}],["helper",{"_index":219,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["here",{"_index":581,"title":{},"body":{"index.html":{}}}],["herebi",{"_index":688,"title":{},"body":{"license.html":{}}}],["herein",{"_index":751,"title":{},"body":{"license.html":{}}}],["hold",{"_index":805,"title":{},"body":{"license.html":{}}}],["hsl",{"_index":523,"title":{},"body":{"index.html":{}}}],["hsl(0.1,0.2,0.3)anoth",{"_index":566,"title":{},"body":{"index.html":{}}}],["hsl(v.h",{"_index":596,"title":{},"body":{"index.html":{}}}],["hsl(v[0",{"_index":547,"title":{},"body":{"index.html":{}}}],["hsldecod",{"_index":543,"title":{},"body":{"index.html":{}}}],["hslvalu",{"_index":594,"title":{},"body":{"index.html":{}}}],["http://www.apache.org/licens",{"_index":605,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/licens",{"_index":826,"title":{},"body":{"license.html":{}}}],["https://cla.developers.google.com",{"_index":366,"title":{},"body":{"contributing.html":{}}}],["hue",{"_index":524,"title":{},"body":{"index.html":{}}}],["human",{"_index":39,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}}}],["identif",{"_index":821,"title":{},"body":{"license.html":{}}}],["identifi",{"_index":334,"title":{},"body":{"interfaces/ValueInput.html":{},"coverage.html":{},"license.html":{}}}],["ii",{"_index":629,"title":{},"body":{"license.html":{}}}],["iii",{"_index":635,"title":{},"body":{"license.html":{}}}],["implement",{"_index":516,"title":{},"body":{"index.html":{}}}],["impli",{"_index":765,"title":{},"body":{"license.html":{}}}],["import",{"_index":45,"title":{},"body":{"classes/CombineErrors.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"license.html":{}}}],["improv",{"_index":678,"title":{},"body":{"license.html":{}}}],["in2",{"_index":157,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["inabl",{"_index":788,"title":{},"body":{"license.html":{}}}],["incident",{"_index":785,"title":{},"body":{"license.html":{}}}],["includ",{"_index":380,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["inclus",{"_index":252,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{},"license.html":{}}}],["incorpor",{"_index":685,"title":{},"body":{"license.html":{}}}],["incur",{"_index":807,"title":{},"body":{"license.html":{}}}],["indemn",{"_index":799,"title":{},"body":{"license.html":{}}}],["indemnifi",{"_index":803,"title":{},"body":{"license.html":{}}}],["index",{"_index":15,"title":{"index.html":{}},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["indic",{"_index":651,"title":{},"body":{"license.html":{}}}],["indirect",{"_index":622,"title":{},"body":{"license.html":{}}}],["individu",{"_index":637,"title":{},"body":{"license.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{}}}],["inform",{"_index":218,"title":{},"body":{"classes/DecodeResultBase.html":{},"contributing.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["infring",{"_index":709,"title":{},"body":{"license.html":{}}}],["input",{"_index":104,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedEoi.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["insid",{"_index":319,"title":{},"body":{"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{}}}],["inspect",{"_index":110,"title":{},"body":{"classes/DecodeResultBase.html":{},"interfaces/ValueInput.html":{}}}],["instanc",{"_index":27,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"index.html":{}}}],["institut",{"_index":712,"title":{},"body":{"license.html":{}}}],["int",{"_index":844,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["integervalu",{"_index":440,"title":{},"body":{"coverage.html":{}}}],["intend",{"_index":502,"title":{},"body":{"index.html":{}}}],["intention",{"_index":668,"title":{},"body":{"license.html":{}}}],["interfac",{"_index":312,"title":{"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{}},"body":{"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{},"coverage.html":{},"license.html":{},"overview.html":{}}}],["irrevoc",{"_index":696,"title":{},"body":{"license.html":{}}}],["isfailur",{"_index":94,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["issu",{"_index":676,"title":{},"body":{"license.html":{}}}],["issuccess",{"_index":95,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["istoken",{"_index":441,"title":{},"body":{"coverage.html":{}}}],["it'",{"_index":212,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["januari",{"_index":603,"title":{},"body":{"license.html":{}}}],["javascript",{"_index":336,"title":{},"body":{"interfaces/ValueInput.html":{}}}],["join('\\n",{"_index":54,"title":{},"body":{"classes/CombineErrors.html":{}}}],["js",{"_index":332,"title":{},"body":{"interfaces/ValueInput.html":{},"index.html":{}}}],["json",{"_index":571,"title":{},"body":{"index.html":{}}}],["json.pars",{"_index":573,"title":{},"body":{"index.html":{}}}],["json.stringify(this.input",{"_index":199,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["justifi",{"_index":68,"title":{},"body":{"classes/CustomError.html":{}}}],["keep",{"_index":499,"title":{},"body":{"index.html":{}}}],["kind",{"_index":18,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{}}}],["l",{"_index":579,"title":{},"body":{"index.html":{}}}],["languag",{"_index":828,"title":{},"body":{"license.html":{}}}],["last",{"_index":238,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["law",{"_index":762,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":717,"title":{},"body":{"license.html":{}}}],["lazi",{"_index":402,"title":{},"body":{"coverage.html":{}}}],["leav",{"_index":495,"title":{},"body":{"index.html":{}}}],["left",{"_index":556,"title":{},"body":{"index.html":{}}}],["legal",{"_index":617,"title":{},"body":{"license.html":{}}}],["length",{"_index":241,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["letter",{"_index":417,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["level",{"_index":849,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["liabil",{"_index":775,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":782,"title":{},"body":{"license.html":{}}}],["librari",{"_index":468,"title":{},"body":{"index.html":{}}}],["licens",{"_index":353,"title":{"license.html":{}},"body":{"contributing.html":{},"license.html":{}}}],["license.y",{"_index":747,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":613,"title":{},"body":{"license.html":{}}}],["light",{"_index":526,"title":{},"body":{"index.html":{}}}],["limit",{"_index":641,"title":{},"body":{"license.html":{}}}],["link",{"_index":172,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"license.html":{}}}],["list",{"_index":237,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"license.html":{}}}],["liter",{"_index":161,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["literalvalu",{"_index":442,"title":{},"body":{"coverage.html":{}}}],["literalvalue('hsl",{"_index":595,"title":{},"body":{"index.html":{}}}],["litig",{"_index":713,"title":{},"body":{"license.html":{}}}],["loss",{"_index":789,"title":{},"body":{"license.html":{}}}],["love",{"_index":343,"title":{},"body":{"contributing.html":{}}}],["lower_case_lett",{"_index":466,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lowercaselett",{"_index":418,"title":{},"body":{"coverage.html":{}}}],["made",{"_index":650,"title":{},"body":{"license.html":{}}}],["mail",{"_index":674,"title":{},"body":{"license.html":{}}}],["main",{"_index":111,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["make",{"_index":419,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["malfunct",{"_index":793,"title":{},"body":{"license.html":{}}}],["manag",{"_index":624,"title":{},"body":{"license.html":{}}}],["map",{"_index":96,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["map(",{"_index":51,"title":{},"body":{"classes/CombineErrors.html":{}}}],["map(f",{"_index":150,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["map(v",{"_index":533,"title":{},"body":{"index.html":{}}}],["maperror",{"_index":97,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["maperror(f",{"_index":153,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["mapinput",{"_index":98,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["mapinput(f",{"_index":155,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["mark",{"_index":681,"title":{},"body":{"license.html":{},"miscellaneous/typealiases.html":{}}}],["markoptionalfield",{"_index":838,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["match",{"_index":59,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["match(o",{"_index":160,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["matchanycharof",{"_index":420,"title":{},"body":{"coverage.html":{}}}],["matchinsensit",{"_index":421,"title":{},"body":{"coverage.html":{}}}],["matchinsensitive('gray",{"_index":539,"title":{},"body":{"index.html":{}}}],["matchinsensitive('grey').or(decodeerror.combin",{"_index":538,"title":{},"body":{"index.html":{}}}],["matchinsensitive('hsl",{"_index":544,"title":{},"body":{"index.html":{}}}],["matchnocharof",{"_index":422,"title":{},"body":{"coverage.html":{}}}],["max",{"_index":294,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["maximum",{"_index":297,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["mean",{"_index":592,"title":{},"body":{"index.html":{},"license.html":{}}}],["mechan",{"_index":644,"title":{},"body":{"license.html":{}}}],["media",{"_index":647,"title":{},"body":{"license.html":{}}}],["medium",{"_index":724,"title":{},"body":{"license.html":{}}}],["meet",{"_index":726,"title":{},"body":{"license.html":{}}}],["member",{"_index":381,"title":{},"body":{"contributing.html":{}}}],["memori",{"_index":513,"title":{},"body":{"index.html":{}}}],["merchant",{"_index":767,"title":{},"body":{"license.html":{}}}],["mere",{"_index":665,"title":{},"body":{"license.html":{}}}],["messag",{"_index":64,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{}}}],["method",{"_index":19,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{}}}],["min",{"_index":247,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{}}}],["minimum",{"_index":251,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{}}}],["miscellan",{"_index":459,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["mismatch",{"_index":309,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["miss",{"_index":231,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{}}}],["modif",{"_index":640,"title":{},"body":{"license.html":{}}}],["modifi",{"_index":321,"title":{},"body":{"interfaces/TextInput.html":{},"license.html":{}}}],["modul",{"_index":830,"title":{"modules.html":{}},"body":{"modules.html":{},"miscellaneous/typealiases.html":{}}}],["more",{"_index":389,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["mostli",{"_index":12,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}}}],["multipl",{"_index":9,"title":{},"body":{"classes/CombineErrors.html":{}}}],["name",{"_index":30,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/ValueInput.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["nativ",{"_index":485,"title":{},"body":{"index.html":{}}}],["necessarili",{"_index":708,"title":{},"body":{"license.html":{}}}],["need",{"_index":350,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["neglig",{"_index":779,"title":{},"body":{"license.html":{}}}],["never",{"_index":81,"title":{},"body":{"classes/DecodeResultBase.html":{},"interfaces/TextInput.html":{},"miscellaneous/typealiases.html":{}}}],["new",{"_index":124,"title":{},"body":{"classes/DecodeResultBase.html":{},"contributing.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["next",{"_index":175,"title":{},"body":{"classes/DecodeResultBase.html":{},"interfaces/ValueInput.html":{}}}],["non",{"_index":691,"title":{},"body":{"license.html":{}}}],["none",{"_index":280,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["normal",{"_index":462,"title":{},"body":{"miscellaneous/enumerations.html":{},"license.html":{}}}],["noth",{"_index":555,"title":{},"body":{"index.html":{},"license.html":{}}}],["notic",{"_index":652,"title":{},"body":{"license.html":{}}}],["notwithstand",{"_index":750,"title":{},"body":{"license.html":{}}}],["nullablevalu",{"_index":443,"title":{},"body":{"coverage.html":{}}}],["nullvalu",{"_index":444,"title":{},"body":{"coverage.html":{}}}],["number",{"_index":249,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{},"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{},"index.html":{}}}],["numbervalu",{"_index":445,"title":{},"body":{"coverage.html":{}}}],["numbervalue.test(v",{"_index":588,"title":{},"body":{"index.html":{}}}],["o",{"_index":163,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["o.failure(thi",{"_index":205,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["o.success(thi",{"_index":181,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["object",{"_index":165,"title":{},"body":{"classes/DecodeResultBase.html":{},"interfaces/ValueInput.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["objectvalu",{"_index":446,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["oblig",{"_index":800,"title":{},"body":{"license.html":{}}}],["obtain",{"_index":825,"title":{},"body":{"license.html":{}}}],["occurr",{"_index":296,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["of:\\n${error",{"_index":57,"title":{},"body":{"classes/CombineErrors.html":{}}}],["offer",{"_index":704,"title":{},"body":{"license.html":{}}}],["on",{"_index":56,"title":{},"body":{"classes/CombineErrors.html":{},"classes/ExpectedAnyOf.html":{},"contributing.html":{},"index.html":{},"license.html":{}}}],["onc",{"_index":288,"title":{},"body":{"classes/ExpectedOnce.html":{},"contributing.html":{}}}],["oneof",{"_index":403,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["open",{"_index":392,"title":{},"body":{"contributing.html":{}}}],["oper",{"_index":131,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["option",{"_index":32,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["optionalvalu",{"_index":447,"title":{},"body":{"coverage.html":{}}}],["optionalwhitespac",{"_index":423,"title":{},"body":{"coverage.html":{}}}],["origin",{"_index":152,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["otherwis",{"_index":628,"title":{},"body":{"license.html":{}}}],["out",{"_index":115,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["out2",{"_index":122,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["output",{"_index":501,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["outstand",{"_index":634,"title":{},"body":{"license.html":{}}}],["over",{"_index":365,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["overview",{"_index":831,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":614,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":630,"title":{},"body":{"license.html":{}}}],["page",{"_index":819,"title":{},"body":{"license.html":{}}}],["param",{"_index":47,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{}}}],["paramet",{"_index":28,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["pars",{"_index":519,"title":{},"body":{"index.html":{}}}],["parseint(v",{"_index":534,"title":{},"body":{"index.html":{}}}],["parser",{"_index":481,"title":{},"body":{"index.html":{}}}],["parsers/decod",{"_index":470,"title":{},"body":{"index.html":{}}}],["part",{"_index":363,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["parti",{"_index":740,"title":{},"body":{"license.html":{}}}],["particular",{"_index":768,"title":{},"body":{"license.html":{}}}],["parts",{"_index":467,"title":{},"body":{"index.html":{}}}],["partsing/core/decod",{"_index":475,"title":{},"body":{"index.html":{}}}],["partsing/error",{"_index":492,"title":{},"body":{"index.html":{}}}],["partsing/text",{"_index":484,"title":{},"body":{"index.html":{}}}],["partsing/valu",{"_index":486,"title":{},"body":{"index.html":{}}}],["pass",{"_index":166,"title":{},"body":{"classes/DecodeResultBase.html":{},"interfaces/ValueInput.html":{}}}],["patch",{"_index":345,"title":{},"body":{"contributing.html":{}}}],["patent",{"_index":702,"title":{},"body":{"license.html":{}}}],["path",{"_index":333,"title":{},"body":{"interfaces/ValueInput.html":{},"index.html":{}}}],["pathtostr",{"_index":448,"title":{},"body":{"coverage.html":{}}}],["pattern",{"_index":305,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["patternmismatch",{"_index":302,"title":{"classes/PatternMismatch.html":{}},"body":{"classes/PatternMismatch.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["payload",{"_index":570,"title":{},"body":{"index.html":{}}}],["percent",{"_index":632,"title":{},"body":{"license.html":{}}}],["perform",{"_index":164,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["permiss",{"_index":361,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["perpetu",{"_index":689,"title":{},"body":{"license.html":{}}}],["pertain",{"_index":735,"title":{},"body":{"license.html":{}}}],["picknext",{"_index":545,"title":{},"body":{"index.html":{}}}],["picknext(ratiodecod",{"_index":541,"title":{},"body":{"index.html":{}}}],["place",{"_index":201,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["placehold",{"_index":107,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["point",{"_index":322,"title":{},"body":{"interfaces/TextInput.html":{}}}],["popul",{"_index":169,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["portion",{"_index":478,"title":{},"body":{"index.html":{}}}],["posit",{"_index":318,"title":{},"body":{"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{},"index.html":{}}}],["possibl",{"_index":77,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["power",{"_index":620,"title":{},"body":{"license.html":{}}}],["predic",{"_index":464,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["prefer",{"_index":639,"title":{},"body":{"license.html":{}}}],["prepar",{"_index":698,"title":{},"body":{"license.html":{}}}],["print",{"_index":818,"title":{},"body":{"license.html":{}}}],["probabl",{"_index":374,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["product",{"_index":757,"title":{},"body":{"license.html":{}}}],["project",{"_index":346,"title":{},"body":{"contributing.html":{}}}],["promin",{"_index":730,"title":{},"body":{"license.html":{}}}],["properti",{"_index":16,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{}}}],["protect",{"_index":141,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["provid",{"_index":38,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{},"license.html":{}}}],["publicli",{"_index":699,"title":{},"body":{"license.html":{}}}],["pull",{"_index":384,"title":{},"body":{"contributing.html":{}}}],["purpos",{"_index":386,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["r",{"_index":119,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["rang",{"_index":299,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["ratiodecod",{"_index":527,"title":{},"body":{"index.html":{}}}],["ratiovalu",{"_index":587,"title":{},"body":{"index.html":{}}}],["reach",{"_index":320,"title":{},"body":{"interfaces/TextInput.html":{}}}],["readabl",{"_index":40,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"license.html":{}}}],["readeabl",{"_index":308,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["readonli",{"_index":17,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"index.html":{}}}],["realli",{"_index":471,"title":{},"body":{"index.html":{}}}],["realloc",{"_index":510,"title":{},"body":{"index.html":{}}}],["reason",{"_index":203,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["receiv",{"_index":683,"title":{},"body":{"license.html":{}}}],["recipi",{"_index":727,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":816,"title":{},"body":{"license.html":{}}}],["record/object",{"_index":268,"title":{},"body":{"classes/ExpectedField.html":{}}}],["recov",{"_index":132,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["redistribut",{"_index":362,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["regard",{"_index":754,"title":{},"body":{"license.html":{}}}],["regexp",{"_index":424,"title":{},"body":{"coverage.html":{}}}],["regexp(/0[.]\\d+/y).map(numb",{"_index":528,"title":{},"body":{"index.html":{}}}],["regexp(/[#]([0",{"_index":530,"title":{},"body":{"index.html":{}}}],["regular",{"_index":504,"title":{},"body":{"index.html":{}}}],["remain",{"_index":664,"title":{},"body":{"license.html":{}}}],["rememb",{"_index":477,"title":{},"body":{"index.html":{}}}],["repeat",{"_index":246,"title":{},"body":{"classes/ExpectedAtLeast.html":{}}}],["repetit",{"_index":253,"title":{},"body":{"classes/ExpectedAtLeast.html":{}}}],["replac",{"_index":812,"title":{},"body":{"license.html":{}}}],["repres",{"_index":662,"title":{},"body":{"license.html":{}}}],["represent",{"_index":41,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{}}}],["reproduc",{"_index":697,"title":{},"body":{"license.html":{}}}],["reproduct",{"_index":607,"title":{},"body":{"license.html":{}}}],["request",{"_index":385,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["requir",{"_index":382,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["respons",{"_index":770,"title":{},"body":{"license.html":{}}}],["rest",{"_index":425,"title":{},"body":{"coverage.html":{}}}],["result",{"_index":58,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["retain",{"_index":357,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["return",{"_index":43,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["review",{"_index":378,"title":{},"body":{"contributing.html":{}}}],["revis",{"_index":659,"title":{},"body":{"license.html":{}}}],["rgb",{"_index":521,"title":{},"body":{"index.html":{}}}],["rgb(0x003355",{"_index":559,"title":{},"body":{"index.html":{}}}],["rgb(v",{"_index":536,"title":{},"body":{"index.html":{}}}],["rgbdecod",{"_index":529,"title":{},"body":{"index.html":{}}}],["rgbvalu",{"_index":599,"title":{},"body":{"index.html":{}}}],["right",{"_index":146,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["risk",{"_index":774,"title":{},"body":{"license.html":{}}}],["royalti",{"_index":694,"title":{},"body":{"license.html":{}}}],["s",{"_index":53,"title":{},"body":{"classes/CombineErrors.html":{},"classes/DecodeResultBase.html":{},"index.html":{}}}],["safeintegervalu",{"_index":449,"title":{},"body":{"coverage.html":{}}}],["same",{"_index":817,"title":{},"body":{"license.html":{}}}],["satur",{"_index":525,"title":{},"body":{"index.html":{}}}],["save",{"_index":512,"title":{},"body":{"index.html":{}}}],["scenario",{"_index":567,"title":{},"body":{"index.html":{}}}],["scope",{"_index":148,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["section",{"_index":610,"title":{},"body":{"license.html":{}}}],["see",{"_index":86,"title":{},"body":{"classes/DecodeResultBase.html":{},"contributing.html":{},"license.html":{}}}],["sell",{"_index":705,"title":{},"body":{"license.html":{}}}],["sent",{"_index":673,"title":{},"body":{"license.html":{}}}],["separ",{"_index":236,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"license.html":{}}}],["separatedbytimes(match",{"_index":546,"title":{},"body":{"index.html":{}}}],["sequenc",{"_index":404,"title":{},"body":{"coverage.html":{}}}],["servic",{"_index":756,"title":{},"body":{"license.html":{}}}],["set",{"_index":483,"title":{},"body":{"index.html":{}}}],["shall",{"_index":609,"title":{},"body":{"license.html":{}}}],["shape",{"_index":488,"title":{},"body":{"index.html":{}}}],["share",{"_index":102,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["sign",{"_index":367,"title":{},"body":{"contributing.html":{}}}],["signatur",{"_index":85,"title":{},"body":{"classes/DecodeResultBase.html":{},"miscellaneous/typealiases.html":{}}}],["simpl",{"_index":493,"title":{},"body":{"index.html":{}}}],["simpli",{"_index":359,"title":{},"body":{"contributing.html":{}}}],["simplifi",{"_index":500,"title":{},"body":{"index.html":{}}}],["skipnext(eoi",{"_index":553,"title":{},"body":{"index.html":{}}}],["skipnext(match",{"_index":550,"title":{},"body":{"index.html":{}}}],["skipnext(optionalwhitespac",{"_index":540,"title":{},"body":{"index.html":{}}}],["slice",{"_index":511,"title":{},"body":{"index.html":{}}}],["small",{"_index":348,"title":{},"body":{"contributing.html":{}}}],["softwar",{"_index":642,"title":{},"body":{"license.html":{}}}],["sole",{"_index":769,"title":{},"body":{"license.html":{}}}],["somehow",{"_index":480,"title":{},"body":{"index.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"license.html":{}}}],["special",{"_index":784,"title":{},"body":{"license.html":{},"miscellaneous/typealiases.html":{}}}],["specif",{"_index":827,"title":{},"body":{"license.html":{}}}],["specifi",{"_index":848,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../decoder.t",{"_index":836,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../entity.t",{"_index":461,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../index.t",{"_index":834,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../result.t",{"_index":835,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../type_level.t",{"_index":837,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/core/decoder.t",{"_index":396,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/result.t",{"_index":73,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/result.ts:101",{"_index":149,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:108",{"_index":143,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:115",{"_index":142,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:122",{"_index":135,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:127",{"_index":171,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:34",{"_index":106,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:38",{"_index":114,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:42",{"_index":116,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:46",{"_index":100,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:62",{"_index":162,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:71",{"_index":121,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:76",{"_index":129,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:82",{"_index":151,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:88",{"_index":154,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:94",{"_index":156,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/type_level.t",{"_index":842,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/error/combine_errors.t",{"_index":5,"title":{},"body":{"classes/CombineErrors.html":{},"coverage.html":{}}}],["src/error/combine_errors.ts:27",{"_index":25,"title":{},"body":{"classes/CombineErrors.html":{}}}],["src/error/combine_errors.ts:38",{"_index":37,"title":{},"body":{"classes/CombineErrors.html":{}}}],["src/error/custom_error.t",{"_index":61,"title":{},"body":{"classes/CustomError.html":{},"coverage.html":{}}}],["src/error/custom_error.ts:24",{"_index":66,"title":{},"body":{"classes/CustomError.html":{}}}],["src/error/custom_error.ts:35",{"_index":70,"title":{},"body":{"classes/CustomError.html":{}}}],["src/error/entity.t",{"_index":409,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/error/expected_any_of.t",{"_index":225,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"coverage.html":{}}}],["src/error/expected_any_of.ts:44",{"_index":230,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["src/error/expected_any_of.ts:56",{"_index":232,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["src/error/expected_at_least.t",{"_index":245,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"coverage.html":{}}}],["src/error/expected_at_least.ts:26",{"_index":250,"title":{},"body":{"classes/ExpectedAtLeast.html":{}}}],["src/error/expected_at_least.ts:38",{"_index":254,"title":{},"body":{"classes/ExpectedAtLeast.html":{}}}],["src/error/expected_eoi.t",{"_index":258,"title":{},"body":{"classes/ExpectedEoi.html":{},"coverage.html":{}}}],["src/error/expected_eoi.ts:24",{"_index":261,"title":{},"body":{"classes/ExpectedEoi.html":{}}}],["src/error/expected_eoi.ts:29",{"_index":262,"title":{},"body":{"classes/ExpectedEoi.html":{}}}],["src/error/expected_field.t",{"_index":264,"title":{},"body":{"classes/ExpectedField.html":{},"coverage.html":{}}}],["src/error/expected_field.ts:24",{"_index":267,"title":{},"body":{"classes/ExpectedField.html":{}}}],["src/error/expected_field.ts:35",{"_index":269,"title":{},"body":{"classes/ExpectedField.html":{}}}],["src/error/expected_match.t",{"_index":272,"title":{},"body":{"classes/ExpectedMatch.html":{},"coverage.html":{}}}],["src/error/expected_match.ts:25",{"_index":275,"title":{},"body":{"classes/ExpectedMatch.html":{}}}],["src/error/expected_match.ts:36",{"_index":276,"title":{},"body":{"classes/ExpectedMatch.html":{}}}],["src/error/expected_none_of.t",{"_index":278,"title":{},"body":{"classes/ExpectedNoneOf.html":{},"coverage.html":{}}}],["src/error/expected_none_of.ts:28",{"_index":279,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["src/error/expected_none_of.ts:41",{"_index":281,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["src/error/expected_once.t",{"_index":286,"title":{},"body":{"classes/ExpectedOnce.html":{},"coverage.html":{}}}],["src/error/expected_once.ts:27",{"_index":289,"title":{},"body":{"classes/ExpectedOnce.html":{}}}],["src/error/expected_once.ts:37",{"_index":290,"title":{},"body":{"classes/ExpectedOnce.html":{}}}],["src/error/expected_within_range.t",{"_index":292,"title":{},"body":{"classes/ExpectedWithinRange.html":{},"coverage.html":{}}}],["src/error/expected_within_range.ts:25",{"_index":295,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["src/error/expected_within_range.ts:37",{"_index":300,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["src/error/index.t",{"_index":411,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/error/pattern_mismatch.t",{"_index":303,"title":{},"body":{"classes/PatternMismatch.html":{},"coverage.html":{}}}],["src/error/pattern_mismatch.ts:24",{"_index":307,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["src/error/pattern_mismatch.ts:35",{"_index":310,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["src/error/unexpected_eoi.t",{"_index":325,"title":{},"body":{"classes/UnexpectedEoi.html":{},"coverage.html":{}}}],["src/error/unexpected_eoi.ts:24",{"_index":328,"title":{},"body":{"classes/UnexpectedEoi.html":{}}}],["src/error/unexpected_eoi.ts:29",{"_index":329,"title":{},"body":{"classes/UnexpectedEoi.html":{}}}],["src/text/index.t",{"_index":412,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/text/input.t",{"_index":314,"title":{},"body":{"interfaces/TextInput.html":{},"coverage.html":{}}}],["src/value/index.t",{"_index":433,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/value/input.t",{"_index":331,"title":{},"body":{"interfaces/ValueInput.html":{},"coverage.html":{}}}],["start",{"_index":340,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["state",{"_index":703,"title":{},"body":{"license.html":{}}}],["statement",{"_index":395,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["sticki",{"_index":508,"title":{},"body":{"index.html":{}}}],["still",{"_index":494,"title":{},"body":{"index.html":{}}}],["stoppag",{"_index":791,"title":{},"body":{"license.html":{}}}],["store",{"_index":315,"title":{},"body":{"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{}}}],["stream",{"_index":216,"title":{},"body":{"classes/DecodeResultBase.html":{},"interfaces/TextInput.html":{},"miscellaneous/typealiases.html":{}}}],["string",{"_index":44,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"index.html":{}}}],["stringvalu",{"_index":450,"title":{},"body":{"coverage.html":{}}}],["sub",{"_index":33,"title":{},"body":{"classes/CombineErrors.html":{}}}],["subject",{"_index":686,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":701,"title":{},"body":{"license.html":{}}}],["submiss",{"_index":379,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["submit",{"_index":368,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["subsequ",{"_index":684,"title":{},"body":{"license.html":{}}}],["succ",{"_index":204,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["succe",{"_index":405,"title":{},"body":{"coverage.html":{}}}],["succeed",{"_index":221,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["success",{"_index":117,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{}}}],["successfulli",{"_index":214,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["such",{"_index":625,"title":{},"body":{"license.html":{}}}],["super(input",{"_index":179,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["supersed",{"_index":752,"title":{},"body":{"license.html":{}}}],["support",{"_index":798,"title":{},"body":{"license.html":{}}}],["sure",{"_index":554,"title":{},"body":{"index.html":{}}}],["syntax",{"_index":814,"title":{},"body":{"license.html":{}}}],["system",{"_index":675,"title":{},"body":{"license.html":{}}}],["t",{"_index":846,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["tabl",{"_index":458,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":457,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":170,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["takecharbetween",{"_index":427,"title":{},"body":{"coverage.html":{}}}],["takecharwhil",{"_index":428,"title":{},"body":{"coverage.html":{}}}],["term",{"_index":606,"title":{},"body":{"license.html":{}}}],["termin",{"_index":721,"title":{},"body":{"license.html":{}}}],["testchar",{"_index":429,"title":{},"body":{"coverage.html":{}}}],["testobject",{"_index":451,"title":{},"body":{"coverage.html":{}}}],["testtyp",{"_index":452,"title":{},"body":{"coverage.html":{}}}],["testvalu",{"_index":453,"title":{},"body":{"coverage.html":{}}}],["text",{"_index":498,"title":{},"body":{"index.html":{},"license.html":{}}}],["textdecod",{"_index":839,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["textinput",{"_index":313,"title":{"interfaces/TextInput.html":{}},"body":{"interfaces/TextInput.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["theori",{"_index":777,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":667,"title":{},"body":{"license.html":{}}}],["third",{"_index":739,"title":{},"body":{"license.html":{}}}],["this.error",{"_index":50,"title":{},"body":{"classes/CombineErrors.html":{}}}],["this.failur",{"_index":207,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["this.field",{"_index":270,"title":{},"body":{"classes/ExpectedField.html":{}}}],["this.flatmap(v",{"_index":185,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["this.flatmaperror(",{"_index":209,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["this.max",{"_index":301,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["this.messag",{"_index":71,"title":{},"body":{"classes/CustomError.html":{}}}],["this.min",{"_index":255,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{}}}],["this.pattern",{"_index":311,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["this.valu",{"_index":189,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedMatch.html":{}}}],["those",{"_index":585,"title":{},"body":{"index.html":{},"license.html":{}}}],["three",{"_index":215,"title":{},"body":{"classes/DecodeResultBase.html":{},"miscellaneous/typealiases.html":{}}}],["through",{"_index":611,"title":{},"body":{"license.html":{}}}],["throw",{"_index":138,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["time",{"_index":113,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedAtLeast.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["titl",{"_index":766,"title":{},"body":{"license.html":{}}}],["togeth",{"_index":10,"title":{},"body":{"classes/CombineErrors.html":{}}}],["tort",{"_index":778,"title":{},"body":{"license.html":{}}}],["tostr",{"_index":20,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{}}}],["track",{"_index":479,"title":{},"body":{"index.html":{},"license.html":{}}}],["trade",{"_index":755,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":733,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":706,"title":{},"body":{"license.html":{}}}],["transfom",{"_index":123,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["transform",{"_index":158,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"license.html":{}}}],["translat",{"_index":645,"title":{},"body":{"license.html":{}}}],["travers",{"_index":337,"title":{},"body":{"interfaces/ValueInput.html":{}}}],["tri",{"_index":176,"title":{},"body":{"classes/DecodeResultBase.html":{},"miscellaneous/enumerations.html":{}}}],["true",{"_index":144,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["tupletounion",{"_index":840,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["tuplevalu",{"_index":454,"title":{},"body":{"coverage.html":{}}}],["two",{"_index":76,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["twp",{"_index":293,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["type",{"_index":31,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":832,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["u",{"_index":847,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["undefineablevalu",{"_index":455,"title":{},"body":{"coverage.html":{}}}],["undefinedvalu",{"_index":456,"title":{},"body":{"coverage.html":{}}}],["under",{"_index":619,"title":{},"body":{"license.html":{}}}],["unexpect",{"_index":326,"title":{},"body":{"classes/UnexpectedEoi.html":{}}}],["unexpectedeoi",{"_index":324,"title":{"classes/UnexpectedEoi.html":{}},"body":{"classes/UnexpectedEoi.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["union",{"_index":75,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["unless",{"_index":140,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["unwrap",{"_index":136,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["uppercase_lett",{"_index":465,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["uppercaselett",{"_index":430,"title":{},"body":{"coverage.html":{}}}],["us",{"_index":82,"title":{},"body":{"classes/DecodeResultBase.html":{},"contributing.html":{},"index.html":{},"license.html":{}}}],["usag",{"_index":850,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["util",{"_index":234,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"index.html":{}}}],["v",{"_index":589,"title":{},"body":{"index.html":{}}}],["v.",{"_index":597,"title":{},"body":{"index.html":{}}}],["v.l",{"_index":598,"title":{},"body":{"index.html":{}}}],["v[1",{"_index":548,"title":{},"body":{"index.html":{}}}],["v[2",{"_index":549,"title":{},"body":{"index.html":{}}}],["valid",{"_index":202,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{}}}],["valu",{"_index":35,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["valuedecod",{"_index":841,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["valueinput",{"_index":330,"title":{"interfaces/ValueInput.html":{}},"body":{"interfaces/ValueInput.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["values.length",{"_index":242,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["variabl",{"_index":399,"title":{},"body":{"coverage.html":{}}}],["verbal",{"_index":671,"title":{},"body":{"license.html":{}}}],["version",{"_index":601,"title":{},"body":{"license.html":{}}}],["void",{"_index":120,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["want",{"_index":472,"title":{},"body":{"index.html":{}}}],["warranti",{"_index":760,"title":{},"body":{"license.html":{}}}],["wasn't",{"_index":304,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["we'd",{"_index":342,"title":{},"body":{"contributing.html":{}}}],["wherev",{"_index":738,"title":{},"body":{"license.html":{}}}],["whether",{"_index":626,"title":{},"body":{"license.html":{}}}],["whitespac",{"_index":431,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["whole",{"_index":663,"title":{},"body":{"license.html":{}}}],["within",{"_index":298,"title":{},"body":{"classes/ExpectedWithinRange.html":{},"index.html":{},"license.html":{}}}],["without",{"_index":725,"title":{},"body":{"license.html":{}}}],["withposit",{"_index":432,"title":{},"body":{"coverage.html":{}}}],["work",{"_index":648,"title":{},"body":{"license.html":{}}}],["worldwid",{"_index":690,"title":{},"body":{"license.html":{}}}],["wrap",{"_index":557,"title":{},"body":{"index.html":{}}}],["write",{"_index":503,"title":{},"body":{"index.html":{},"license.html":{}}}],["written",{"_index":672,"title":{},"body":{"license.html":{}}}],["y",{"_index":507,"title":{},"body":{"index.html":{}}}],["you'v",{"_index":370,"title":{},"body":{"contributing.html":{}}}],["yyyi",{"_index":823,"title":{},"body":{"license.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/CombineErrors.html":{"url":"classes/CombineErrors.html","title":"class - CombineErrors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CombineErrors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/combine_errors.ts\n        \n\n            \n                Description\n            \n            \n                Error class to combine multiple errors together. This happen mostly for\ndecoders that have alternatives.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(errors: DecodeError[])\n                    \n                \n                        \n                            \n                                Defined in src/error/combine_errors.ts:27\n                            \n                        \n\n                \n                    \n                            Construct an instance of CombineErrors\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        errors\n                                                  \n                                                        \n                                                                    DecodeError[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                the sub-errors to combine.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'combine-errors'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/combine_errors.ts:27\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/combine_errors.ts:38\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { DecodeError } from './'\n\n/**\n * Error class to combine multiple errors together. This happen mostly for\n * decoders that have alternatives.\n */\nexport class CombineErrors {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'combine-errors' = 'combine-errors'\n\n  /**\n   * Construct an instance of `CombineErrors`\n   * @param errors the sub-errors to combine.\n   */\n  constructor(readonly errors: DecodeError[]) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    const errors: string = this.errors\n      .map(e => e.toString())\n      .map(s => `  - ${s}`)\n      .join('\\n')\n    return `expected one of:\\n${errors}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomError.html":{"url":"classes/CustomError.html","title":"class - CustomError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/custom_error.ts\n        \n\n            \n                Description\n            \n            \n                Error type that allows for a customized message.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/custom_error.ts:24\n                            \n                        \n\n                \n                    \n                            Construct an instance of CustomerError.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The human readable message that justifies the failure.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'custom-error'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/custom_error.ts:24\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/custom_error.ts:35\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class CustomError {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'custom-error' = 'custom-error'\n\n  /**\n   * Construct an instance of `CustomerError`.\n   * @param message The human readable message that justifies the failure.\n   */\n  constructor(readonly message: string) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return this.message\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DecodeResultBase.html":{"url":"classes/DecodeResultBase.html","title":"class - DecodeResultBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DecodeResultBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/result.ts\n        \n\n            \n                Description\n            \n            \n                DecodeResult is a union type that has two possible constructors\nDecodeSuccess and DecodeFailure.\nDecodeResultBase is abstract and should never be used directly. It is\ndefined to provide a common signature to the only two possible constructors\nDecodeSuccess and DecodeFailure.\nSee DecodeResult.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                _E\n                            \n                            \n                                    Readonly\n                                _I\n                            \n                            \n                                    Readonly\n                                _O\n                            \n                            \n                                    Abstract\n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                flatMap\n                            \n                            \n                                    Abstract\n                                flatMapError\n                            \n                            \n                                    Abstract\n                                getUnsafeFailure\n                            \n                            \n                                    Abstract\n                                getUnsafeSuccess\n                            \n                            \n                                    Abstract\n                                isFailure\n                            \n                            \n                                    Abstract\n                                isSuccess\n                            \n                            \n                                    Abstract\n                                map\n                            \n                            \n                                    Abstract\n                                mapError\n                            \n                            \n                                    Abstract\n                                mapInput\n                            \n                            \n                                    Abstract\n                                match\n                            \n                            \n                                    Abstract\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(input: In)\n                    \n                \n                        \n                            \n                                Defined in src/core/result.ts:46\n                            \n                        \n\n                \n                    \n                            Construct an instance of DecodeResult. The only field that is shared\nbetween DecodeSuccess and DecodeFailure is input: In.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        input\n                                                  \n                                                        \n                                                                    In\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            _E\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _E:     Err\n\n                    \n                \n                    \n                        \n                            Type :     Err\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/result.ts:34\n                            \n                        \n\n                \n                    \n                        These placeholder (_I, _O, _E) types are not expected to bring any\nvalue. They exist to allow inspecting the main types of a DecodeResult at\ncompile time.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            _I\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _I:     In\n\n                    \n                \n                    \n                        \n                            Type :     In\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/result.ts:38\n                            \n                        \n\n                \n                    \n                        See _E.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            _O\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _O:     Out\n\n                    \n                \n                    \n                        \n                            Type :     Out\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/result.ts:42\n                            \n                        \n\n                \n                    \n                        See _E.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \"decode-success\" | \"decode-failure\"\n\n                    \n                \n                    \n                        \n                            Type :     \"decode-success\" | \"decode-failure\"\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/result.ts:46\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            flatMap\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        flatMap(f: (r: Out) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:71\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        Out2\n                                \n                            \n                        \n\n                \n                    \n                            Transfom the result of a DecodeSuccess into a new DecodeResult by applying\nthe function f to it.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            flatMapError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        flatMapError(f: (r: Err) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:76\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        Err2\n                                \n                            \n                        \n\n                \n                    \n                            Transfom the result of a DecodeFailure into a new DecodeResult by applying\nthe function f to it. This operation allows to recover form a failed result.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            getUnsafeFailure\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getUnsafeFailure()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:122\n                            \n                        \n\n\n                \n                    \n                            Unwrap the result value of a DecodeFailure. If the current instance is of\ntype DecodeSuccess then this function will throw an exception.\nDo not use unless you are protecting from exceptions.\n\n\n                            \n                                Returns :     Err\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            getUnsafeSuccess\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getUnsafeSuccess()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:115\n                            \n                        \n\n\n                \n                    \n                            Unwrap the result value of a DecodeSuccess. If the current instance is of\ntype DecodeFailure then this function will throw an exception.\nDo not use unless you are protecting from exceptions.\n\n\n                            \n                                Returns :     Out\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            isFailure\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        isFailure()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:108\n                            \n                        \n\n\n                \n                    \n                            Return true if the current instance is of type DecodeFailure. It also\nprovide a guard value so that properties of DecodeFailure can be used\nin the right conditional scope.\n\n\n                            \n                                Returns :     DecodeFailure\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            isSuccess\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        isSuccess()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:101\n                            \n                        \n\n\n                \n                    \n                            Return true if the current instance is of type DecodeSuccess. It also\nprovide a guard value so that properties of DecodeSuccess can be used\nin the right conditional scope.\n\n\n                            \n                                Returns :     DecodeSuccess\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            map\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        map(f: (r: Out) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:82\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        Out2\n                                \n                            \n                        \n\n                \n                    \n                            Transfom the result of a DecodeSuccess into a new value of type Out2 by\napplying the function f to the original Out value.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            mapError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        mapError(f: (r: Err) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:88\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        Err2\n                                \n                            \n                        \n\n                \n                    \n                            Transfom the result of a DecodeFailure into a new value of type Err2 by\napplying the function f to the original Err value.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            mapInput\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        mapInput(f: (i: In) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:94\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        In2\n                                \n                            \n                        \n\n                \n                    \n                            Transform the input value associated with the current DecodeResult into\na new input of type In2.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            match\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        match(o: literal type)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:62\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        O\n                                \n                            \n                        \n\n                \n                    \n                            Transform an instance of DecodeResult into any type O.\nTo perform the transformation an object is passed with 2 fields success\nand failure. Both fields must be populated with a function.\n\nsuccess will take a function DecodeSuccess -> O\nfailure will take a function DecodeFailure -> O\n\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        o\n                                                        \n                                                                    literal type\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     O\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:127\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        abstract class DecodeResultBase {\n  /**\n   * These placeholder (`_I`, `_O`, `_E`) types are not expected to bring any\n   * value. They exist to allow inspecting the main types of a DecodeResult at\n   * compile time.\n   */\n  readonly _E!: Err\n  /**\n   * See {@link _E}.\n   */\n  readonly _I!: In\n  /**\n   * See {@link _E}.\n   */\n  readonly _O!: Out\n  /**\n   * Type discriminator\n   */\n  abstract readonly kind: 'decode-success' | 'decode-failure'\n\n  /**\n   * Construct an instance of `{@link DecodeResult}`. The only field that is shared\n   * between `{@link DecodeSuccess}` and `{@link DecodeFailure}` is `input: In`.\n   */\n  constructor(readonly input: In) {}\n\n  /**\n   * Transform an instance of `{@link DecodeResult}` into any type `O`.\n   * To perform the transformation an object is passed with 2 fields `success`\n   * and `failure`. Both fields must be populated with a function.\n   *\n   * * `success` will take a function `DecodeSuccess -> O`\n   * * `failure` will take a function `DecodeFailure -> O`\n   */\n  abstract match(o: {\n    success: (s: DecodeSuccess) => O\n    failure: (f: DecodeFailure) => O\n  }): O\n\n  /**\n   * Transfom the result of a `DecodeSuccess` into a new `DecodeResult` by applying\n   * the function `f` to it.\n   */\n  abstract flatMap(f: (r: Out) => DecodeResult): DecodeResult\n  /**\n   * Transfom the result of a `DecodeFailure` into a new `DecodeResult` by applying\n   * the function `f` to it. This operation allows to recover form a failed result.\n   */\n  abstract flatMapError(f: (r: Err) => DecodeResult): DecodeResult\n\n  /**\n   * Transfom the result of a `DecodeSuccess` into a new value of type `Out2` by\n   * applying the function `f` to the original `Out` value.\n   */\n  abstract map(f: (r: Out) => Out2): DecodeResult\n\n  /**\n   * Transfom the result of a `DecodeFailure` into a new value of type `Err2` by\n   * applying the function `f` to the original `Err` value.\n   */\n  abstract mapError(f: (r: Err) => Err2): DecodeResult\n\n  /**\n   * Transform the input value associated with the current `DecodeResult` into\n   * a new input of type `In2`.\n   */\n  abstract mapInput(f: (i: In) => In2): DecodeResult\n\n  /**\n   * Return true if the current instance is of type `DecodeSuccess`. It also\n   * provide a guard value so that properties of `DecodeSuccess` can be used\n   * in the right conditional scope.\n   */\n  abstract isSuccess(): this is DecodeSuccess\n\n  /**\n   * Return true if the current instance is of type `DecodeFailure`. It also\n   * provide a guard value so that properties of `DecodeFailure` can be used\n   * in the right conditional scope.\n   */\n  abstract isFailure(): this is DecodeFailure\n\n  /**\n   * Unwrap the result value of a `DecodeSuccess`. If the current instance is of\n   * type `DecodeFailure` then this function will throw an exception.\n   * Do not use unless you are protecting from exceptions.\n   */\n  abstract getUnsafeSuccess(): Out\n\n  /**\n   * Unwrap the result value of a `DecodeFailure`. If the current instance is of\n   * type `DecodeSuccess` then this function will throw an exception.\n   * Do not use unless you are protecting from exceptions.\n   */\n  abstract getUnsafeFailure(): Err\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  abstract toString(): string\n}\n\nexport class DecodeSuccess extends DecodeResultBase {\n  /**\n   * Type discriminator\n   */\n  readonly kind = 'decode-success'\n\n  /**\n   * Contruct an instance of `DecodeSuccess`.\n   * @param input The input value that the next decoder should try to consume.\n   * @param value The value generated from the decoding operation.\n   */\n  constructor(input: In, readonly value: Out) {\n    super(input)\n  }\n\n  /**\n   * See {@link DecodeResultBase.match}\n   */\n  match(o: { success: (s: DecodeSuccess) => O; failure: (f: DecodeFailure) => O }): O {\n    return o.success(this)\n  }\n\n  /**\n   * See {@link DecodeResultBase.flatMap}\n   */\n  flatMap(f: (r: Out) => DecodeResult): DecodeResult {\n    return f(this.value)\n  }\n\n  /**\n   * See {@link DecodeResultBase.map}\n   */\n  map(f: (r: Out) => Out2): DecodeResult {\n    return this.flatMap(v => new DecodeSuccess(this.input, f(v)))\n  }\n\n  /**\n   * See {@link DecodeResultBase.flatMapError}\n   */\n  flatMapError(f: (r: Err) => DecodeResult): DecodeResult {\n    return new DecodeSuccess(this.input, this.value)\n  }\n\n  /**\n   * See {@link DecodeResultBase.mapError}\n   */\n  mapError(f: (r: Err) => Err2): DecodeResult {\n    return new DecodeSuccess(this.input, this.value)\n  }\n\n  /**\n   * See {@link DecodeResultBase.mapInput}\n   */\n  mapInput(f: (i: In) => In2): DecodeResult {\n    return new DecodeSuccess(f(this.input), this.value)\n  }\n\n  /**\n   * See {@link DecodeResultBase.isSuccess}\n   */\n  isSuccess(): this is DecodeSuccess {\n    return true\n  }\n\n  /**\n   * See {@link DecodeResultBase.isFailure}\n   */\n  isFailure(): this is DecodeFailure {\n    return false\n  }\n\n  /**\n   * See {@link DecodeResultBase.getUnsafeSuccess}\n   */\n  getUnsafeSuccess(): Out {\n    return this.value\n  }\n\n  /**\n   * See {@link DecodeResultBase.getUnsafeFailure}\n   */\n  getUnsafeFailure(): Err {\n    throw new Error(\"can't get failure from success\")\n  }\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString(): string {\n    return `DecodeSuccess: ${JSON.stringify(this.input)}`\n  }\n}\n\nexport class DecodeFailure extends DecodeResultBase {\n  /**\n   * Type discriminator\n   */\n  readonly kind = 'decode-failure'\n\n  /**\n   * Contruct an instance of `DecodeFailure`.\n   * @param input The input value that corresponds to the place where the decoder\n   * failed to generate a valid result.\n   * @param failure The error message associated with the reason why the decoder\n   * failed.\n   */\n  constructor(input: In, readonly failure: Err) {\n    super(input)\n  }\n\n  /**\n   * See {@link DecodeResultBase.match}\n   */\n  match(o: {\n    success: (succ: DecodeSuccess) => O\n    failure: (fail: DecodeFailure) => O\n  }): O {\n    return o.failure(this)\n  }\n\n  /**\n   * See {@link DecodeResultBase.flatMap}\n   */\n  flatMap(f: (r: Out) => DecodeResult): DecodeResult {\n    return new DecodeFailure(this.input, this.failure)\n  }\n\n  /**\n   * See {@link DecodeResultBase.map}\n   */\n  map(f: (r: Out) => Out2): DecodeResult {\n    return new DecodeFailure(this.input, this.failure)\n  }\n\n  /**\n   * See {@link DecodeResultBase.flatMapError}\n   */\n  flatMapError(f: (r: Err) => DecodeResult): DecodeResult {\n    return f(this.failure)\n  }\n\n  /**\n   * See {@link DecodeResultBase.mapError}\n   */\n  mapError(f: (r: Err) => Err2): DecodeResult {\n    return this.flatMapError(e => new DecodeFailure(this.input, f(e)))\n  }\n\n  /**\n   * See {@link DecodeResultBase.mapInput}\n   */\n  mapInput(f: (i: In) => In2): DecodeResult {\n    return new DecodeFailure(f(this.input), this.failure)\n  }\n\n  /**\n   * See {@link DecodeResultBase.isSuccess}\n   */\n  isSuccess(): this is DecodeSuccess {\n    return false\n  }\n\n  /**\n   * See {@link DecodeResultBase.isFailure}\n   */\n  isFailure(): this is DecodeFailure {\n    return true\n  }\n\n  /**\n   * See {@link DecodeResultBase.getUnsafeSuccess}\n   */\n  getUnsafeSuccess(): Out {\n    throw new Error(\"can't get success from failure\")\n  }\n\n  /**\n   * See {@link DecodeResultBase.getUnsafeFailure}\n   */\n  getUnsafeFailure(): Err {\n    return this.failure\n  }\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString(): string {\n    return `DecodeFailure: ${JSON.stringify(this.input)}`\n  }\n}\n\n/**\n * `DecodeResult` it's an either type, aunion type of two possible constructors.\n * It can either be:\n *\n * * `DecodeSuccess`: a decoder was able to successfully decode a value\n * * `DecodeFailure`: a decoder failed to decode a value\n *\n * A `DecodeResult` brings three type parameters like in `{@link Decoder}`:\n *\n * * `In`: The input stream for a decoder.\n * * `Out`: The expected result from a decoder.\n * * `Err`: The type that contains information on why a decoder failed.\n */\nexport type DecodeResult = DecodeSuccess | DecodeFailure\n\n/**\n * Helper function to create an instance of `DecodeResult` from a succeeded decoding.\n */\nexport const success = (input: In, result: Out): DecodeResult =>\n  new DecodeSuccess(input, result)\n\n/**\n * Helper function to create an instance of `DecodeResult` from a failed decoding.\n */\nexport const failure = (input: In, failure: Err): DecodeResult =>\n  new DecodeFailure(input, failure)\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedAnyOf.html":{"url":"classes/ExpectedAnyOf.html","title":"class - ExpectedAnyOf","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedAnyOf\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_any_of.ts\n        \n\n            \n                Description\n            \n            \n                Error for any Entity that should match at least one of the conditions\ndescribed in the descriptions array.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entity: Entity, descriptions: string[])\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_any_of.ts:44\n                            \n                        \n\n                \n                    \n                            Construct an instance of ExpectedAnyOf\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                    Entity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        descriptions\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Human readable descriptions of all the missed matches.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-any-of'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_any_of.ts:44\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_any_of.ts:56\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, entityToString } from './entity'\n\n/**\n * Utility function to generate a comma separate list of values where the last\n * one is concatenated by `or`.\n */\nexport const concatOr = (values: string[]) => {\n  const length = values.length\n  if (length === 0) {\n    return ''\n  } else if (length \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedAtLeast.html":{"url":"classes/ExpectedAtLeast.html","title":"class - ExpectedAtLeast","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedAtLeast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_at_least.ts\n        \n\n            \n                Description\n            \n            \n                Error for an Entity that was not repeated at least min times.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(min: number, entity: Entity)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_at_least.ts:26\n                            \n                        \n\n                \n                    \n                            Construct an instance of ExpectedAtLeast\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        min\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                minimum (inclusive) number of expected repetitions\n\n                                                        \n                                                \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                    Entity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-at-least'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_at_least.ts:26\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_at_least.ts:38\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, entityToString } from './entity'\n\n/**\n * Error for an {@link Entity} that was not repeated at least `min` times.\n */\nexport class ExpectedAtLeast {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-at-least' = 'expected-at-least'\n\n  /**\n   * Construct an instance of `ExpectedAtLeast`\n   * @param min minimum (inclusive) number of expected repetitions\n   * @param entity\n   */\n  constructor(readonly min: number, readonly entity: Entity) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `expected at least ${this.min} ${entityToString(this.entity, this.min)}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedEoi.html":{"url":"classes/ExpectedEoi.html","title":"class - ExpectedEoi","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedEoi\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_eoi.ts\n        \n\n            \n                Description\n            \n            \n                Error for expected end of input.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-eot'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_eoi.ts:24\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_eoi.ts:29\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class ExpectedEoi {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-eot' = 'expected-eot'\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `expected end of input`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedField.html":{"url":"classes/ExpectedField.html","title":"class - ExpectedField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_field.ts\n        \n\n            \n                Description\n            \n            \n                Error for missing fieeld.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_field.ts:24\n                            \n                        \n\n                \n                    \n                            Construct an instance of ExpectedField\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                name of the missing field in a record/object.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-field'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_field.ts:24\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_field.ts:35\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class ExpectedField {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-field' = 'expected-field'\n\n  /**\n   * Construct an instance of `ExpectedField`\n   * @param field name of the missing field in a record/object.\n   */\n  constructor(readonly field: string) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `expected field \"${this.field}\"`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedMatch.html":{"url":"classes/ExpectedMatch.html","title":"class - ExpectedMatch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedMatch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_match.ts\n        \n\n            \n                Description\n            \n            \n                Error for an exact match that failed. The expectation is described as a\nstring.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_match.ts:25\n                            \n                        \n\n                \n                    \n                            Construct an instance of ExpectedMatch\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Human readable description of the missed match.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-match'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_match.ts:25\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_match.ts:36\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class ExpectedMatch {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-match' = 'expected-match'\n\n  /**\n   * Construct an instance of `ExpectedMatch`\n   * @param value Human readable description of the missed match.\n   */\n  constructor(readonly value: string) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `expected ${this.value}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedNoneOf.html":{"url":"classes/ExpectedNoneOf.html","title":"class - ExpectedNoneOf","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedNoneOf\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_none_of.ts\n        \n\n            \n                Description\n            \n            \n                Error for a decoder that is expected to fail decoding an Entity for\nany of the values as they are described in the descriptions array.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entity: Entity, descriptions: string[])\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_none_of.ts:28\n                            \n                        \n\n                \n                    \n                            Construct an instance of ExpectedNoneOf\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                    Entity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        descriptions\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Human readable descriptions of the conditions that should\nnot have been matched.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'none-of-error'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_none_of.ts:28\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_none_of.ts:41\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, entityToString } from './entity'\nimport { concatOr } from './expected_any_of'\n\n/**\n * Error for a decoder that is expected to fail decoding an {@link Entity} for\n * any of the values as they are described in the `descriptions` array.\n */\nexport class ExpectedNoneOf {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'none-of-error' = 'none-of-error'\n\n  /**\n   * Construct an instance of `ExpectedNoneOf`\n   * @param entity\n   * @param descriptions Human readable descriptions of the conditions that should\n   * not have been matched.\n   */\n  constructor(readonly entity: Entity, readonly descriptions: string[]) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `expected no ${entityToString(this.entity, 1)} like ${concatOr(this.descriptions)}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedOnce.html":{"url":"classes/ExpectedOnce.html","title":"class - ExpectedOnce","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedOnce\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_once.ts\n        \n\n            \n                Description\n            \n            \n                Error for an Entity that was expected to be captured once by a\ndecoder.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entity: Entity)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_once.ts:27\n                            \n                        \n\n                \n                    \n                            Construct an instance of ExpectedOnce.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                    Entity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-once'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_once.ts:27\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_once.ts:37\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, entityToString } from './entity'\n\n/**\n * Error for an {@link Entity} that was expected to be captured once by a\n * decoder.\n */\nexport class ExpectedOnce {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-once' = 'expected-once'\n\n  /**\n   * Construct an instance of `ExpectedOnce`.\n   */\n  constructor(readonly entity: Entity) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `expected a ${entityToString(this.entity, 1)}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedWithinRange.html":{"url":"classes/ExpectedWithinRange.html","title":"class - ExpectedWithinRange","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedWithinRange\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_within_range.ts\n        \n\n            \n                Description\n            \n            \n                Error for a decoder that should have captured a value between twp values\nas described in min and max.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(min: string, max: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_within_range.ts:25\n                            \n                        \n\n                \n                    \n                            Construct an instance of ExpectedWithinRange.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        min\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                minimum number of occurrances expected (inclusive).\n\n                                                        \n                                                \n                                                \n                                                        max\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                maximum number of occurrances expected (inclusive).\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-within-range'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_within_range.ts:25\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_within_range.ts:37\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class ExpectedWithinRange {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-within-range' = 'expected-within-range'\n\n  /**\n   * Construct an instance of `ExpectedWithinRange`.\n   * @param min minimum number of occurrances expected (inclusive).\n   * @param max maximum number of occurrances expected (inclusive).\n   */\n  constructor(readonly min: string, readonly max: string) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `expected between ${this.min} and ${this.max}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatternMismatch.html":{"url":"classes/PatternMismatch.html","title":"class - PatternMismatch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatternMismatch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/pattern_mismatch.ts\n        \n\n            \n                Description\n            \n            \n                Expected error for a decoder that wasn't able to match pattern.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pattern: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/pattern_mismatch.ts:24\n                            \n                        \n\n                \n                    \n                            Construct an instance of PatternMismatch.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        pattern\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Human readeable description of the pattern that wasn't matched.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'pattern-mismatch'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/pattern_mismatch.ts:24\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/pattern_mismatch.ts:35\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class PatternMismatch {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'pattern-mismatch' = 'pattern-mismatch'\n\n  /**\n   * Construct an instance of `PatternMismatch`.\n   * @param pattern Human readeable description of the pattern that wasn't matched.\n   */\n  constructor(readonly pattern: string) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `expected to match pattern ${this.pattern}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TextInput.html":{"url":"interfaces/TextInput.html","title":"interface - TextInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TextInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/text/input.ts\n        \n\n            \n                Description\n            \n            \n                TextInput stores the entire input value as a string and contains\nan index as the current character position inside the stream.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        index\n                                \n                                \n                                        input\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        index\n                                    \n                                \n                                \n                                    \n                                        index:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The current position reached by a decoder.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        input\n                                    \n                                \n                                \n                                    \n                                        input:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The string input. Its value is never modified by the decoders at any point\nin the chain.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface TextInput {\n  /**\n   * The string input. Its value is never modified by the decoders at any point\n   * in the chain.\n   */\n  readonly input: string\n\n  /**\n   * The current position reached by a decoder.\n   */\n  readonly index: number\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnexpectedEoi.html":{"url":"classes/UnexpectedEoi.html","title":"class - UnexpectedEoi","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnexpectedEoi\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/unexpected_eoi.ts\n        \n\n            \n                Description\n            \n            \n                Error for a decoder that is not expecting an end of input.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'unexpected-eoi'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/unexpected_eoi.ts:24\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/unexpected_eoi.ts:29\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class UnexpectedEoi {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'unexpected-eoi' = 'unexpected-eoi'\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `unexpected end of input`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValueInput.html":{"url":"interfaces/ValueInput.html","title":"interface - ValueInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ValueInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/value/input.ts\n        \n\n            \n                Description\n            \n            \n                ValueInput stores the current input value as a any (any JS value) and\ncontains a path value to identify the position in the current context.\npath is an array of either string values (field names of an object) or\nnumber values (index inside an array).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        input\n                                \n                                \n                                        path\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        input\n                                    \n                                \n                                \n                                    \n                                        input:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The input JavaScript value. It can be any value of any type.\nWhen decoders traverse an array or object value, they will pass only the\ncurrently inspected element to the next decoder and not the source value.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:     (string | number)[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     (string | number)[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The current path for this value input.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ValueInput {\n  /**\n   * The input JavaScript value. It can be any value of any type.\n   *\n   * When decoders traverse an array or object value, they will pass only the\n   * currently inspected element to the next decoder and not the source value.\n   */\n  readonly input: any\n\n  /**\n   * The current path for this value input.\n   */\n  readonly path: (string | number)[]\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nHow to Contribute\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\nContributor License Agreement\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to https://cla.developers.google.com/ to see\nyour current agreements on file or to sign a new one.\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\nCode reviews\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\nGitHub Help for more\ninformation on using pull requests.\nCommunity Guidelines\nThis project follows\nGoogle's Open Source Community Guidelines.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                class\n            \n            \n                Decoder\n            \n            \n                96 %\n                (25/26)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                fail\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                lazy\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                oneOf\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                sequence\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                succeed\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                class\n            \n            \n                DecodeFailure\n            \n            \n                96 %\n                (28/29)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                class\n            \n            \n                DecodeResultBase\n            \n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                class\n            \n            \n                DecodeSuccess\n            \n            \n                96 %\n                (28/29)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                variable\n            \n            \n                failure\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                variable\n            \n            \n                success\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/error/combine_errors.ts\n            \n            \n                class\n            \n            \n                CombineErrors\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/custom_error.ts\n            \n            \n                class\n            \n            \n                CustomError\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/entity.ts\n            \n            \n                variable\n            \n            \n                entityToString\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/error/expected_any_of.ts\n            \n            \n                class\n            \n            \n                ExpectedAnyOf\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/expected_any_of.ts\n            \n            \n                variable\n            \n            \n                concatOr\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/error/expected_at_least.ts\n            \n            \n                class\n            \n            \n                ExpectedAtLeast\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/expected_eoi.ts\n            \n            \n                class\n            \n            \n                ExpectedEoi\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/error/expected_field.ts\n            \n            \n                class\n            \n            \n                ExpectedField\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/expected_match.ts\n            \n            \n                class\n            \n            \n                ExpectedMatch\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/expected_none_of.ts\n            \n            \n                class\n            \n            \n                ExpectedNoneOf\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/expected_once.ts\n            \n            \n                class\n            \n            \n                ExpectedOnce\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/expected_within_range.ts\n            \n            \n                class\n            \n            \n                ExpectedWithinRange\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/index.ts\n            \n            \n                variable\n            \n            \n                DecodeError\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/error/pattern_mismatch.ts\n            \n            \n                class\n            \n            \n                PatternMismatch\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/unexpected_eoi.ts\n            \n            \n                class\n            \n            \n                UnexpectedEoi\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                char\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                decodeText\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                digit\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                digits\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                eoi\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                failureToString\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                letter\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                letters\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                lowerCaseLetter\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                lowerCaseLetters\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                make\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                match\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                matchAnyCharOf\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                matchInsensitive\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                matchNoCharOf\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                optionalWhitespace\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                regexp\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                rest\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                \n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                takeCharBetween\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                takeCharWhile\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                testChar\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                upperCaseLetter\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                upperCaseLetters\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                whitespace\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                withPosition\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/input.ts\n            \n            \n                interface\n            \n            \n                TextInput\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                anyArrayValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                anyValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                arrayValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                booleanValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                decodeValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                failureToString\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                finiteNumberValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                integerValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                isToken\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                literalValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                make\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                nullableValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                nullValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                numberValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                objectValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                optionalValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                pathToString\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                safeIntegerValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                stringValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                testObject\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                testType\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                testValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                tupleValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                undefineableValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                undefinedValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/input.ts\n            \n            \n                interface\n            \n            \n                ValueInput\n            \n            \n                100 %\n                (3/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Entity   (src/.../entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/error/entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Entity\n                    \n                \n                    \n                        \n                            Enumeration that tries to capture different kind of entities that are\nnormally found has decoder inputs.\n\n                        \n                    \n                        \n                            \n                                 CHARACTER\n                            \n                        \n                        \n                            \n                                 PREDICATE\n                            \n                        \n                        \n                            \n                                 LETTER\n                            \n                        \n                        \n                            \n                                 UPPERCASE_LETTER\n                            \n                        \n                        \n                            \n                                 LOWER_CASE_LETTER\n                            \n                        \n                        \n                            \n                                 DIGIT\n                            \n                        \n                        \n                            \n                                 WHITESPACE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nParTSing\nParTSing is a decoder combinator library. You can use it to build parsers/decoders from string or really any input values.\nIf you want full control over what to decode your should start from partsing/core/decoder. It provides 3 types parameters\n\nIn for the input. Remember that you will need to decode one portion of your input at the time and your input probably needs to track somehow the current position.\nOut it's the type of the value if successfully decoded.\nErr it's the type of the failure returned when the parser fails.\n\nThe library provides two additional set of utility functions to decode string values (partsing/text) and native JS values (partsing/value).\nDecoder Error\nIf you adopt the generic Decoder directly, you can define the shape of your error. The library provides a DecoderError type that should fit most decoding needs. The type of errors available are defined in partsing/error.\nDecoderError provides a simple method to debug the result of the decoding (toString) but still leaves the flexibility to give granular control on the representation of the error.\nBoth [Text Decoding] and [Value Decoding] use DecodeError.\nText Decoding\nTo be able to keep track of the position of the decoding within a string, Text Decoding uses TextInput to track both the entire text input and the current index.\nThe decodeText function simplifies the inputs and outputs of decoding text. It takes a text decoder (Decoder) and return a function that takes a string input and returns a DecodeResult (where input and error are of type string).\nIf you intend to write your own regular expressions decoder functions, consider using the y (sticky) flag. When used, there is no need to reallocate slices of the input string saving memory and CPU cycles. The sticky flag is not available for all implementations of JS.\nValue Decoding\nTo be able to keep track of the position of the decoding within any value, Value Decoding uses ValueInput to track both the input value and the current position within it using a path. path is an array of either string (object field name) or number (array/tuple index position).\nThe decodeValue function simplifies the inputs and outputs of decoding values. It takes a value decoder (Decoder) and return a function that takes any and returns a DecodeResult (where input is of type any and error is of type string).\nExample\nA simple decoder combinator to parse color values from strings into class instances.\nclass RGB {\n  constructor(readonly rgb: number) {}\n}\n\nclass Grey {\n  constructor(readonly value: number) {}\n}\n\nclass HSL {\n  constructor(readonly hue: number, readonly saturation: number, readonly lightness: number) {}\n}\n\ntype Color = RGB | Grey | HSL\n\nconst ratioDecoder = regexp(/0[.]\\d+/y).map(Number)\nconst rgbDecoder   = regexp(/[#]([0-9a-f]{6})/iy, 1)\n                       .map(v => parseInt(v, 16))\n                       .map(v => new RGB(v))\nconst greyDecoder  = matchInsensitive('grey').or(DecodeError.combine, matchInsensitive('gray'))\n                       .skipNext(optionalWhitespace)\n                       .pickNext(ratioDecoder)\n                       .map(v => new Grey(v))\nconst hslDecoder   = matchInsensitive('hsl(')\n                       .pickNext(\n                         ratioDecoder\n                           .separatedByTimes(match(','), 3)\n                           .map(v => new HSL(v[0], v[1], v[2]))\n                       )\n                       .skipNext(match(')'))\n\nconst colorTextDecoder = decodeText(\n    oneOf(\n      DecodeError.combine,\n      rgbDecoder,\n      greyDecoder,\n      hslDecoder\n    ).skipNext(eoi) // make sure that there is nothing left to decode\n  )\n\n// all results are wrapped in a DecodeSuccess\n// colorTextDecoder('#003355')          == new RGB(0x003355)\n// colorTextDecoder('gray 0.3')         == new Grey(0.3)\n// colorTextDecoder('gray0.2')          == new Grey(0.2)\n// colorTextDecoder('HSL(0.1,0.2,0.3)') == new HSL(0.1,0.2,0.3)Another scenario where decoding comes in handy is to validate, type and transform payloads from JSON requests. You can decode a value (after being parsed by JSON.parse) into one of the Color types described above.\nA few examples of valid JSON payloads:\n\"#003366\"{ \"grey\": 0.5 }{ \"kind\": \"hsl\", \"h\": 0.2, \"s\": 0.5, \"l\": 0.8 }Here is a colorValueDecoder definition that can deal with those cases:\nconst ratioValue = numberValue.test(v => v >= 0 && v  ({ input, index: 0 }), v => v)\n\n// example: { \"grey\": 0.5 }\nconst greyValue = objectValue(\n    { grey: ratioValue },\n    [] // the empty array means that no fields are optional\n  ).map(v => new Grey(v.grey))\n\n// example: { \"kind\": \"hsl\", \"h\": 0.2, \"s\": 0.5, \"l\": 0.8 }\nconst hslValue = objectValue(\n    {\n      kind: literalValue('hsl'),\n      h: ratioValue,\n      s: ratioValue,\n      l: ratioValue\n    },\n    []\n  ).map(v => new HSL(v.h, v.s, v.l))\n\nconst colorValueDecoder = decodeValue(\n    oneOf(\n      DecodeError.combine,\n      rgbValue,\n      greyValue,\n      hslValue\n    )\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\n                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.You may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nAPPENDIX: How to apply the Apache License to your work.\nTo apply the Apache License to your work, attach the following\nboilerplate notice, with the fields enclosed by brackets \"[]\"\nreplaced with your own identifying information. (Don't include\nthe brackets!)  The text should be enclosed in the appropriate\ncomment syntax for the file format. We also recommend that a\nfile or class name and description of purpose be included on the\nsame \"printed page\" as the copyright notice for easier\nidentification within third-party archives.\nCopyright [yyyy] [name of copyright owner]\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    16 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DecodeError   (src/.../index.ts)\n                        \n                        \n                            DecodeResult   (src/.../result.ts)\n                        \n                        \n                            Decoding   (src/.../decoder.ts)\n                        \n                        \n                            Error   (src/.../type_level.ts)\n                        \n                        \n                            Input   (src/.../type_level.ts)\n                        \n                        \n                            MarkOptionalFields   (src/.../type_level.ts)\n                        \n                        \n                            Output   (src/.../type_level.ts)\n                        \n                        \n                            TextDecoder   (src/.../index.ts)\n                        \n                        \n                            TupleToUnion   (src/.../type_level.ts)\n                        \n                        \n                            ValueDecoder   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/error/index.ts\n    \n        \n            \n                \n                    \n                        \n                        DecodeError\n                    \n                \n                    \n                        \n                            Union type of all possible decoding errors.\n\n                        \n                    \n                \n                    \n                        DecodeError:     CustomError | ExpectedAnyOf | ExpectedAtLeast | ExpectedEoi | ExpectedField | ExpectedMatch | ExpectedNoneOf | ExpectedOnce | CombineErrors | ExpectedWithinRange | PatternMismatch | UnexpectedEoi\n\n                    \n                \n            \n        \n\n    src/core/result.ts\n    \n        \n            \n                \n                    \n                        \n                        DecodeResult\n                    \n                \n                    \n                        \n                            DecodeResult it's an either type, aunion type of two possible constructors.\nIt can either be:\n\nDecodeSuccess: a decoder was able to successfully decode a value\nDecodeFailure: a decoder failed to decode a value\n\nA DecodeResult brings three type parameters like in Decoder:\n\nIn: The input stream for a decoder.\nOut: The expected result from a decoder.\nErr: The type that contains information on why a decoder failed.\n\n\n                        \n                    \n                \n                    \n                        DecodeResult:     DecodeSuccess | DecodeFailure\n\n                    \n                \n            \n        \n\n    src/core/decoder.ts\n    \n        \n            \n                \n                    \n                        \n                        Decoding\n                    \n                \n                    \n                        \n                            Type signature for a function that takes an input and decodes it into a\nresult object.\n\n                        \n                    \n                \n                    \n                        Decoding:     function\n\n                    \n                \n            \n        \n\n    src/core/type_level.ts\n    \n        \n            \n                \n                    \n                        \n                        Error\n                    \n                \n                    \n                        \n                            Extracts the Err type from a Decoder type.\n\n                        \n                    \n                \n                    \n                        Error:     \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        Input\n                    \n                \n                    \n                        \n                            Extracts the Int type from a Decoder type.\n\n                        \n                    \n                \n                    \n                        Input:     \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        MarkOptionalFields\n                    \n                \n                    \n                        \n                            Given a type for an object T and an array U of field names from U,\nreturn a new object type with the specified fields U marked as optional.\n\n                        \n                    \n                \n                    \n                        MarkOptionalFields:     \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        Output\n                    \n                \n                    \n                        \n                            Extracts the Out type from a Decoder type.\n\n                        \n                    \n                \n                    \n                        Output:     \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        TupleToUnion\n                    \n                \n                    \n                        \n                            This module contains type-level functions for compile-time usage.\n\n                        \n                    \n                \n                    \n                        TupleToUnion:      | never\n\n                    \n                \n            \n        \n\n    src/text/index.ts\n    \n        \n            \n                \n                    \n                        \n                        TextDecoder\n                    \n                \n                    \n                        \n                            Type alias for a decoder specialized in consuming values of type TextInput\nand generate errors of type DecodeError.\n\n                        \n                    \n                \n                    \n                        TextDecoder:     Decoder\n\n                    \n                \n            \n        \n\n    src/value/index.ts\n    \n        \n            \n                \n                    \n                        \n                        ValueDecoder\n                    \n                \n                    \n                        \n                            Type alias for a decoder specialized in consuming values of type ValueInput\nand generate errors of type DecodeError.\n\n                        \n                    \n                \n                    \n                        ValueDecoder:     Decoder\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
