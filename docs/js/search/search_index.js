var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/CombineErrors.html",[0,0.201,1,1.744]],["body/classes/CombineErrors.html",[0,0.305,1,2.641,2,0.538,3,0.388,4,0.32,5,2.781,6,0.255,7,0.69,8,0.653,9,0.803,10,0.795,11,0.926,12,0.905,13,3.409,14,3.076,15,0.762,16,4.374,17,0.802,18,0.044,19,0.62,20,0.388,21,0.707,22,2.864,23,0.802,24,0.538,25,3.353,26,3.409,27,0.69,28,0.591,29,1.606,30,0.538,31,0.905,32,2.058,33,3.409,34,4.374,35,3.409,36,2.367,37,3.409,38,1.016,39,2.058,40,3.409,41,0.033,42,0.033]],["title/classes/CustomError.html",[0,0.201,43,1.744]],["body/classes/CustomError.html",[0,0.313,2,0.561,3,0.406,4,0.334,6,0.267,7,0.709,8,0.666,9,0.816,10,0.817,11,0.941,12,0.945,15,0.777,17,0.838,18,0.043,19,0.647,20,0.512,21,0.739,22,2.751,23,0.838,24,0.561,27,0.709,28,0.7,30,0.561,31,0.945,41,0.034,42,0.034,43,2.715,44,2.904,45,2.472,46,3.56,47,5.177,48,4.928,49,3.56,50,4.496,51,3.56,52,3.56]],["title/classes/DecodeResultBase.html",[0,0.201,53,2.006]],["body/classes/DecodeResultBase.html",[0,0.22,2,0.203,3,0.147,4,0.121,6,0.096,7,0.335,8,0.64,9,0.335,10,0.387,11,0.683,12,0.564,15,0.77,17,1.115,18,0.045,19,0.723,20,0.585,21,0.825,24,0.203,27,0.858,28,0.426,30,0.55,31,0.342,32,1.284,36,1.477,41,0.024,42,0.024,45,0.894,53,2.19,54,0.894,55,3.767,56,1.051,57,1.051,58,1.051,59,2.749,60,3.162,61,3.154,62,3.154,63,3.154,64,5.496,65,2.127,66,2.127,67,3.759,68,3.759,69,3.759,70,3.759,71,2.127,72,2.127,73,2.127,74,2.716,75,2.127,76,1.323,77,3.472,78,1.288,79,3.019,80,1.288,81,3.154,82,4.945,83,3.491,84,1.288,85,3.491,86,3.977,87,2.424,88,3.154,89,1.288,90,3.491,91,1.288,92,1.288,93,1.288,94,1.288,95,3.154,96,1.288,97,3.154,98,1.288,99,3.154,100,1.288,101,3.154,102,3.154,103,2.127,104,1.288,105,4.651,106,1.288,107,3.244,108,2.681,109,2.127,110,1.284,111,2.127,112,1.288,113,1.288,114,1.288,115,2.472,116,2.716,117,1.288,118,2.573,119,1.288,120,2.127,121,2.127,122,2.127,123,2.127,124,2.127,125,1.288,126,0.894,127,1.288,128,2.716,129,3.154,130,1.288,131,1.288,132,1.288,133,1.288,134,1.288,135,1.288]],["title/classes/ExpectedAnyOf.html",[0,0.201,136,1.744]],["body/classes/ExpectedAnyOf.html",[0,0.247,2,0.558,3,0.403,4,0.332,6,0.265,7,0.706,8,0.605,9,0.775,10,0.814,11,0.893,12,0.939,15,0.775,17,0.832,18,0.044,19,0.643,20,0.403,21,0.734,23,0.832,24,0.814,27,0.706,28,0.698,29,1.667,30,0.558,32,2.704,38,1.055,41,0.034,42,0.034,136,2.136,137,2.886,138,2.457,139,2.51,140,4.478,141,3.538,142,1.88,143,2.457,144,4.914,145,3.538,146,2.457]],["title/classes/ExpectedAtLeast.html",[0,0.201,147,1.744]],["body/classes/ExpectedAtLeast.html",[0,0.309,2,0.549,3,0.397,4,0.327,6,0.261,7,0.699,8,0.694,9,0.81,10,0.806,11,0.933,12,0.924,15,0.769,17,0.819,18,0.044,19,0.633,20,0.397,21,0.723,23,0.819,24,0.549,27,0.699,28,0.471,29,1.641,30,0.549,31,0.924,38,1.531,41,0.034,42,0.034,139,2.627,142,1.851,147,2.677,148,2.841,149,2.841,150,2.945,151,4.434,152,3.617,153,3.483,154,3.617,155,2.419]],["title/classes/ExpectedEoi.html",[0,0.201,156,1.744]],["body/classes/ExpectedEoi.html",[0,0.326,2,0.599,3,0.433,4,0.357,6,0.285,7,0.739,8,0.686,9,0.836,10,0.851,11,0.963,15,0.739,18,0.043,23,0.894,24,0.599,27,0.739,28,0.514,30,0.599,38,1.58,41,0.036,42,0.036,76,1.595,156,2.828,157,3.101,158,5.077,159,3.802,160,3.802,161,2.64]],["title/classes/ExpectedField.html",[0,0.201,162,1.744]],["body/classes/ExpectedField.html",[0,0.316,2,0.569,3,0.411,4,0.339,6,0.27,7,0.715,8,0.67,9,0.82,10,0.824,11,0.945,12,0.957,15,0.782,17,0.848,18,0.044,19,0.655,20,0.411,21,0.748,23,0.848,24,0.569,27,0.715,28,0.703,30,0.569,31,0.957,38,1.551,41,0.034,42,0.034,162,2.737,163,2.942,164,3.606,165,4.533,166,3.302,167,3.606,168,3.606]],["title/classes/ExpectedMatch.html",[0,0.201,169,1.744]],["body/classes/ExpectedMatch.html",[0,0.316,2,0.57,3,0.412,4,0.34,6,0.271,7,0.716,8,0.671,9,0.821,10,0.825,11,0.946,12,0.96,15,0.783,17,0.851,18,0.044,19,0.658,20,0.412,21,0.751,23,0.851,24,0.783,27,0.716,28,0.704,30,0.57,31,0.96,38,1.552,41,0.034,42,0.041,118,2.951,169,2.742,170,2.951,171,3.618,172,4.542,173,3.618]],["title/classes/ExpectedNoneOf.html",[0,0.201,174,1.744]],["body/classes/ExpectedNoneOf.html",[0,0.304,2,0.536,3,0.387,4,0.319,6,0.255,7,0.688,8,0.688,9,0.802,10,0.793,11,0.925,12,0.902,15,0.76,17,0.8,18,0.044,19,0.618,20,0.387,21,0.705,22,2.562,23,0.8,24,0.802,27,0.688,28,0.688,29,2.057,30,0.536,31,0.902,38,1.013,41,0.033,42,0.033,138,2.36,139,2.581,142,1.806,143,2.36,155,2.36,174,2.635,175,2.772,176,4.365,177,3.934,178,3.399,179,3.399,180,2.052,181,3.399]],["title/classes/ExpectedOnce.html",[0,0.201,182,1.744]],["body/classes/ExpectedOnce.html",[0,0.312,2,0.558,3,0.403,4,0.332,6,0.265,7,0.706,8,0.664,9,0.814,10,0.814,11,0.939,12,0.939,15,0.775,17,0.832,18,0.044,19,0.643,20,0.403,21,0.734,23,0.832,24,0.558,27,0.706,28,0.478,29,1.667,30,0.558,31,0.939,38,1.54,41,0.034,42,0.034,138,2.457,139,2.604,142,1.88,155,2.457,180,2.136,182,2.704,183,2.886,184,4.478,185,4.008,186,3.538]],["title/classes/ExpectedWithinRange.html",[0,0.201,187,1.744]],["body/classes/ExpectedWithinRange.html",[0,0.309,2,0.549,3,0.397,4,0.327,6,0.261,7,0.699,8,0.694,9,0.81,10,0.806,11,0.933,12,0.924,15,0.769,17,0.819,18,0.043,19,0.633,20,0.397,21,0.723,23,0.819,24,0.549,27,0.699,28,0.744,30,0.549,31,0.924,38,1.531,41,0.034,42,0.034,149,2.841,152,3.617,154,2.841,187,2.677,188,2.841,189,4.878,190,4.434,191,3.387,192,4.878,193,3.483,194,3.483,195,3.483]],["title/classes/PatternMismatch.html",[0,0.201,196,1.744]],["body/classes/PatternMismatch.html",[0,0.315,2,0.567,3,0.409,4,0.337,6,0.269,7,0.713,8,0.669,9,0.819,10,0.822,11,0.944,12,0.954,15,0.781,17,0.846,18,0.044,19,0.653,20,0.409,21,0.746,23,0.846,24,0.567,27,0.713,28,0.702,30,0.567,31,0.954,38,1.072,41,0.034,42,0.038,196,2.731,197,2.932,198,3.595,199,4.523,200,5.465,201,4.95,202,3.595,203,3.595]],["title/interfaces/TextInput.html",[204,1.212,205,1.744]],["body/interfaces/TextInput.html",[2,0.634,3,0.458,4,0.377,6,0.414,7,0.764,8,0.655,18,0.043,20,0.552,28,0.703,30,0.634,41,0.037,42,0.037,76,2.266,150,3.141,204,2.033,205,2.926,206,3.279]],["title/classes/UnexpectedEoi.html",[0,0.201,207,1.744]],["body/classes/UnexpectedEoi.html",[0,0.326,2,0.599,3,0.433,4,0.357,6,0.285,7,0.739,8,0.686,9,0.836,10,0.851,11,0.963,15,0.739,18,0.043,23,0.894,24,0.599,27,0.739,28,0.514,30,0.599,41,0.036,42,0.036,76,1.595,161,2.64,207,2.828,208,3.101,209,5.299,210,4.141,211,3.802,212,3.802]],["title/interfaces/ValueInput.html",[204,1.212,213,1.744]],["body/interfaces/ValueInput.html",[2,0.627,3,0.453,4,0.373,6,0.298,7,0.759,8,0.651,18,0.044,20,0.548,28,0.7,30,0.627,41,0.037,42,0.037,76,2.258,150,3.126,204,2.02,213,2.907,214,3.244,215,4.39]],["title/contributing.html",[216,1.682,217,1.463,218,1.682]],["body/contributing.html",[3,0.381,4,0.314,18,0.033,39,2.61,41,0.033,42,0.033,115,1.779,185,2.731,218,3.638,219,3.348,220,3.348,221,2.731,222,3.348,223,5.365,224,2.731,225,3.348,226,4.788,227,3.906,228,3.527,229,3.527,230,3.002,231,3.906,232,3.348,233,3.348,234,2.731,235,2.731,236,3.348,237,2.325,238,2.731,239,3.325,240,2.731,241,2.731,242,3.348,243,2.731,244,3.348,245,2.731,246,2.731,247,3.348,248,2.325,249,3.527,250,3.348,251,3.348,252,3.348,253,2.731,254,2.731,255,2.731,256,2.731,257,3.348,258,2.731,259,4.323,260,3.527,261,2.731,262,3.348,263,2.731,264,4.323,265,4.323,266,3.527,267,2.731,268,3.348,269,3.348,270,2.731,271,2.731,272,3.527,273,3.348,274,3.348]],["title/coverage.html",[275,3.198]],["body/coverage.html",[0,0.359,1,0.932,4,0.145,5,1.259,14,0.932,18,0.045,20,0.176,41,0.019,42,0.023,43,0.932,44,1.259,53,1.071,54,2.663,59,0.932,60,1.071,107,1.259,108,0.932,110,0.932,115,0.82,126,1.071,136,0.932,137,2.009,142,0.82,143,1.071,146,4.066,147,0.932,148,1.259,156,0.932,157,1.259,162,0.932,163,1.259,169,0.932,170,1.259,174,0.932,175,1.259,177,1.259,182,0.932,183,1.259,187,0.932,188,1.259,196,0.932,197,1.259,204,1.033,205,0.932,206,1.259,207,0.932,208,1.259,210,1.259,213,0.932,214,1.259,275,1.259,276,1.259,277,1.259,278,1.259,279,3.335,280,1.543,281,1.543,282,5.818,283,3.835,284,3.835,285,1.543,286,1.259,287,1.543,288,1.543,289,2.463,290,1.543,291,1.543,292,5.794,293,4.593,294,1.543,295,1.543,296,1.259,297,3.509,298,1.259,299,4.468,300,1.259,301,2.009,302,2.463,303,2.009,304,2.463,305,1.71,306,1.543,307,1.543,308,1.543,309,1.543,310,1.543,311,1.543,312,1.543,313,1.543,314,1.543,315,2.463,316,1.259,317,1.543,318,4.45,319,1.543,320,1.543,321,1.543,322,1.543,323,1.259,324,1.543,325,1.543,326,1.543,327,1.543,328,1.543,329,1.543,330,1.543,331,1.259,332,1.543,333,1.543,334,1.543,335,1.543,336,1.543,337,1.543,338,1.543,339,1.543,340,1.543,341,1.543,342,1.543,343,1.543]],["title/miscellaneous/enumerations.html",[344,1.463,345,2.829]],["body/miscellaneous/enumerations.html",[6,0.298,18,0.044,24,0.894,41,0.037,42,0.037,139,2.268,296,3.244,301,3.928,303,4.39,316,3.928,344,2.401,345,3.244,346,3.977,347,3.928,348,4.815,349,3.977,350,3.977,351,3.977,352,3.977]],["title/index.html",[6,0.181,216,1.682,217,1.463]],["body/index.html",[0,0.242,6,0.227,8,0.328,9,0.479,10,0.275,11,0.275,14,0.915,15,0.383,17,0.357,18,0.044,19,0.275,20,0.545,21,0.315,22,2.155,24,0.791,25,1.686,27,0.599,28,0.617,31,0.806,32,2.757,36,2.109,39,1.466,41,0.026,42,0.018,55,1.686,57,1.237,59,0.915,76,2.076,77,1.053,79,0.915,87,2.816,108,0.915,110,3.324,115,2.426,126,1.053,146,1.686,150,2.449,166,1.466,180,0.915,191,2.109,205,0.915,213,0.915,215,1.981,217,0.915,224,1.237,227,2.834,237,1.053,239,2.958,243,1.237,246,2.478,248,1.053,255,1.237,266,1.237,286,1.981,300,1.981,305,1.053,323,1.981,331,1.981,353,2.428,354,3.038,355,1.516,356,1.516,357,1.516,358,1.516,359,1.516,360,1.981,361,1.516,362,2.834,363,2.428,364,1.516,365,1.516,366,1.237,367,3.101,368,1.516,369,3.801,370,2.428,371,1.516,372,1.516,373,1.237,374,1.516,375,1.516,376,1.516,377,1.516,378,2.428,379,1.516,380,1.516,381,1.516,382,1.516,383,2.428,384,1.237,385,1.981,386,1.516,387,2.428,388,1.516,389,1.516,390,1.516,391,1.516,392,1.516,393,1.516,394,3.038,395,3.308,396,2.428,397,1.516,398,2.428,399,1.981,400,2.834,401,1.516,402,1.237,403,1.516,404,1.237,405,1.516,406,1.516,407,2.428,408,2.428,409,1.516,410,1.516,411,1.516,412,1.516,413,1.516,414,1.516,415,1.516,416,1.981,417,1.053,418,1.516,419,2.834,420,2.428,421,3.038,422,1.516,423,3.038,424,3.801,425,3.474,426,1.516,427,1.516,428,1.516,429,2.428,430,1.516,431,2.428,432,1.516,433,1.516,434,1.516,435,4.056,436,1.516,437,1.237,438,1.516,439,2.428,440,1.516,441,1.516,442,1.516,443,1.516,444,1.516,445,2.428,446,1.516,447,1.516,448,1.516,449,1.516,450,1.516,451,1.516,452,1.516,453,1.516,454,2.428,455,1.516,456,1.516,457,1.237,458,1.516,459,1.516,460,1.516,461,1.516,462,1.516,463,1.516,464,1.516,465,1.516,466,1.516,467,1.516,468,1.516,469,1.516,470,1.516,471,1.516,472,2.428,473,1.237,474,2.428,475,2.428,476,1.516,477,1.516,478,1.237,479,1.237,480,1.516,481,3.474,482,3.038,483,2.428,484,3.038,485,2.428,486,1.516,487,2.428,488,1.237,489,1.516,490,1.237,491,1.516,492,3.801,493,1.516,494,3.474,495,2.428,496,1.516,497,1.237,498,1.516,499,2.428,500,1.516,501,1.516,502,1.516,503,1.516,504,1.516]],["title/license.html",[216,1.682,217,1.463,230,1.682]],["body/license.html",[0,0.068,3,0.485,4,0.399,9,0.267,15,0.155,18,0.017,19,0.543,20,0.112,25,0.682,29,0.463,39,0.593,41,0.02,42,0.013,45,0.682,56,0.801,58,0.801,79,0.593,108,0.593,139,1.95,161,0.682,166,0.593,180,0.593,191,2.565,204,0.412,218,2.565,221,2.161,228,1.818,229,3.271,230,3.7,231,0.801,234,0.801,235,3.552,237,0.682,238,2.161,239,2.874,240,1.818,241,2.161,245,0.801,248,1.175,249,2.437,253,0.801,254,0.801,256,0.801,258,1.818,260,0.801,261,3.693,263,2.161,267,2.853,270,0.801,271,1.38,272,1.818,276,2.161,277,0.801,278,0.801,305,1.175,347,0.801,360,2.437,362,3.013,367,0.801,373,2.663,384,0.801,385,0.801,395,2.161,402,2.161,404,1.38,417,2.267,419,0.801,457,0.801,473,0.801,478,0.801,479,0.801,488,1.818,490,1.818,497,3.47,505,2.649,506,2.229,507,2.229,508,0.982,509,0.982,510,0.982,511,3.863,512,4.355,513,2.649,514,4.355,515,4.527,516,1.692,517,0.982,518,0.982,519,4.01,520,3.265,521,1.692,522,3.694,523,2.987,524,2.229,525,3.863,526,0.982,527,0.982,528,2.649,529,1.692,530,1.692,531,1.692,532,4.73,533,2.649,534,1.692,535,3.265,536,0.982,537,1.692,538,0.982,539,0.982,540,0.982,541,0.982,542,0.982,543,0.982,544,0.982,545,2.229,546,1.692,547,4.355,548,0.982,549,3.265,550,3.497,551,1.692,552,0.982,553,0.982,554,0.982,555,0.801,556,0.982,557,0.982,558,5.554,559,2.229,560,1.692,561,0.982,562,4.669,563,1.692,564,1.692,565,0.982,566,4.787,567,0.982,568,0.982,569,0.982,570,0.982,571,0.982,572,1.692,573,1.692,574,2.229,575,0.982,576,1.692,577,0.982,578,0.982,579,0.982,580,2.649,581,1.692,582,1.692,583,2.987,584,1.692,585,0.982,586,0.982,587,0.982,588,0.982,589,0.982,590,1.692,591,0.982,592,0.982,593,0.982,594,2.229,595,0.982,596,1.38,597,0.982,598,0.982,599,0.982,600,1.692,601,1.692,602,2.649,603,1.692,604,1.692,605,1.692,606,2.229,607,1.692,608,2.229,609,1.692,610,1.692,611,1.692,612,2.229,613,0.982,614,1.692,615,1.692,616,0.982,617,0.982,618,3.497,619,2.229,620,2.649,621,1.692,622,1.692,623,0.982,624,2.229,625,2.229,626,0.982,627,2.229,628,2.229,629,0.982,630,0.982,631,1.692,632,1.692,633,0.982,634,0.982,635,0.982,636,0.982,637,0.982,638,0.982,639,0.982,640,0.982,641,2.649,642,0.982,643,2.987,644,0.982,645,0.982,646,0.982,647,2.649,648,0.982,649,0.982,650,0.982,651,0.982,652,2.229,653,2.649,654,1.692,655,0.982,656,0.982,657,0.801,658,0.982,659,0.982,660,0.982,661,1.692,662,1.692,663,0.982,664,0.982,665,1.692,666,1.692,667,0.982,668,0.982,669,0.982,670,0.982,671,0.982,672,2.649,673,0.982,674,0.982,675,0.982,676,0.982,677,0.982,678,0.982,679,0.982,680,0.982,681,0.982,682,1.692,683,0.982,684,0.982,685,3.497,686,2.229,687,2.229,688,2.649,689,1.692,690,1.692,691,0.982,692,0.982,693,0.982,694,1.692,695,1.692,696,0.982,697,1.692,698,0.982,699,0.982,700,0.982,701,2.987,702,0.982,703,0.982,704,0.982,705,1.692,706,0.982,707,0.982,708,0.982,709,2.987,710,0.982,711,0.982,712,0.982,713,0.982,714,0.982,715,1.692,716,0.982,717,0.982,718,0.982,719,0.982,720,0.982,721,0.982,722,0.982,723,0.982,724,0.982,725,0.982,726,1.692,727,0.982,728,0.982,729,0.982,730,0.982,731,0.982,732,0.982,733,0.982,734,0.982,735,0.982,736,0.982,737,1.692,738,1.692,739,0.982,740,0.982,741,0.982,742,0.982,743,0.982,744,0.982,745,0.982,746,0.982,747,0.982,748,0.982,749,0.982,750,0.982,751,0.982,752,0.982,753,0.982,754,0.982,755,0.982,756,0.982]],["title/modules.html",[757,2.722]],["body/modules.html",[18,0.04,41,0.04,42,0.04,757,3.166]],["title/overview.html",[758,3.198]],["body/overview.html",[0,0.313,18,0.039,41,0.039,42,0.039,204,1.882,437,3.659,758,3.659,759,4.486]],["title/miscellaneous/typealiases.html",[344,1.463,760,3.468]],["body/miscellaneous/typealiases.html",[1,1.806,6,0.224,14,2.735,18,0.043,19,0.544,20,0.635,21,0.621,22,2.407,27,0.472,41,0.034,42,0.03,43,1.806,54,2.077,55,3.146,59,1.806,60,2.077,76,2.031,77,2.077,79,1.806,87,3.146,110,3.301,115,1.589,136,1.806,147,1.806,156,1.806,162,1.806,166,2.423,169,1.806,174,1.806,182,1.806,187,1.806,196,1.806,207,1.806,279,2.44,298,2.44,299,2.44,318,2.44,344,1.806,366,2.44,399,3.695,400,2.44,416,2.44,417,3.146,555,2.44,596,2.44,657,2.44,757,2.077,761,2.991,762,4.53,763,2.991,764,2.991,765,5.05,766,4.53,767,4.53,768,4.53,769,4.53,770,2.991,771,2.991,772,4.53,773,2.991,774,2.991,775,2.991,776,4.53,777,2.991,778,2.991,779,2.991,780,2.991]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":146,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"coverage.html":{},"index.html":{}}}],["0.2",{"_index":483,"title":{},"body":{"index.html":{}}}],["0.3",{"_index":463,"title":{},"body":{"index.html":{}}}],["0.5",{"_index":481,"title":{},"body":{"index.html":{}}}],["0.8",{"_index":485,"title":{},"body":{"index.html":{}}}],["0/1",{"_index":292,"title":{},"body":{"coverage.html":{}}}],["0/28",{"_index":289,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":297,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":293,"title":{},"body":{"coverage.html":{}}}],["003366",{"_index":480,"title":{},"body":{"index.html":{}}}],["1",{"_index":180,"title":{},"body":{"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"index.html":{},"license.html":{}}}],["1/1",{"_index":284,"title":{},"body":{"coverage.html":{}}}],["1/16",{"_index":291,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":295,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":283,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":437,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2",{"_index":759,"title":{},"body":{"overview.html":{}}}],["2.0",{"_index":507,"title":{},"body":{"license.html":{}}}],["2004",{"_index":509,"title":{},"body":{"license.html":{}}}],["23/26",{"_index":281,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":294,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":363,"title":{},"body":{"index.html":{}}}],["50",{"_index":540,"title":{},"body":{"license.html":{}}}],["6",{"_index":290,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":280,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":518,"title":{},"body":{"license.html":{}}}],["9a",{"_index":433,"title":{},"body":{"index.html":{}}}],["_e",{"_index":61,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["_i",{"_index":62,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["_o",{"_index":63,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["abov",{"_index":479,"title":{},"body":{"index.html":{},"license.html":{}}}],["abstract",{"_index":64,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["accept",{"_index":221,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["accompani",{"_index":232,"title":{},"body":{"contributing.html":{}}}],["act",{"_index":524,"title":{},"body":{"license.html":{}}}],["add",{"_index":666,"title":{},"body":{"license.html":{}}}],["addendum",{"_index":668,"title":{},"body":{"license.html":{}}}],["addit",{"_index":373,"title":{},"body":{"index.html":{},"license.html":{}}}],["adopt",{"_index":380,"title":{},"body":{"index.html":{}}}],["advis",{"_index":721,"title":{},"body":{"license.html":{}}}],["again",{"_index":257,"title":{},"body":{"contributing.html":{}}}],["against",{"_index":632,"title":{},"body":{"license.html":{}}}],["agre",{"_index":688,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":231,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["alias",{"_index":761,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alleg",{"_index":636,"title":{},"body":{"license.html":{}}}],["allow",{"_index":46,"title":{},"body":{"classes/CustomError.html":{}}}],["alon",{"_index":629,"title":{},"body":{"license.html":{}}}],["along",{"_index":659,"title":{},"body":{"license.html":{}}}],["alongsid",{"_index":667,"title":{},"body":{"license.html":{}}}],["alreadi",{"_index":252,"title":{},"body":{"contributing.html":{}}}],["and(b",{"_index":646,"title":{},"body":{"license.html":{}}}],["and(c",{"_index":651,"title":{},"body":{"license.html":{}}}],["and(d",{"_index":655,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":727,"title":{},"body":{"license.html":{}}}],["annot",{"_index":570,"title":{},"body":{"license.html":{}}}],["anyarrayvalu",{"_index":319,"title":{},"body":{"coverage.html":{}}}],["anyvalu",{"_index":320,"title":{},"body":{"coverage.html":{}}}],["apach",{"_index":505,"title":{},"body":{"license.html":{}}}],["appear",{"_index":664,"title":{},"body":{"license.html":{}}}],["appendix",{"_index":564,"title":{},"body":{"license.html":{}}}],["appli",{"_index":624,"title":{},"body":{"license.html":{}}}],["applic",{"_index":686,"title":{},"body":{"license.html":{}}}],["appropri",{"_index":697,"title":{},"body":{"license.html":{}}}],["archiv",{"_index":749,"title":{},"body":{"license.html":{}}}],["aris",{"_index":713,"title":{},"body":{"license.html":{}}}],["array",{"_index":416,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["array/tupl",{"_index":418,"title":{},"body":{"index.html":{}}}],["arrayvalu",{"_index":321,"title":{},"body":{"coverage.html":{}}}],["assert",{"_index":735,"title":{},"body":{"license.html":{}}}],["associ",{"_index":700,"title":{},"body":{"license.html":{}}}],["assum",{"_index":698,"title":{},"body":{"license.html":{}}}],["attach",{"_index":563,"title":{},"body":{"license.html":{}}}],["attribut",{"_index":653,"title":{},"body":{"license.html":{}}}],["author",{"_index":521,"title":{},"body":{"license.html":{}}}],["authorship",{"_index":559,"title":{},"body":{"license.html":{}}}],["avail",{"_index":385,"title":{},"body":{"index.html":{},"license.html":{}}}],["base",{"_index":567,"title":{},"body":{"license.html":{}}}],["basi",{"_index":689,"title":{},"body":{"license.html":{}}}],["be",{"_index":476,"title":{},"body":{"index.html":{}}}],["behalf",{"_index":583,"title":{},"body":{"license.html":{}}}],["below",{"_index":565,"title":{},"body":{"license.html":{}}}],["benefici",{"_index":544,"title":{},"body":{"license.html":{}}}],["between",{"_index":194,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["bind",{"_index":579,"title":{},"body":{"license.html":{}}}],["boilerpl",{"_index":736,"title":{},"body":{"license.html":{}}}],["booleanvalu",{"_index":322,"title":{},"body":{"coverage.html":{}}}],["both",{"_index":394,"title":{},"body":{"index.html":{}}}],["bracket",{"_index":738,"title":{},"body":{"license.html":{}}}],["build",{"_index":355,"title":{},"body":{"index.html":{}}}],["carri",{"_index":648,"title":{},"body":{"license.html":{}}}],["case",{"_index":491,"title":{},"body":{"index.html":{}}}],["caus",{"_index":530,"title":{},"body":{"license.html":{}}}],["chang",{"_index":650,"title":{},"body":{"license.html":{}}}],["char",{"_index":177,"title":{},"body":{"classes/ExpectedNoneOf.html":{},"coverage.html":{}}}],["charact",{"_index":347,"title":{},"body":{"miscellaneous/enumerations.html":{},"license.html":{}}}],["charg",{"_index":608,"title":{},"body":{"license.html":{}}}],["choos",{"_index":722,"title":{},"body":{"license.html":{}}}],["cla",{"_index":250,"title":{},"body":{"contributing.html":{}}}],["claim",{"_index":625,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"coverage.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["code",{"_index":258,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["color",{"_index":421,"title":{},"body":{"index.html":{}}}],["colortextdecod",{"_index":453,"title":{},"body":{"index.html":{}}}],["colortextdecoder('#003355",{"_index":460,"title":{},"body":{"index.html":{}}}],["colortextdecoder('gray",{"_index":462,"title":{},"body":{"index.html":{}}}],["colortextdecoder('gray0.2",{"_index":465,"title":{},"body":{"index.html":{}}}],["colortextdecoder('hsl(0.1,0.2,0.3",{"_index":467,"title":{},"body":{"index.html":{}}}],["colorvaluedecod",{"_index":487,"title":{},"body":{"index.html":{}}}],["combin",{"_index":25,"title":{},"body":{"classes/CombineErrors.html":{},"index.html":{},"license.html":{}}}],["combineerror",{"_index":1,"title":{"classes/CombineErrors.html":{}},"body":{"classes/CombineErrors.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["come",{"_index":470,"title":{},"body":{"index.html":{}}}],["comment",{"_index":740,"title":{},"body":{"license.html":{}}}],["commerci",{"_index":720,"title":{},"body":{"license.html":{}}}],["common",{"_index":526,"title":{},"body":{"license.html":{}}}],["commun",{"_index":272,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["compil",{"_index":555,"title":{},"body":{"license.html":{},"miscellaneous/typealiases.html":{}}}],["compli",{"_index":671,"title":{},"body":{"license.html":{}}}],["complianc",{"_index":751,"title":{},"body":{"license.html":{}}}],["comput",{"_index":718,"title":{},"body":{"license.html":{}}}],["concat",{"_index":143,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedNoneOf.html":{},"coverage.html":{}}}],["concator(this.valu",{"_index":181,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["condit",{"_index":512,"title":{},"body":{"license.html":{}}}],["configur",{"_index":552,"title":{},"body":{"license.html":{}}}],["consequenti",{"_index":712,"title":{},"body":{"license.html":{}}}],["consid",{"_index":405,"title":{},"body":{"index.html":{}}}],["consist",{"_index":729,"title":{},"body":{"license.html":{}}}],["conspicu",{"_index":595,"title":{},"body":{"license.html":{}}}],["const",{"_index":32,"title":{},"body":{"classes/CombineErrors.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"index.html":{}}}],["constitut",{"_index":637,"title":{},"body":{"license.html":{}}}],["constru",{"_index":669,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":12,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{}}}],["constructor(ent",{"_index":138,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{}}}],["constructor(error",{"_index":13,"title":{},"body":{"classes/CombineErrors.html":{}}}],["constructor(field",{"_index":164,"title":{},"body":{"classes/ExpectedField.html":{}}}],["constructor(input",{"_index":74,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["constructor(messag",{"_index":49,"title":{},"body":{"classes/CustomError.html":{}}}],["constructor(min",{"_index":149,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{}}}],["constructor(pattern",{"_index":198,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["constructor(readonli",{"_index":31,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"index.html":{}}}],["constructor(valu",{"_index":171,"title":{},"body":{"classes/ExpectedMatch.html":{}}}],["consult",{"_index":268,"title":{},"body":{"contributing.html":{}}}],["contain",{"_index":657,"title":{},"body":{"license.html":{},"miscellaneous/typealiases.html":{}}}],["content",{"_index":665,"title":{},"body":{"license.html":{}}}],["contract",{"_index":534,"title":{},"body":{"license.html":{}}}],["contribut",{"_index":218,"title":{"contributing.html":{}},"body":{"contributing.html":{},"license.html":{}}}],["contribution(",{"_index":628,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":229,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["contributori",{"_index":638,"title":{},"body":{"license.html":{}}}],["control",{"_index":360,"title":{},"body":{"index.html":{},"license.html":{}}}],["convers",{"_index":556,"title":{},"body":{"license.html":{}}}],["copi",{"_index":641,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":235,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["counterclaim",{"_index":634,"title":{},"body":{"license.html":{}}}],["coverag",{"_index":275,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cpu",{"_index":413,"title":{},"body":{"index.html":{}}}],["cross",{"_index":633,"title":{},"body":{"license.html":{}}}],["current",{"_index":246,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["custom",{"_index":47,"title":{},"body":{"classes/CustomError.html":{}}}],["customari",{"_index":683,"title":{},"body":{"license.html":{}}}],["customerror",{"_index":43,"title":{"classes/CustomError.html":{}},"body":{"classes/CustomError.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["cycl",{"_index":414,"title":{},"body":{"index.html":{}}}],["damag",{"_index":709,"title":{},"body":{"license.html":{}}}],["date",{"_index":640,"title":{},"body":{"license.html":{}}}],["deal",{"_index":489,"title":{},"body":{"index.html":{}}}],["debug",{"_index":388,"title":{},"body":{"index.html":{}}}],["decod",{"_index":110,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["decodeerror",{"_index":14,"title":{},"body":{"classes/CombineErrors.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["decodeerror.combin",{"_index":454,"title":{},"body":{"index.html":{}}}],["decodefailur",{"_index":60,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["decodefailure(f(this.input",{"_index":133,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodefailure(input",{"_index":135,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodefailure(this.input",{"_index":128,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodererror",{"_index":383,"title":{},"body":{"index.html":{}}}],["decoderesult",{"_index":55,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["decoderesultbas",{"_index":53,"title":{"classes/DecodeResultBase.html":{}},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{}}}],["decodesuccess",{"_index":59,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["decodesuccess(f(this.input",{"_index":119,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodesuccess(input",{"_index":134,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodesuccess(this.input",{"_index":116,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodetext",{"_index":300,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["decodevalu",{"_index":323,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["default",{"_index":23,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}}}],["defend",{"_index":731,"title":{},"body":{"license.html":{}}}],["defin",{"_index":15,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{},"license.html":{}}}],["definit",{"_index":488,"title":{},"body":{"index.html":{},"license.html":{}}}],["deliber",{"_index":706,"title":{},"body":{"license.html":{}}}],["deriv",{"_index":566,"title":{},"body":{"license.html":{}}}],["describ",{"_index":478,"title":{},"body":{"index.html":{},"license.html":{}}}],["descript",{"_index":45,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"license.html":{}}}],["design",{"_index":597,"title":{},"body":{"license.html":{}}}],["determin",{"_index":696,"title":{},"body":{"license.html":{}}}],["differ",{"_index":254,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["digit",{"_index":301,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["direct",{"_index":528,"title":{},"body":{"license.html":{}}}],["directli",{"_index":381,"title":{},"body":{"index.html":{}}}],["disclaim",{"_index":684,"title":{},"body":{"license.html":{}}}],["discuss",{"_index":592,"title":{},"body":{"license.html":{}}}],["display",{"_index":615,"title":{},"body":{"license.html":{}}}],["distribut",{"_index":514,"title":{},"body":{"license.html":{}}}],["document",{"_index":276,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["don't",{"_index":256,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["e.tostr",{"_index":35,"title":{},"body":{"classes/CombineErrors.html":{}}}],["each",{"_index":602,"title":{},"body":{"license.html":{}}}],["easier",{"_index":747,"title":{},"body":{"license.html":{}}}],["editori",{"_index":568,"title":{},"body":{"license.html":{}}}],["elabor",{"_index":571,"title":{},"body":{"license.html":{}}}],["electron",{"_index":584,"title":{},"body":{"license.html":{}}}],["employ",{"_index":233,"title":{},"body":{"contributing.html":{}}}],["empti",{"_index":496,"title":{},"body":{"index.html":{}}}],["enclos",{"_index":737,"title":{},"body":{"license.html":{}}}],["end",{"_index":161,"title":{},"body":{"classes/ExpectedEoi.html":{},"classes/UnexpectedEoi.html":{},"license.html":{}}}],["entir",{"_index":397,"title":{},"body":{"index.html":{}}}],["entiti",{"_index":139,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["enumer",{"_index":345,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["eoi",{"_index":210,"title":{},"body":{"classes/UnexpectedEoi.html":{},"coverage.html":{}}}],["eot",{"_index":158,"title":{},"body":{"classes/ExpectedEoi.html":{}}}],["err",{"_index":77,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["err2",{"_index":90,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["error",{"_index":22,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/ExpectedNoneOf.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["error(\"can't",{"_index":123,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["even",{"_index":253,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["event",{"_index":702,"title":{},"body":{"license.html":{}}}],["exampl",{"_index":419,"title":{},"body":{"index.html":{},"license.html":{}}}],["except",{"_index":619,"title":{},"body":{"license.html":{}}}],["exclud",{"_index":594,"title":{},"body":{"license.html":{}}}],["exclus",{"_index":607,"title":{},"body":{"license.html":{}}}],["execut",{"_index":677,"title":{},"body":{"license.html":{}}}],["exercis",{"_index":546,"title":{},"body":{"license.html":{}}}],["expect",{"_index":38,"title":{},"body":{"classes/CombineErrors.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{}}}],["expected_any_of",{"_index":179,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["expectedanyof",{"_index":136,"title":{"classes/ExpectedAnyOf.html":{}},"body":{"classes/ExpectedAnyOf.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedatleast",{"_index":147,"title":{"classes/ExpectedAtLeast.html":{}},"body":{"classes/ExpectedAtLeast.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedeoi",{"_index":156,"title":{"classes/ExpectedEoi.html":{}},"body":{"classes/ExpectedEoi.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedfield",{"_index":162,"title":{"classes/ExpectedField.html":{}},"body":{"classes/ExpectedField.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedmatch",{"_index":169,"title":{"classes/ExpectedMatch.html":{}},"body":{"classes/ExpectedMatch.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectednoneof",{"_index":174,"title":{"classes/ExpectedNoneOf.html":{}},"body":{"classes/ExpectedNoneOf.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedonc",{"_index":182,"title":{"classes/ExpectedOnce.html":{}},"body":{"classes/ExpectedOnce.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedwithinrang",{"_index":187,"title":{"classes/ExpectedWithinRange.html":{}},"body":{"classes/ExpectedWithinRange.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["explicitli",{"_index":673,"title":{},"body":{"license.html":{}}}],["export",{"_index":30,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{}}}],["express",{"_index":404,"title":{},"body":{"index.html":{},"license.html":{}}}],["extend",{"_index":109,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["extract",{"_index":772,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["f",{"_index":86,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["f(e",{"_index":132,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["f(this.failur",{"_index":130,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["f(this.valu",{"_index":113,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["f(v",{"_index":117,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["f]{6})/iy",{"_index":434,"title":{},"body":{"index.html":{}}}],["fail",{"_index":126,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{},"index.html":{}}}],["failur",{"_index":108,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["failuretostr",{"_index":302,"title":{},"body":{"coverage.html":{}}}],["fals",{"_index":121,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["fee",{"_index":723,"title":{},"body":{"license.html":{}}}],["few",{"_index":224,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["field",{"_index":166,"title":{},"body":{"classes/ExpectedField.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["fifti",{"_index":538,"title":{},"body":{"license.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"coverage.html":{},"license.html":{}}}],["finitenumbervalu",{"_index":324,"title":{},"body":{"coverage.html":{}}}],["fit",{"_index":384,"title":{},"body":{"index.html":{},"license.html":{}}}],["flag",{"_index":408,"title":{},"body":{"index.html":{}}}],["flatmap",{"_index":65,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["flatmap(f",{"_index":81,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["flatmaperror",{"_index":66,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["flatmaperror(f",{"_index":88,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["flexibl",{"_index":391,"title":{},"body":{"index.html":{}}}],["follow",{"_index":228,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["form",{"_index":547,"title":{},"body":{"license.html":{}}}],["format",{"_index":742,"title":{},"body":{"license.html":{}}}],["free",{"_index":610,"title":{},"body":{"license.html":{}}}],["full",{"_index":359,"title":{},"body":{"index.html":{}}}],["function",{"_index":87,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["gener",{"_index":248,"title":{},"body":{"contributing.html":{},"index.html":{},"license.html":{}}}],["get",{"_index":216,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["getunsafefailur",{"_index":67,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["getunsafesuccess",{"_index":68,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["github",{"_index":264,"title":{},"body":{"contributing.html":{}}}],["give",{"_index":237,"title":{},"body":{"contributing.html":{},"index.html":{},"license.html":{}}}],["given",{"_index":774,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["goodwil",{"_index":716,"title":{},"body":{"license.html":{}}}],["google'",{"_index":273,"title":{},"body":{"contributing.html":{}}}],["govern",{"_index":756,"title":{},"body":{"license.html":{}}}],["grant",{"_index":522,"title":{},"body":{"license.html":{}}}],["granular",{"_index":392,"title":{},"body":{"index.html":{}}}],["grey",{"_index":424,"title":{},"body":{"index.html":{}}}],["grey(0.2",{"_index":466,"title":{},"body":{"index.html":{}}}],["grey(0.3",{"_index":464,"title":{},"body":{"index.html":{}}}],["grey(v",{"_index":444,"title":{},"body":{"index.html":{}}}],["grey(v.grey",{"_index":498,"title":{},"body":{"index.html":{}}}],["greydecod",{"_index":439,"title":{},"body":{"index.html":{}}}],["greyvalu",{"_index":495,"title":{},"body":{"index.html":{}}}],["grossli",{"_index":707,"title":{},"body":{"license.html":{}}}],["guidelin",{"_index":226,"title":{},"body":{"contributing.html":{}}}],["h",{"_index":482,"title":{},"body":{"index.html":{}}}],["handi",{"_index":471,"title":{},"body":{"index.html":{}}}],["harmless",{"_index":733,"title":{},"body":{"license.html":{}}}],["head",{"_index":242,"title":{},"body":{"contributing.html":{}}}],["help",{"_index":269,"title":{},"body":{"contributing.html":{}}}],["here",{"_index":486,"title":{},"body":{"index.html":{}}}],["herebi",{"_index":603,"title":{},"body":{"license.html":{}}}],["herein",{"_index":675,"title":{},"body":{"license.html":{}}}],["hold",{"_index":732,"title":{},"body":{"license.html":{}}}],["hsl",{"_index":425,"title":{},"body":{"index.html":{}}}],["hsl(0.1,0.2,0.3)anoth",{"_index":468,"title":{},"body":{"index.html":{}}}],["hsl(v.h",{"_index":501,"title":{},"body":{"index.html":{}}}],["hsl(v[0",{"_index":449,"title":{},"body":{"index.html":{}}}],["hsldecod",{"_index":445,"title":{},"body":{"index.html":{}}}],["hslvalu",{"_index":499,"title":{},"body":{"index.html":{}}}],["http://www.apache.org/licens",{"_index":510,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/licens",{"_index":753,"title":{},"body":{"license.html":{}}}],["https://cla.developers.google.com",{"_index":244,"title":{},"body":{"contributing.html":{}}}],["hue",{"_index":426,"title":{},"body":{"index.html":{}}}],["identif",{"_index":748,"title":{},"body":{"license.html":{}}}],["identifi",{"_index":277,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["ii",{"_index":536,"title":{},"body":{"license.html":{}}}],["iii",{"_index":543,"title":{},"body":{"license.html":{}}}],["implement",{"_index":415,"title":{},"body":{"index.html":{}}}],["impli",{"_index":690,"title":{},"body":{"license.html":{}}}],["import",{"_index":29,"title":{},"body":{"classes/CombineErrors.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"license.html":{}}}],["improv",{"_index":593,"title":{},"body":{"license.html":{}}}],["in2",{"_index":101,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["inabl",{"_index":714,"title":{},"body":{"license.html":{}}}],["incident",{"_index":711,"title":{},"body":{"license.html":{}}}],["includ",{"_index":261,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["inclus",{"_index":582,"title":{},"body":{"license.html":{}}}],["incorpor",{"_index":600,"title":{},"body":{"license.html":{}}}],["incur",{"_index":734,"title":{},"body":{"license.html":{}}}],["indemn",{"_index":725,"title":{},"body":{"license.html":{}}}],["indemnifi",{"_index":730,"title":{},"body":{"license.html":{}}}],["index",{"_index":6,"title":{"index.html":{}},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["indic",{"_index":561,"title":{},"body":{"license.html":{}}}],["indirect",{"_index":529,"title":{},"body":{"license.html":{}}}],["individu",{"_index":545,"title":{},"body":{"license.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{}}}],["inform",{"_index":271,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["infring",{"_index":627,"title":{},"body":{"license.html":{}}}],["input",{"_index":76,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedEoi.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["instanc",{"_index":422,"title":{},"body":{"index.html":{}}}],["institut",{"_index":630,"title":{},"body":{"license.html":{}}}],["int",{"_index":773,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["integervalu",{"_index":325,"title":{},"body":{"coverage.html":{}}}],["intend",{"_index":401,"title":{},"body":{"index.html":{}}}],["intention",{"_index":581,"title":{},"body":{"license.html":{}}}],["interfac",{"_index":204,"title":{"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{}},"body":{"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{},"coverage.html":{},"license.html":{},"overview.html":{}}}],["irrevoc",{"_index":611,"title":{},"body":{"license.html":{}}}],["isfailur",{"_index":69,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["issu",{"_index":591,"title":{},"body":{"license.html":{}}}],["issuccess",{"_index":70,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["istoken",{"_index":326,"title":{},"body":{"coverage.html":{}}}],["it'",{"_index":370,"title":{},"body":{"index.html":{}}}],["januari",{"_index":508,"title":{},"body":{"license.html":{}}}],["join('\\n",{"_index":37,"title":{},"body":{"classes/CombineErrors.html":{}}}],["js",{"_index":378,"title":{},"body":{"index.html":{}}}],["json",{"_index":475,"title":{},"body":{"index.html":{}}}],["json.pars",{"_index":477,"title":{},"body":{"index.html":{}}}],["json.stringify(this.input",{"_index":124,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["keep",{"_index":396,"title":{},"body":{"index.html":{}}}],["kind",{"_index":9,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{},"license.html":{}}}],["l",{"_index":484,"title":{},"body":{"index.html":{}}}],["languag",{"_index":755,"title":{},"body":{"license.html":{}}}],["law",{"_index":687,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":635,"title":{},"body":{"license.html":{}}}],["lazi",{"_index":285,"title":{},"body":{"coverage.html":{}}}],["leav",{"_index":390,"title":{},"body":{"index.html":{}}}],["left",{"_index":458,"title":{},"body":{"index.html":{}}}],["legal",{"_index":523,"title":{},"body":{"license.html":{}}}],["length",{"_index":144,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["letter",{"_index":303,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["level",{"_index":778,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["liabil",{"_index":701,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":708,"title":{},"body":{"license.html":{}}}],["librari",{"_index":354,"title":{},"body":{"index.html":{}}}],["licens",{"_index":230,"title":{"license.html":{}},"body":{"contributing.html":{},"license.html":{}}}],["license.y",{"_index":670,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":519,"title":{},"body":{"license.html":{}}}],["light",{"_index":428,"title":{},"body":{"index.html":{}}}],["limit",{"_index":550,"title":{},"body":{"license.html":{}}}],["link",{"_index":578,"title":{},"body":{"license.html":{}}}],["list",{"_index":589,"title":{},"body":{"license.html":{}}}],["liter",{"_index":103,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["literalvalu",{"_index":327,"title":{},"body":{"coverage.html":{}}}],["literalvalue('hsl",{"_index":500,"title":{},"body":{"index.html":{}}}],["litig",{"_index":631,"title":{},"body":{"license.html":{}}}],["loss",{"_index":715,"title":{},"body":{"license.html":{}}}],["love",{"_index":220,"title":{},"body":{"contributing.html":{}}}],["lower_case_lett",{"_index":351,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lowercas",{"_index":352,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lowercaselett",{"_index":304,"title":{},"body":{"coverage.html":{}}}],["made",{"_index":560,"title":{},"body":{"license.html":{}}}],["mail",{"_index":588,"title":{},"body":{"license.html":{}}}],["make",{"_index":305,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["malfunct",{"_index":719,"title":{},"body":{"license.html":{}}}],["manag",{"_index":531,"title":{},"body":{"license.html":{}}}],["map",{"_index":71,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["map(",{"_index":34,"title":{},"body":{"classes/CombineErrors.html":{}}}],["map(f",{"_index":95,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["map(v",{"_index":435,"title":{},"body":{"index.html":{}}}],["maperror",{"_index":72,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["maperror(f",{"_index":97,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["mapinput",{"_index":73,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["mapinput(f",{"_index":99,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["mark",{"_index":596,"title":{},"body":{"license.html":{},"miscellaneous/typealiases.html":{}}}],["markoptionalfield",{"_index":766,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["match",{"_index":42,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["match(o",{"_index":102,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["matchanycharof",{"_index":306,"title":{},"body":{"coverage.html":{}}}],["matchinsensit",{"_index":307,"title":{},"body":{"coverage.html":{}}}],["matchinsensitive('gray",{"_index":441,"title":{},"body":{"index.html":{}}}],["matchinsensitive('grey').or(decodeerror.combin",{"_index":440,"title":{},"body":{"index.html":{}}}],["matchinsensitive('hsl",{"_index":446,"title":{},"body":{"index.html":{}}}],["matchnocharof",{"_index":308,"title":{},"body":{"coverage.html":{}}}],["max",{"_index":189,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["mean",{"_index":497,"title":{},"body":{"index.html":{},"license.html":{}}}],["mechan",{"_index":553,"title":{},"body":{"license.html":{}}}],["media",{"_index":557,"title":{},"body":{"license.html":{}}}],["medium",{"_index":642,"title":{},"body":{"license.html":{}}}],["meet",{"_index":644,"title":{},"body":{"license.html":{}}}],["member",{"_index":262,"title":{},"body":{"contributing.html":{}}}],["memori",{"_index":412,"title":{},"body":{"index.html":{}}}],["merchant",{"_index":692,"title":{},"body":{"license.html":{}}}],["mere",{"_index":577,"title":{},"body":{"license.html":{}}}],["messag",{"_index":48,"title":{},"body":{"classes/CustomError.html":{}}}],["method",{"_index":10,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{}}}],["min",{"_index":152,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{}}}],["miscellan",{"_index":344,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["mismatch",{"_index":201,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["modif",{"_index":549,"title":{},"body":{"license.html":{}}}],["modifi",{"_index":647,"title":{},"body":{"license.html":{}}}],["modul",{"_index":757,"title":{"modules.html":{}},"body":{"modules.html":{},"miscellaneous/typealiases.html":{}}}],["more",{"_index":270,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["name",{"_index":19,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["nativ",{"_index":377,"title":{},"body":{"index.html":{}}}],["necessarili",{"_index":626,"title":{},"body":{"license.html":{}}}],["need",{"_index":227,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["neglig",{"_index":705,"title":{},"body":{"license.html":{}}}],["never",{"_index":780,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["new",{"_index":115,"title":{},"body":{"classes/DecodeResultBase.html":{},"contributing.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["non",{"_index":606,"title":{},"body":{"license.html":{}}}],["normal",{"_index":663,"title":{},"body":{"license.html":{}}}],["noth",{"_index":457,"title":{},"body":{"index.html":{},"license.html":{}}}],["notic",{"_index":562,"title":{},"body":{"license.html":{}}}],["notwithstand",{"_index":674,"title":{},"body":{"license.html":{}}}],["nullablevalu",{"_index":328,"title":{},"body":{"coverage.html":{}}}],["nullvalu",{"_index":329,"title":{},"body":{"coverage.html":{}}}],["number",{"_index":150,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{},"index.html":{}}}],["numbervalu",{"_index":330,"title":{},"body":{"coverage.html":{}}}],["numbervalue.test(v",{"_index":493,"title":{},"body":{"index.html":{}}}],["o",{"_index":105,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["o.failure(thi",{"_index":127,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["o.success(thi",{"_index":112,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["object",{"_index":417,"title":{},"body":{"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["objectvalu",{"_index":331,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["oblig",{"_index":726,"title":{},"body":{"license.html":{}}}],["obtain",{"_index":752,"title":{},"body":{"license.html":{}}}],["of:\\n${error",{"_index":40,"title":{},"body":{"classes/CombineErrors.html":{}}}],["offer",{"_index":621,"title":{},"body":{"license.html":{}}}],["on",{"_index":39,"title":{},"body":{"classes/CombineErrors.html":{},"contributing.html":{},"index.html":{},"license.html":{}}}],["onc",{"_index":185,"title":{},"body":{"classes/ExpectedOnce.html":{},"contributing.html":{}}}],["oneof",{"_index":286,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["open",{"_index":274,"title":{},"body":{"contributing.html":{}}}],["option",{"_index":21,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["optionalvalu",{"_index":332,"title":{},"body":{"coverage.html":{}}}],["optionalwhitespac",{"_index":309,"title":{},"body":{"coverage.html":{}}}],["origin",{"_index":574,"title":{},"body":{"license.html":{}}}],["otherwis",{"_index":535,"title":{},"body":{"license.html":{}}}],["out",{"_index":79,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["out2",{"_index":85,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["output",{"_index":399,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["outstand",{"_index":541,"title":{},"body":{"license.html":{}}}],["over",{"_index":243,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["overview",{"_index":758,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":520,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":537,"title":{},"body":{"license.html":{}}}],["page",{"_index":746,"title":{},"body":{"license.html":{}}}],["paramet",{"_index":17,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"index.html":{}}}],["pars",{"_index":420,"title":{},"body":{"index.html":{}}}],["parseint(v",{"_index":436,"title":{},"body":{"index.html":{}}}],["parser",{"_index":372,"title":{},"body":{"index.html":{}}}],["parsers/decod",{"_index":356,"title":{},"body":{"index.html":{}}}],["part",{"_index":241,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["parti",{"_index":662,"title":{},"body":{"license.html":{}}}],["particular",{"_index":693,"title":{},"body":{"license.html":{}}}],["parts",{"_index":353,"title":{},"body":{"index.html":{}}}],["partsing/core/decod",{"_index":361,"title":{},"body":{"index.html":{}}}],["partsing/error",{"_index":386,"title":{},"body":{"index.html":{}}}],["partsing/text",{"_index":376,"title":{},"body":{"index.html":{}}}],["partsing/valu",{"_index":379,"title":{},"body":{"index.html":{}}}],["patch",{"_index":222,"title":{},"body":{"contributing.html":{}}}],["patent",{"_index":618,"title":{},"body":{"license.html":{}}}],["path",{"_index":215,"title":{},"body":{"interfaces/ValueInput.html":{},"index.html":{}}}],["pathtostr",{"_index":333,"title":{},"body":{"coverage.html":{}}}],["pattern",{"_index":200,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["patternmismatch",{"_index":196,"title":{"classes/PatternMismatch.html":{}},"body":{"classes/PatternMismatch.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["payload",{"_index":474,"title":{},"body":{"index.html":{}}}],["percent",{"_index":539,"title":{},"body":{"license.html":{}}}],["perform",{"_index":616,"title":{},"body":{"license.html":{}}}],["permiss",{"_index":238,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["perpetu",{"_index":604,"title":{},"body":{"license.html":{}}}],["pertain",{"_index":654,"title":{},"body":{"license.html":{}}}],["picknext",{"_index":447,"title":{},"body":{"index.html":{}}}],["picknext(ratiodecod",{"_index":443,"title":{},"body":{"index.html":{}}}],["place",{"_index":658,"title":{},"body":{"license.html":{}}}],["plural",{"_index":142,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"coverage.html":{}}}],["pluralize(this.ent",{"_index":155,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{}}}],["portion",{"_index":365,"title":{},"body":{"index.html":{}}}],["posit",{"_index":369,"title":{},"body":{"index.html":{}}}],["possibl",{"_index":58,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["power",{"_index":527,"title":{},"body":{"license.html":{}}}],["predic",{"_index":348,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["prefer",{"_index":548,"title":{},"body":{"license.html":{}}}],["prepar",{"_index":613,"title":{},"body":{"license.html":{}}}],["print",{"_index":745,"title":{},"body":{"license.html":{}}}],["probabl",{"_index":255,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["product",{"_index":681,"title":{},"body":{"license.html":{}}}],["project",{"_index":223,"title":{},"body":{"contributing.html":{}}}],["promin",{"_index":649,"title":{},"body":{"license.html":{}}}],["properti",{"_index":7,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{}}}],["provid",{"_index":362,"title":{},"body":{"index.html":{},"license.html":{}}}],["publicli",{"_index":614,"title":{},"body":{"license.html":{}}}],["pull",{"_index":265,"title":{},"body":{"contributing.html":{}}}],["purpos",{"_index":267,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["r",{"_index":82,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["rang",{"_index":192,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["ratiodecod",{"_index":429,"title":{},"body":{"index.html":{}}}],["ratiovalu",{"_index":492,"title":{},"body":{"index.html":{}}}],["readabl",{"_index":656,"title":{},"body":{"license.html":{}}}],["readonli",{"_index":8,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"index.html":{}}}],["realli",{"_index":357,"title":{},"body":{"index.html":{}}}],["realloc",{"_index":409,"title":{},"body":{"index.html":{}}}],["reason",{"_index":682,"title":{},"body":{"license.html":{}}}],["receiv",{"_index":598,"title":{},"body":{"license.html":{}}}],["recipi",{"_index":645,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":743,"title":{},"body":{"license.html":{}}}],["redistribut",{"_index":240,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["regard",{"_index":678,"title":{},"body":{"license.html":{}}}],["regexp",{"_index":310,"title":{},"body":{"coverage.html":{}}}],["regexp(/0[.]\\d+/y).map(numb",{"_index":430,"title":{},"body":{"index.html":{}}}],["regexp(/[#]([0",{"_index":432,"title":{},"body":{"index.html":{}}}],["regular",{"_index":403,"title":{},"body":{"index.html":{}}}],["remain",{"_index":575,"title":{},"body":{"license.html":{}}}],["rememb",{"_index":364,"title":{},"body":{"index.html":{}}}],["replac",{"_index":739,"title":{},"body":{"license.html":{}}}],["repres",{"_index":572,"title":{},"body":{"license.html":{}}}],["represent",{"_index":393,"title":{},"body":{"index.html":{}}}],["reproduc",{"_index":612,"title":{},"body":{"license.html":{}}}],["reproduct",{"_index":513,"title":{},"body":{"license.html":{}}}],["request",{"_index":266,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["requir",{"_index":263,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["respons",{"_index":695,"title":{},"body":{"license.html":{}}}],["rest",{"_index":311,"title":{},"body":{"coverage.html":{}}}],["result",{"_index":41,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["retain",{"_index":234,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["return",{"_index":27,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["review",{"_index":259,"title":{},"body":{"contributing.html":{}}}],["revis",{"_index":569,"title":{},"body":{"license.html":{}}}],["rgb",{"_index":423,"title":{},"body":{"index.html":{}}}],["rgb(0x003355",{"_index":461,"title":{},"body":{"index.html":{}}}],["rgb(v",{"_index":438,"title":{},"body":{"index.html":{}}}],["rgbdecod",{"_index":431,"title":{},"body":{"index.html":{}}}],["rgbvalu",{"_index":504,"title":{},"body":{"index.html":{}}}],["right",{"_index":728,"title":{},"body":{"license.html":{}}}],["risk",{"_index":699,"title":{},"body":{"license.html":{}}}],["royalti",{"_index":609,"title":{},"body":{"license.html":{}}}],["s",{"_index":36,"title":{},"body":{"classes/CombineErrors.html":{},"classes/DecodeResultBase.html":{},"index.html":{}}}],["safeintegervalu",{"_index":334,"title":{},"body":{"coverage.html":{}}}],["same",{"_index":744,"title":{},"body":{"license.html":{}}}],["satur",{"_index":427,"title":{},"body":{"index.html":{}}}],["save",{"_index":411,"title":{},"body":{"index.html":{}}}],["scenario",{"_index":469,"title":{},"body":{"index.html":{}}}],["section",{"_index":516,"title":{},"body":{"license.html":{}}}],["see",{"_index":245,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["sell",{"_index":622,"title":{},"body":{"license.html":{}}}],["sent",{"_index":587,"title":{},"body":{"license.html":{}}}],["separ",{"_index":576,"title":{},"body":{"license.html":{}}}],["separatedbytimes(match",{"_index":448,"title":{},"body":{"index.html":{}}}],["sequenc",{"_index":287,"title":{},"body":{"coverage.html":{}}}],["servic",{"_index":680,"title":{},"body":{"license.html":{}}}],["set",{"_index":374,"title":{},"body":{"index.html":{}}}],["shall",{"_index":515,"title":{},"body":{"license.html":{}}}],["shape",{"_index":382,"title":{},"body":{"index.html":{}}}],["share",{"_index":542,"title":{},"body":{"license.html":{}}}],["sign",{"_index":247,"title":{},"body":{"contributing.html":{}}}],["signatur",{"_index":770,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["simpl",{"_index":387,"title":{},"body":{"index.html":{}}}],["simpli",{"_index":236,"title":{},"body":{"contributing.html":{}}}],["simplifi",{"_index":398,"title":{},"body":{"index.html":{}}}],["skipnext(eoi",{"_index":455,"title":{},"body":{"index.html":{}}}],["skipnext(match",{"_index":452,"title":{},"body":{"index.html":{}}}],["skipnext(optionalwhitespac",{"_index":442,"title":{},"body":{"index.html":{}}}],["slice",{"_index":410,"title":{},"body":{"index.html":{}}}],["small",{"_index":225,"title":{},"body":{"contributing.html":{}}}],["softwar",{"_index":551,"title":{},"body":{"license.html":{}}}],["sole",{"_index":694,"title":{},"body":{"license.html":{}}}],["somehow",{"_index":368,"title":{},"body":{"index.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"license.html":{}}}],["special",{"_index":710,"title":{},"body":{"license.html":{}}}],["specif",{"_index":754,"title":{},"body":{"license.html":{}}}],["specifi",{"_index":777,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../decoder.t",{"_index":764,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../entity.t",{"_index":346,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../index.t",{"_index":762,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../result.t",{"_index":763,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../type_level.t",{"_index":765,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/core/decoder.t",{"_index":279,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/result.t",{"_index":54,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/result.ts:22",{"_index":78,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:23",{"_index":80,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:24",{"_index":75,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:27",{"_index":104,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:32",{"_index":84,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:33",{"_index":89,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:35",{"_index":96,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:36",{"_index":98,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:37",{"_index":100,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:39",{"_index":94,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:40",{"_index":93,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:42",{"_index":92,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:43",{"_index":91,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:45",{"_index":106,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/type_level.t",{"_index":771,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/error/combine_errors.t",{"_index":5,"title":{},"body":{"classes/CombineErrors.html":{},"coverage.html":{}}}],["src/error/combine_errors.ts:20",{"_index":16,"title":{},"body":{"classes/CombineErrors.html":{}}}],["src/error/combine_errors.ts:22",{"_index":26,"title":{},"body":{"classes/CombineErrors.html":{}}}],["src/error/custom_error.t",{"_index":44,"title":{},"body":{"classes/CustomError.html":{},"coverage.html":{}}}],["src/error/custom_error.ts:21",{"_index":50,"title":{},"body":{"classes/CustomError.html":{}}}],["src/error/custom_error.ts:23",{"_index":51,"title":{},"body":{"classes/CustomError.html":{}}}],["src/error/entity.t",{"_index":296,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/error/expected_any_of.t",{"_index":137,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"coverage.html":{}}}],["src/error/expected_any_of.ts:33",{"_index":140,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["src/error/expected_any_of.ts:35",{"_index":141,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["src/error/expected_at_least.t",{"_index":148,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"coverage.html":{}}}],["src/error/expected_at_least.ts:20",{"_index":151,"title":{},"body":{"classes/ExpectedAtLeast.html":{}}}],["src/error/expected_at_least.ts:22",{"_index":153,"title":{},"body":{"classes/ExpectedAtLeast.html":{}}}],["src/error/expected_eoi.t",{"_index":157,"title":{},"body":{"classes/ExpectedEoi.html":{},"coverage.html":{}}}],["src/error/expected_eoi.ts:18",{"_index":159,"title":{},"body":{"classes/ExpectedEoi.html":{}}}],["src/error/expected_eoi.ts:19",{"_index":160,"title":{},"body":{"classes/ExpectedEoi.html":{}}}],["src/error/expected_field.t",{"_index":163,"title":{},"body":{"classes/ExpectedField.html":{},"coverage.html":{}}}],["src/error/expected_field.ts:18",{"_index":165,"title":{},"body":{"classes/ExpectedField.html":{}}}],["src/error/expected_field.ts:20",{"_index":167,"title":{},"body":{"classes/ExpectedField.html":{}}}],["src/error/expected_match.t",{"_index":170,"title":{},"body":{"classes/ExpectedMatch.html":{},"coverage.html":{}}}],["src/error/expected_match.ts:18",{"_index":172,"title":{},"body":{"classes/ExpectedMatch.html":{}}}],["src/error/expected_match.ts:20",{"_index":173,"title":{},"body":{"classes/ExpectedMatch.html":{}}}],["src/error/expected_none_of.t",{"_index":175,"title":{},"body":{"classes/ExpectedNoneOf.html":{},"coverage.html":{}}}],["src/error/expected_none_of.ts:21",{"_index":176,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["src/error/expected_none_of.ts:23",{"_index":178,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["src/error/expected_once.t",{"_index":183,"title":{},"body":{"classes/ExpectedOnce.html":{},"coverage.html":{}}}],["src/error/expected_once.ts:20",{"_index":184,"title":{},"body":{"classes/ExpectedOnce.html":{}}}],["src/error/expected_once.ts:22",{"_index":186,"title":{},"body":{"classes/ExpectedOnce.html":{}}}],["src/error/expected_within_range.t",{"_index":188,"title":{},"body":{"classes/ExpectedWithinRange.html":{},"coverage.html":{}}}],["src/error/expected_within_range.ts:18",{"_index":190,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["src/error/expected_within_range.ts:20",{"_index":193,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["src/error/index.t",{"_index":298,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/error/pattern_mismatch.t",{"_index":197,"title":{},"body":{"classes/PatternMismatch.html":{},"coverage.html":{}}}],["src/error/pattern_mismatch.ts:18",{"_index":199,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["src/error/pattern_mismatch.ts:20",{"_index":202,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["src/error/unexpected_eoi.t",{"_index":208,"title":{},"body":{"classes/UnexpectedEoi.html":{},"coverage.html":{}}}],["src/error/unexpected_eoi.ts:18",{"_index":211,"title":{},"body":{"classes/UnexpectedEoi.html":{}}}],["src/error/unexpected_eoi.ts:19",{"_index":212,"title":{},"body":{"classes/UnexpectedEoi.html":{}}}],["src/text/index.t",{"_index":299,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/text/input.t",{"_index":206,"title":{},"body":{"interfaces/TextInput.html":{},"coverage.html":{}}}],["src/value/index.t",{"_index":318,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/value/input.t",{"_index":214,"title":{},"body":{"interfaces/ValueInput.html":{},"coverage.html":{}}}],["start",{"_index":217,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["state",{"_index":620,"title":{},"body":{"license.html":{}}}],["statement",{"_index":278,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["sticki",{"_index":407,"title":{},"body":{"index.html":{}}}],["still",{"_index":389,"title":{},"body":{"index.html":{}}}],["stoppag",{"_index":717,"title":{},"body":{"license.html":{}}}],["string",{"_index":28,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"index.html":{}}}],["stringvalu",{"_index":335,"title":{},"body":{"coverage.html":{}}}],["subject",{"_index":601,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":617,"title":{},"body":{"license.html":{}}}],["submiss",{"_index":260,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["submit",{"_index":249,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["subsequ",{"_index":599,"title":{},"body":{"license.html":{}}}],["succ",{"_index":125,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["succe",{"_index":288,"title":{},"body":{"coverage.html":{}}}],["success",{"_index":107,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{}}}],["successfulli",{"_index":371,"title":{},"body":{"index.html":{}}}],["such",{"_index":532,"title":{},"body":{"license.html":{}}}],["super(input",{"_index":111,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["supersed",{"_index":676,"title":{},"body":{"license.html":{}}}],["support",{"_index":724,"title":{},"body":{"license.html":{}}}],["sure",{"_index":456,"title":{},"body":{"index.html":{}}}],["syntax",{"_index":741,"title":{},"body":{"license.html":{}}}],["system",{"_index":590,"title":{},"body":{"license.html":{}}}],["t",{"_index":775,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["tabl",{"_index":343,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":342,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":400,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["takecharbetween",{"_index":312,"title":{},"body":{"coverage.html":{}}}],["takecharwhil",{"_index":313,"title":{},"body":{"coverage.html":{}}}],["term",{"_index":511,"title":{},"body":{"license.html":{}}}],["termin",{"_index":639,"title":{},"body":{"license.html":{}}}],["testchar",{"_index":314,"title":{},"body":{"coverage.html":{}}}],["testobject",{"_index":336,"title":{},"body":{"coverage.html":{}}}],["testtyp",{"_index":337,"title":{},"body":{"coverage.html":{}}}],["testvalu",{"_index":338,"title":{},"body":{"coverage.html":{}}}],["text",{"_index":395,"title":{},"body":{"index.html":{},"license.html":{}}}],["textdecod",{"_index":767,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["textinput",{"_index":205,"title":{"interfaces/TextInput.html":{}},"body":{"interfaces/TextInput.html":{},"coverage.html":{},"index.html":{}}}],["theori",{"_index":703,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":580,"title":{},"body":{"license.html":{}}}],["third",{"_index":661,"title":{},"body":{"license.html":{}}}],["this.error",{"_index":33,"title":{},"body":{"classes/CombineErrors.html":{}}}],["this.failur",{"_index":129,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["this.field",{"_index":168,"title":{},"body":{"classes/ExpectedField.html":{}}}],["this.flatmap(v",{"_index":114,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["this.flatmaperror(",{"_index":131,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["this.max",{"_index":195,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["this.messag",{"_index":52,"title":{},"body":{"classes/CustomError.html":{}}}],["this.min",{"_index":154,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{}}}],["this.pattern",{"_index":203,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["this.valu",{"_index":118,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedMatch.html":{}}}],["those",{"_index":490,"title":{},"body":{"index.html":{},"license.html":{}}}],["through",{"_index":517,"title":{},"body":{"license.html":{}}}],["throw",{"_index":122,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["time",{"_index":366,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["titl",{"_index":691,"title":{},"body":{"license.html":{}}}],["tort",{"_index":704,"title":{},"body":{"license.html":{}}}],["tostr",{"_index":11,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{}}}],["track",{"_index":367,"title":{},"body":{"index.html":{},"license.html":{}}}],["trade",{"_index":679,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":652,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":623,"title":{},"body":{"license.html":{}}}],["transform",{"_index":473,"title":{},"body":{"index.html":{},"license.html":{}}}],["translat",{"_index":554,"title":{},"body":{"license.html":{}}}],["true",{"_index":120,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["tupletounion",{"_index":768,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["tuplevalu",{"_index":339,"title":{},"body":{"coverage.html":{}}}],["two",{"_index":57,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{}}}],["type",{"_index":20,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{},"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":760,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["u",{"_index":776,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["undefineablevalu",{"_index":340,"title":{},"body":{"coverage.html":{}}}],["undefinedvalu",{"_index":341,"title":{},"body":{"coverage.html":{}}}],["under",{"_index":525,"title":{},"body":{"license.html":{}}}],["unexpect",{"_index":209,"title":{},"body":{"classes/UnexpectedEoi.html":{}}}],["unexpectedeoi",{"_index":207,"title":{"classes/UnexpectedEoi.html":{}},"body":{"classes/UnexpectedEoi.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["union",{"_index":56,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["unless",{"_index":672,"title":{},"body":{"license.html":{}}}],["uppercas",{"_index":350,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["uppercase_lett",{"_index":349,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["uppercaselett",{"_index":315,"title":{},"body":{"coverage.html":{}}}],["us",{"_index":239,"title":{},"body":{"contributing.html":{},"index.html":{},"license.html":{}}}],["usag",{"_index":779,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["util",{"_index":375,"title":{},"body":{"index.html":{}}}],["v",{"_index":494,"title":{},"body":{"index.html":{}}}],["v.",{"_index":502,"title":{},"body":{"index.html":{}}}],["v.l",{"_index":503,"title":{},"body":{"index.html":{}}}],["v[1",{"_index":450,"title":{},"body":{"index.html":{}}}],["v[2",{"_index":451,"title":{},"body":{"index.html":{}}}],["valid",{"_index":472,"title":{},"body":{"index.html":{}}}],["valu",{"_index":24,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["valuedecod",{"_index":769,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["valueinput",{"_index":213,"title":{"interfaces/ValueInput.html":{}},"body":{"interfaces/ValueInput.html":{},"coverage.html":{},"index.html":{}}}],["values.length",{"_index":145,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["variabl",{"_index":282,"title":{},"body":{"coverage.html":{}}}],["verbal",{"_index":585,"title":{},"body":{"license.html":{}}}],["version",{"_index":506,"title":{},"body":{"license.html":{}}}],["void",{"_index":83,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["want",{"_index":358,"title":{},"body":{"index.html":{}}}],["warranti",{"_index":685,"title":{},"body":{"license.html":{}}}],["we'd",{"_index":219,"title":{},"body":{"contributing.html":{}}}],["wherev",{"_index":660,"title":{},"body":{"license.html":{}}}],["whether",{"_index":533,"title":{},"body":{"license.html":{}}}],["whitespac",{"_index":316,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["whole",{"_index":573,"title":{},"body":{"license.html":{}}}],["within",{"_index":191,"title":{},"body":{"classes/ExpectedWithinRange.html":{},"index.html":{},"license.html":{}}}],["without",{"_index":643,"title":{},"body":{"license.html":{}}}],["withposit",{"_index":317,"title":{},"body":{"coverage.html":{}}}],["work",{"_index":558,"title":{},"body":{"license.html":{}}}],["worldwid",{"_index":605,"title":{},"body":{"license.html":{}}}],["wrap",{"_index":459,"title":{},"body":{"index.html":{}}}],["write",{"_index":402,"title":{},"body":{"index.html":{},"license.html":{}}}],["written",{"_index":586,"title":{},"body":{"license.html":{}}}],["y",{"_index":406,"title":{},"body":{"index.html":{}}}],["you'v",{"_index":251,"title":{},"body":{"contributing.html":{}}}],["yyyi",{"_index":750,"title":{},"body":{"license.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/CombineErrors.html":{"url":"classes/CombineErrors.html","title":"class - CombineErrors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CombineErrors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/combine_errors.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(errors: DecodeError[])\n                    \n                \n                        \n                            \n                                Defined in src/error/combine_errors.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        errors\n                                                  \n                                                        \n                                                                    DecodeError[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'combine-errors'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/combine_errors.ts:20\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/combine_errors.ts:22\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { DecodeError } from './'\n\nexport class CombineErrors {\n  readonly kind: 'combine-errors' = 'combine-errors'\n  constructor(readonly errors: DecodeError[]) {}\n  toString() {\n    const errors: string = this.errors\n      .map(e => e.toString())\n      .map(s => `  - ${s}`)\n      .join('\\n')\n    return `expected one of:\\n${errors}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomError.html":{"url":"classes/CustomError.html","title":"class - CustomError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/custom_error.ts\n        \n\n            \n                Description\n            \n            \n                Error type that allows for a customized message.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/custom_error.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'custom-error'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/custom_error.ts:21\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/custom_error.ts:23\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class CustomError {\n  readonly kind: 'custom-error' = 'custom-error'\n  constructor(readonly message: string) {}\n  toString() {\n    return this.message\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DecodeResultBase.html":{"url":"classes/DecodeResultBase.html","title":"class - DecodeResultBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DecodeResultBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/result.ts\n        \n\n            \n                Description\n            \n            \n                DecodeResult is a union type that has two possible constructors\nDecodeSuccess and DecodeFailure.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                _E\n                            \n                            \n                                    Readonly\n                                _I\n                            \n                            \n                                    Readonly\n                                _O\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                flatMap\n                            \n                            \n                                    Abstract\n                                flatMapError\n                            \n                            \n                                    Abstract\n                                getUnsafeFailure\n                            \n                            \n                                    Abstract\n                                getUnsafeSuccess\n                            \n                            \n                                    Abstract\n                                isFailure\n                            \n                            \n                                    Abstract\n                                isSuccess\n                            \n                            \n                                    Abstract\n                                map\n                            \n                            \n                                    Abstract\n                                mapError\n                            \n                            \n                                    Abstract\n                                mapInput\n                            \n                            \n                                    Abstract\n                                match\n                            \n                            \n                                    Abstract\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(input: In)\n                    \n                \n                        \n                            \n                                Defined in src/core/result.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        input\n                                                  \n                                                        \n                                                                    In\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            _E\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _E:     Err\n\n                    \n                \n                    \n                        \n                            Type :     Err\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/result.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            _I\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _I:     In\n\n                    \n                \n                    \n                        \n                            Type :     In\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/result.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            _O\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _O:     Out\n\n                    \n                \n                    \n                        \n                            Type :     Out\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/result.ts:23\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            flatMap\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        flatMap(f: (r: Out) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:32\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        Out2\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            flatMapError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        flatMapError(f: (r: Err) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:33\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        Err2\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            getUnsafeFailure\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getUnsafeFailure()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:43\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Err\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            getUnsafeSuccess\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getUnsafeSuccess()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:42\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Out\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            isFailure\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        isFailure()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:40\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     DecodeFailure\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            isSuccess\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        isSuccess()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:39\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     DecodeSuccess\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            map\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        map(f: (r: Out) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:35\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        Out2\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            mapError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        mapError(f: (r: Err) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:36\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        Err2\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            mapInput\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        mapInput(f: (i: In) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:37\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        In2\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            match\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        match(o: literal type)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:27\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        O\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        o\n                                                        \n                                                                    literal type\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     O\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:45\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        abstract class DecodeResultBase {\n  readonly _I!: In\n  readonly _O!: Out\n  readonly _E!: Err\n\n  constructor(readonly input: In) {}\n  abstract match(o: {\n    success: (s: DecodeSuccess) => O\n    failure: (f: DecodeFailure) => O\n  }): O\n\n  abstract flatMap(f: (r: Out) => DecodeResult): DecodeResult\n  abstract flatMapError(f: (r: Err) => DecodeResult): DecodeResult\n\n  abstract map(f: (r: Out) => Out2): DecodeResult\n  abstract mapError(f: (r: Err) => Err2): DecodeResult\n  abstract mapInput(f: (i: In) => In2): DecodeResult\n\n  abstract isSuccess(): this is DecodeSuccess\n  abstract isFailure(): this is DecodeFailure\n\n  abstract getUnsafeSuccess(): Out\n  abstract getUnsafeFailure(): Err\n\n  abstract toString(): string\n}\n\nexport class DecodeSuccess extends DecodeResultBase {\n  readonly kind = 'decode-success'\n  constructor(input: In, readonly value: Out) {\n    super(input)\n  }\n\n  match(o: { success: (s: DecodeSuccess) => O; failure: (f: DecodeFailure) => O }): O {\n    return o.success(this)\n  }\n\n  flatMap(f: (r: Out) => DecodeResult): DecodeResult {\n    return f(this.value)\n  }\n  map(f: (r: Out) => Out2): DecodeResult {\n    return this.flatMap(v => new DecodeSuccess(this.input, f(v)))\n  }\n  flatMapError(f: (r: Err) => DecodeResult): DecodeResult {\n    return new DecodeSuccess(this.input, this.value)\n  }\n  mapError(f: (r: Err) => Err2): DecodeResult {\n    return new DecodeSuccess(this.input, this.value)\n  }\n  mapInput(f: (i: In) => In2): DecodeResult {\n    return new DecodeSuccess(f(this.input), this.value)\n  }\n\n  isSuccess(): this is DecodeSuccess {\n    return true\n  }\n  isFailure(): this is DecodeFailure {\n    return false\n  }\n\n  getUnsafeSuccess(): Out {\n    return this.value\n  }\n  getUnsafeFailure(): Err {\n    throw new Error(\"can't get failure from success\")\n  }\n\n  toString(): string {\n    return `DecodeSuccess: ${JSON.stringify(this.input)}`\n  }\n}\n\nexport class DecodeFailure extends DecodeResultBase {\n  readonly kind = 'decode-failure'\n  constructor(input: In, readonly failure: Err) {\n    super(input)\n  }\n\n  match(o: {\n    success: (succ: DecodeSuccess) => O\n    failure: (fail: DecodeFailure) => O\n  }): O {\n    return o.failure(this)\n  }\n\n  flatMap(f: (r: Out) => DecodeResult): DecodeResult {\n    return new DecodeFailure(this.input, this.failure)\n  }\n  map(f: (r: Out) => Out2): DecodeResult {\n    return new DecodeFailure(this.input, this.failure)\n  }\n  flatMapError(f: (r: Err) => DecodeResult): DecodeResult {\n    return f(this.failure)\n  }\n  mapError(f: (r: Err) => Err2): DecodeResult {\n    return this.flatMapError(e => new DecodeFailure(this.input, f(e)))\n  }\n  mapInput(f: (i: In) => In2): DecodeResult {\n    return new DecodeFailure(f(this.input), this.failure)\n  }\n\n  isSuccess(): this is DecodeSuccess {\n    return false\n  }\n  isFailure(): this is DecodeFailure {\n    return true\n  }\n  getUnsafeSuccess(): Out {\n    throw new Error(\"can't get success from failure\")\n  }\n  getUnsafeFailure(): Err {\n    return this.failure\n  }\n\n  toString(): string {\n    return `DecodeFailure: ${JSON.stringify(this.input)}`\n  }\n}\n\nexport type DecodeResult = DecodeSuccess | DecodeFailure\n\nexport const success = (input: In, result: Out): DecodeResult =>\n  new DecodeSuccess(input, result)\nexport const failure = (input: In, failure: Err): DecodeResult =>\n  new DecodeFailure(input, failure)\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedAnyOf.html":{"url":"classes/ExpectedAnyOf.html","title":"class - ExpectedAnyOf","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedAnyOf\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_any_of.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entity: Entity, values: string[])\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_any_of.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                    Entity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-any-of'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_any_of.ts:33\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_any_of.ts:35\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, pluralize } from './entity'\n\nexport const concatOr = (values: string[]) => {\n  const length = values.length\n  if (length === 0) {\n    return ''\n  } else if (length \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedAtLeast.html":{"url":"classes/ExpectedAtLeast.html","title":"class - ExpectedAtLeast","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedAtLeast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_at_least.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(min: number, entity: Entity)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_at_least.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        min\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                    Entity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-at-least'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_at_least.ts:20\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_at_least.ts:22\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, pluralize } from './entity'\n\nexport class ExpectedAtLeast {\n  readonly kind: 'expected-at-least' = 'expected-at-least'\n  constructor(readonly min: number, readonly entity: Entity) {}\n  toString() {\n    return `expected at least ${this.min} ${pluralize(this.entity, this.min)}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedEoi.html":{"url":"classes/ExpectedEoi.html","title":"class - ExpectedEoi","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedEoi\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_eoi.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-eot'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_eoi.ts:18\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_eoi.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class ExpectedEoi {\n  readonly kind: 'expected-eot' = 'expected-eot'\n  toString() {\n    return `expected end of input`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedField.html":{"url":"classes/ExpectedField.html","title":"class - ExpectedField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_field.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_field.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-field'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_field.ts:18\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_field.ts:20\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class ExpectedField {\n  readonly kind: 'expected-field' = 'expected-field'\n  constructor(readonly field: string) {}\n  toString() {\n    return `expected field \"${this.field}\"`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedMatch.html":{"url":"classes/ExpectedMatch.html","title":"class - ExpectedMatch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedMatch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_match.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_match.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-match'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_match.ts:18\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_match.ts:20\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class ExpectedMatch {\n  readonly kind: 'expected-match' = 'expected-match'\n  constructor(readonly value: string) {}\n  toString() {\n    return `expected ${this.value}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedNoneOf.html":{"url":"classes/ExpectedNoneOf.html","title":"class - ExpectedNoneOf","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedNoneOf\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_none_of.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entity: Entity, values: string[])\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_none_of.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                    Entity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'no-char-of-error'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_none_of.ts:21\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_none_of.ts:23\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, pluralize } from './entity'\nimport { concatOr } from './expected_any_of'\n\nexport class ExpectedNoneOf {\n  readonly kind: 'no-char-of-error' = 'no-char-of-error'\n  constructor(readonly entity: Entity, readonly values: string[]) {}\n  toString() {\n    return `expected no ${pluralize(this.entity, 1)} like ${concatOr(this.values)}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedOnce.html":{"url":"classes/ExpectedOnce.html","title":"class - ExpectedOnce","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedOnce\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_once.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entity: Entity)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_once.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                    Entity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-once'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_once.ts:20\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_once.ts:22\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, pluralize } from './entity'\n\nexport class ExpectedOnce {\n  readonly kind: 'expected-once' = 'expected-once'\n  constructor(readonly entity: Entity) {}\n  toString() {\n    return `expected a ${pluralize(this.entity, 1)}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedWithinRange.html":{"url":"classes/ExpectedWithinRange.html","title":"class - ExpectedWithinRange","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedWithinRange\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_within_range.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(min: string, max: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_within_range.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        min\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        max\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-within-range'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_within_range.ts:18\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_within_range.ts:20\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class ExpectedWithinRange {\n  readonly kind: 'expected-within-range' = 'expected-within-range'\n  constructor(readonly min: string, readonly max: string) {}\n  toString() {\n    return `expected between ${this.min} and ${this.max}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatternMismatch.html":{"url":"classes/PatternMismatch.html","title":"class - PatternMismatch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatternMismatch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/pattern_mismatch.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pattern: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/pattern_mismatch.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pattern\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'pattern-mismatch'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/pattern_mismatch.ts:18\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/pattern_mismatch.ts:20\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class PatternMismatch {\n  readonly kind: 'pattern-mismatch' = 'pattern-mismatch'\n  constructor(readonly pattern: string) {}\n  toString() {\n    return `expected to match pattern ${this.pattern}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TextInput.html":{"url":"interfaces/TextInput.html","title":"interface - TextInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TextInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/text/input.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        index\n                                \n                                \n                                        input\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        index\n                                    \n                                \n                                \n                                    \n                                        index:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        input\n                                    \n                                \n                                \n                                    \n                                        input:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TextInput {\n  readonly input: string\n  readonly index: number\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnexpectedEoi.html":{"url":"classes/UnexpectedEoi.html","title":"class - UnexpectedEoi","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnexpectedEoi\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/unexpected_eoi.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'unexpected-eoi'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/unexpected_eoi.ts:18\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/unexpected_eoi.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class UnexpectedEoi {\n  readonly kind: 'unexpected-eoi' = 'unexpected-eoi'\n  toString() {\n    return `unexpected end of input`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValueInput.html":{"url":"interfaces/ValueInput.html","title":"interface - ValueInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ValueInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/value/input.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        input\n                                \n                                \n                                        path\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        input\n                                    \n                                \n                                \n                                    \n                                        input:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:     (string | number)[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     (string | number)[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ValueInput {\n  readonly input: any\n  readonly path: (string | number)[]\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nHow to Contribute\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\nContributor License Agreement\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to https://cla.developers.google.com/ to see\nyour current agreements on file or to sign a new one.\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\nCode reviews\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\nGitHub Help for more\ninformation on using pull requests.\nCommunity Guidelines\nThis project follows\nGoogle's Open Source Community Guidelines.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                class\n            \n            \n                Decoder\n            \n            \n                88 %\n                (23/26)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                fail\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                lazy\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                oneOf\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                sequence\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                succeed\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                class\n            \n            \n                DecodeFailure\n            \n            \n                0 %\n                (0/28)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                class\n            \n            \n                DecodeResultBase\n            \n            \n                6 %\n                (1/16)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                class\n            \n            \n                DecodeSuccess\n            \n            \n                0 %\n                (0/28)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                variable\n            \n            \n                failure\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                variable\n            \n            \n                success\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/error/combine_errors.ts\n            \n            \n                class\n            \n            \n                CombineErrors\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/error/custom_error.ts\n            \n            \n                class\n            \n            \n                CustomError\n            \n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/error/entity.ts\n            \n            \n                variable\n            \n            \n                pluralize\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/error/expected_any_of.ts\n            \n            \n                class\n            \n            \n                ExpectedAnyOf\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/error/expected_any_of.ts\n            \n            \n                variable\n            \n            \n                concatOr\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/error/expected_at_least.ts\n            \n            \n                class\n            \n            \n                ExpectedAtLeast\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/error/expected_eoi.ts\n            \n            \n                class\n            \n            \n                ExpectedEoi\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/error/expected_field.ts\n            \n            \n                class\n            \n            \n                ExpectedField\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/error/expected_match.ts\n            \n            \n                class\n            \n            \n                ExpectedMatch\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/error/expected_none_of.ts\n            \n            \n                class\n            \n            \n                ExpectedNoneOf\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/error/expected_once.ts\n            \n            \n                class\n            \n            \n                ExpectedOnce\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/error/expected_within_range.ts\n            \n            \n                class\n            \n            \n                ExpectedWithinRange\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/error/index.ts\n            \n            \n                variable\n            \n            \n                DecodeError\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/error/pattern_mismatch.ts\n            \n            \n                class\n            \n            \n                PatternMismatch\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/error/unexpected_eoi.ts\n            \n            \n                class\n            \n            \n                UnexpectedEoi\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                char\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                decodeText\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                digit\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                digits\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                eoi\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                failureToString\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                letter\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                letters\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                lowerCaseLetter\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                lowerCaseLetters\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                make\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                \n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                match\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                matchAnyCharOf\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                matchInsensitive\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                matchNoCharOf\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                optionalWhitespace\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                regexp\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                rest\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                takeCharBetween\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                takeCharWhile\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                testChar\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                upperCaseLetter\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                upperCaseLetters\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                whitespace\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                withPosition\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/input.ts\n            \n            \n                interface\n            \n            \n                TextInput\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                anyArrayValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                anyValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                arrayValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                booleanValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                decodeValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                failureToString\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                finiteNumberValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                integerValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                isToken\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                literalValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                make\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                nullableValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                nullValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                numberValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                objectValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                optionalValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                pathToString\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                safeIntegerValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                stringValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                testObject\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                testType\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                testValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                tupleValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                undefineableValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                undefinedValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/input.ts\n            \n            \n                interface\n            \n            \n                ValueInput\n            \n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Entity   (src/.../entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/error/entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Entity\n                    \n                \n                        \n                            \n                                 CHARACTER\n                            \n                        \n                        \n                            \n                                Value : character\n                            \n                        \n                        \n                            \n                                 PREDICATE\n                            \n                        \n                        \n                            \n                                Value : predicate\n                            \n                        \n                        \n                            \n                                 LETTER\n                            \n                        \n                        \n                            \n                                Value : letter\n                            \n                        \n                        \n                            \n                                 UPPERCASE_LETTER\n                            \n                        \n                        \n                            \n                                Value : uppercase letter\n                            \n                        \n                        \n                            \n                                 LOWER_CASE_LETTER\n                            \n                        \n                        \n                            \n                                Value : lowercase letter\n                            \n                        \n                        \n                            \n                                 DIGIT\n                            \n                        \n                        \n                            \n                                Value : digit\n                            \n                        \n                        \n                            \n                                 WHITESPACE\n                            \n                        \n                        \n                            \n                                Value : whitespace\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nParTSing\nParTSing is a decoder combinator library. You can use it to build parsers/decoders from string or really any input values.\nIf you want full control over what to decode your should start from partsing/core/decoder. It provides 3 types parameters\n\nIn for the input. Remember that you will need to decode one portion of your input at the time and your input probably needs to track somehow the current position.\nOut it's the type of the value if successfully decoded.\nErr it's the type of the failure returned when the parser fails.\n\nThe library provides two additional set of utility functions to decode string values (partsing/text) and native JS values (partsing/value).\nDecoder Error\nIf you adopt the generic Decoder directly, you can define the shape of your error. The library provides a DecoderError type that should fit most decoding needs. The type of errors available are defined in partsing/error.\nDecoderError provides a simple method to debug the result of the decoding (toString) but still leaves the flexibility to give granular control on the representation of the error.\nBoth [Text Decoding] and [Value Decoding] use DecodeError.\nText Decoding\nTo be able to keep track of the position of the decoding within a string, Text Decoding uses TextInput to track both the entire text input and the current index.\nThe decodeText function simplifies the inputs and outputs of decoding text. It takes a text decoder (Decoder) and return a function that takes a string input and returns a DecodeResult (where input and error are of type string).\nIf you intend to write your own regular expressions decoder functions, consider using the y (sticky) flag. When used, there is no need to reallocate slices of the input string saving memory and CPU cycles. The sticky flag is not available for all implementations of JS.\nValue Decoding\nTo be able to keep track of the position of the decoding within any value, Value Decoding uses ValueInput to track both the input value and the current position within it using a path. path is an array of either string (object field name) or number (array/tuple index position).\nThe decodeValue function simplifies the inputs and outputs of decoding values. It takes a value decoder (Decoder) and return a function that takes any and returns a DecodeResult (where input is of type any and error is of type string).\nExample\nA simple decoder combinator to parse color values from strings into class instances.\nclass RGB {\n  constructor(readonly rgb: number) {}\n}\n\nclass Grey {\n  constructor(readonly value: number) {}\n}\n\nclass HSL {\n  constructor(readonly hue: number, readonly saturation: number, readonly lightness: number) {}\n}\n\ntype Color = RGB | Grey | HSL\n\nconst ratioDecoder = regexp(/0[.]\\d+/y).map(Number)\nconst rgbDecoder   = regexp(/[#]([0-9a-f]{6})/iy, 1)\n                       .map(v => parseInt(v, 16))\n                       .map(v => new RGB(v))\nconst greyDecoder  = matchInsensitive('grey').or(DecodeError.combine, matchInsensitive('gray'))\n                       .skipNext(optionalWhitespace)\n                       .pickNext(ratioDecoder)\n                       .map(v => new Grey(v))\nconst hslDecoder   = matchInsensitive('hsl(')\n                       .pickNext(\n                         ratioDecoder\n                           .separatedByTimes(match(','), 3)\n                           .map(v => new HSL(v[0], v[1], v[2]))\n                       )\n                       .skipNext(match(')'))\n\nconst colorTextDecoder = decodeText(\n    oneOf(\n      DecodeError.combine,\n      rgbDecoder,\n      greyDecoder,\n      hslDecoder\n    ).skipNext(eoi) // make sure that there is nothing left to decode\n  )\n\n// all results are wrapped in a DecodeSuccess\n// colorTextDecoder('#003355')          == new RGB(0x003355)\n// colorTextDecoder('gray 0.3')         == new Grey(0.3)\n// colorTextDecoder('gray0.2')          == new Grey(0.2)\n// colorTextDecoder('HSL(0.1,0.2,0.3)') == new HSL(0.1,0.2,0.3)Another scenario where decoding comes in handy is to validate, type and transform payloads from JSON requests. You can decode a value (after being parsed by JSON.parse) into one of the Color types described above.\nA few examples of valid JSON payloads:\n\"#003366\"{ \"grey\": 0.5 }{ \"kind\": \"hsl\", \"h\": 0.2, \"s\": 0.5, \"l\": 0.8 }Here is a colorValueDecoder definition that can deal with those cases:\nconst ratioValue = numberValue.test(v => v >= 0 && v  ({ input, index: 0 }), v => v)\n\n// example: { \"grey\": 0.5 }\nconst greyValue = objectValue(\n    { grey: ratioValue },\n    [] // the empty array means that no fields are optional\n  ).map(v => new Grey(v.grey))\n\n// example: { \"kind\": \"hsl\", \"h\": 0.2, \"s\": 0.5, \"l\": 0.8 }\nconst hslValue = objectValue(\n    {\n      kind: literalValue('hsl'),\n      h: ratioValue,\n      s: ratioValue,\n      l: ratioValue\n    },\n    []\n  ).map(v => new HSL(v.h, v.s, v.l))\n\nconst colorValueDecoder = decodeValue(\n    oneOf(\n      DecodeError.combine,\n      rgbValue,\n      greyValue,\n      hslValue\n    )\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\n                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.You may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nAPPENDIX: How to apply the Apache License to your work.\nTo apply the Apache License to your work, attach the following\nboilerplate notice, with the fields enclosed by brackets \"[]\"\nreplaced with your own identifying information. (Don't include\nthe brackets!)  The text should be enclosed in the appropriate\ncomment syntax for the file format. We also recommend that a\nfile or class name and description of purpose be included on the\nsame \"printed page\" as the copyright notice for easier\nidentification within third-party archives.\nCopyright [yyyy] [name of copyright owner]\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    16 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DecodeError   (src/.../index.ts)\n                        \n                        \n                            DecodeResult   (src/.../result.ts)\n                        \n                        \n                            Decoding   (src/.../decoder.ts)\n                        \n                        \n                            Error   (src/.../type_level.ts)\n                        \n                        \n                            Input   (src/.../type_level.ts)\n                        \n                        \n                            MarkOptionalFields   (src/.../type_level.ts)\n                        \n                        \n                            Output   (src/.../type_level.ts)\n                        \n                        \n                            TextDecoder   (src/.../index.ts)\n                        \n                        \n                            TupleToUnion   (src/.../type_level.ts)\n                        \n                        \n                            ValueDecoder   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/error/index.ts\n    \n        \n            \n                \n                    \n                        \n                        DecodeError\n                    \n                \n                \n                    \n                        DecodeError:     CustomError | ExpectedAnyOf | ExpectedAtLeast | ExpectedEoi | ExpectedField | ExpectedMatch | ExpectedNoneOf | ExpectedOnce | CombineErrors | ExpectedWithinRange | PatternMismatch | UnexpectedEoi\n\n                    \n                \n            \n        \n\n    src/core/result.ts\n    \n        \n            \n                \n                    \n                        \n                        DecodeResult\n                    \n                \n                \n                    \n                        DecodeResult:     DecodeSuccess | DecodeFailure\n\n                    \n                \n            \n        \n\n    src/core/decoder.ts\n    \n        \n            \n                \n                    \n                        \n                        Decoding\n                    \n                \n                    \n                        \n                            Type signature for a function that takes an input and decodes it into a\nresult object.\n\n                        \n                    \n                \n                    \n                        Decoding:     function\n\n                    \n                \n            \n        \n\n    src/core/type_level.ts\n    \n        \n            \n                \n                    \n                        \n                        Error\n                    \n                \n                    \n                        \n                            Extracts the Err type from a Decoder type.\n\n                        \n                    \n                \n                    \n                        Error:     \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        Input\n                    \n                \n                    \n                        \n                            Extracts the Int type from a Decoder type.\n\n                        \n                    \n                \n                    \n                        Input:     \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        MarkOptionalFields\n                    \n                \n                    \n                        \n                            Given a type for an object T and an array U of field names from U,\nreturn a new object type with the specified fields U marked as optional.\n\n                        \n                    \n                \n                    \n                        MarkOptionalFields:     \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        Output\n                    \n                \n                    \n                        \n                            Extracts the Out type from a Decoder type.\n\n                        \n                    \n                \n                    \n                        Output:     \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        TupleToUnion\n                    \n                \n                    \n                        \n                            This module contains type-level functions for compile-time usage.\n\n                        \n                    \n                \n                    \n                        TupleToUnion:      | never\n\n                    \n                \n            \n        \n\n    src/text/index.ts\n    \n        \n            \n                \n                    \n                        \n                        TextDecoder\n                    \n                \n                \n                    \n                        TextDecoder:     Decoder\n\n                    \n                \n            \n        \n\n    src/value/index.ts\n    \n        \n            \n                \n                    \n                        \n                        ValueDecoder\n                    \n                \n                \n                    \n                        ValueDecoder:     Decoder\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
