var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/CombineErrors.html",[0,0.201,1,1.744]],["body/classes/CombineErrors.html",[0,0.297,1,2.575,2,0.517,3,0.373,4,0.308,5,2.674,6,0.245,7,0.672,8,0.641,9,0.678,10,0.775,11,0.912,12,0.87,13,3.278,14,3.03,15,0.747,16,4.264,17,0.771,18,0.045,19,0.596,20,0.355,21,0.68,22,0.969,23,0.771,24,0.861,25,3.291,26,1.003,27,3.278,28,0.885,29,0.885,30,0.775,31,0.775,32,0.885,33,0.775,34,0.672,35,0.576,36,1.544,37,0.517,38,0.87,39,1.979,40,3.278,41,4.264,42,3.278,43,2.276,44,3.278,45,0.87,46,1.742,47,3.278,48,0.032,49,0.032]],["title/classes/CustomError.html",[0,0.201,50,1.744]],["body/classes/CustomError.html",[0,0.304,2,0.537,3,0.388,4,0.32,6,0.255,7,0.689,8,0.652,9,0.688,10,0.794,11,0.925,12,0.903,15,0.761,17,0.801,18,0.044,19,0.619,20,0.381,21,0.706,22,0.925,23,0.801,24,0.877,26,1.028,28,0.907,29,0.907,30,0.794,31,0.794,32,0.907,33,0.794,34,0.689,35,0.688,37,0.537,38,0.903,48,0.033,49,0.033,50,2.638,51,2.777,52,0.706,53,3.404,54,5.092,55,4.826,56,3.404,57,4.369,58,3.404,59,3.404]],["title/classes/DecodeResultBase.html",[0,0.201,60,2.006]],["body/classes/DecodeResultBase.html",[0,0.227,2,0.214,3,0.155,4,0.127,6,0.102,7,0.35,8,0.65,9,0.3,10,0.404,11,0.701,12,0.589,15,0.78,17,1.131,18,0.045,19,0.74,20,0.389,21,0.844,24,0.512,28,0.461,29,0.461,30,0.404,31,0.404,32,0.461,33,0.404,34,0.864,35,0.44,37,0.566,38,0.36,39,1.341,43,1.542,48,0.025,49,0.025,52,0.282,60,2.261,61,0.943,62,3.794,63,1.107,64,1.107,65,1.107,66,2.795,67,3.215,68,3.256,69,3.256,70,3.256,71,5.531,72,2.221,73,2.221,74,3.855,75,3.855,76,3.855,77,3.855,78,2.221,79,2.221,80,2.221,81,2.818,82,2.221,83,1.219,84,3.514,85,1.358,86,3.055,87,1.358,88,3.256,89,5.007,90,3.591,91,1.358,92,3.591,93,4.069,94,2.168,95,3.256,96,1.358,97,3.591,98,1.358,99,1.358,100,1.358,101,1.358,102,3.256,103,1.358,104,3.256,105,1.358,106,3.256,107,1.358,108,3.256,109,3.256,110,2.221,111,1.358,112,4.724,113,1.358,114,3.319,115,2.729,116,2.221,117,0.662,118,2.221,119,1.358,120,1.358,121,1.358,122,2.51,123,2.818,124,1.358,125,2.656,126,1.358,127,2.221,128,2.221,129,2.221,130,2.221,131,2.221,132,1.358,133,0.721,134,1.358,135,2.818,136,3.256,137,1.358,138,1.358,139,1.358,140,1.358,141,1.358,142,1.358]],["title/classes/ExpectedAnyOf.html",[0,0.201,143,1.744]],["body/classes/ExpectedAnyOf.html",[0,0.231,2,0.522,3,0.377,4,0.311,6,0.248,7,0.677,8,0.58,9,0.644,10,0.78,11,0.866,12,0.879,15,0.751,17,0.779,18,0.044,19,0.602,20,0.322,21,0.687,22,0.602,23,0.779,24,0.916,26,0.779,28,0.687,29,0.687,30,0.602,31,0.602,32,0.687,33,0.602,34,0.677,35,0.681,36,1.561,37,0.522,39,2.592,45,0.879,46,2.282,48,0.033,49,0.036,52,1.046,94,2,143,2,144,2.702,145,2.52,146,2.702,147,1.561,148,2,149,2.3,150,4.294,151,3.313,152,1.76,153,2.702,154,2,155,3.313,156,2.702,157,2.702,158,3.313,159,3.313,160,2.3,161,4.764,162,3.313,163,2.3]],["title/classes/ExpectedAtLeast.html",[0,0.201,164,1.744]],["body/classes/ExpectedAtLeast.html",[0,0.293,2,0.506,3,0.366,4,0.301,6,0.24,7,0.663,8,0.673,9,0.673,10,0.764,11,0.905,12,0.852,15,0.74,17,0.755,18,0.044,19,0.583,20,0.351,21,0.666,22,0.764,23,0.755,24,0.853,26,0.99,28,0.873,29,0.873,30,0.764,31,0.764,32,0.873,33,0.764,34,0.663,35,0.434,36,1.512,37,0.506,38,0.852,45,1.321,48,0.032,49,0.032,52,0.666,145,2.636,152,1.706,164,2.54,165,2.618,166,4.206,167,4.062,168,2.921,169,2.618,170,2.833,171,4.206,172,3.21,173,1.938,174,3.431,175,2.229]],["title/classes/ExpectedEoi.html",[0,0.201,176,1.744]],["body/classes/ExpectedEoi.html",[0,0.313,2,0.56,3,0.404,4,0.333,6,0.266,7,0.708,8,0.665,9,0.699,10,0.816,11,0.94,15,0.708,18,0.044,20,0.336,22,0.645,23,0.835,24,0.894,26,1.056,28,0.931,29,0.931,30,0.816,31,0.816,32,0.931,33,0.816,34,0.708,35,0.48,37,0.56,45,1.415,48,0.034,49,0.034,52,0.737,83,1.68,176,2.71,177,2.896,178,3.116,179,4.921,180,3.55,181,3.55]],["title/classes/ExpectedField.html",[0,0.201,182,1.744]],["body/classes/ExpectedField.html",[0,0.304,2,0.537,3,0.388,4,0.32,6,0.255,7,0.689,8,0.652,9,0.688,10,0.794,11,0.925,12,0.903,15,0.761,17,0.801,18,0.044,19,0.619,20,0.361,21,0.706,22,0.619,23,0.801,24,0.877,26,1.028,28,0.907,29,0.907,30,0.794,31,0.794,32,0.907,33,0.794,34,0.689,35,0.688,37,0.537,38,0.903,45,1.351,48,0.033,49,0.033,52,0.706,182,2.638,183,2.777,184,3.404,185,3.404,186,3.404,187,4.369,188,3.253,189,3.404,190,3.404]],["title/classes/ExpectedMatch.html",[0,0.201,191,1.744]],["body/classes/ExpectedMatch.html",[0,0.303,2,0.532,3,0.385,4,0.317,6,0.253,7,0.685,8,0.65,9,0.686,10,0.79,11,0.923,12,0.896,15,0.758,17,0.794,18,0.044,19,0.614,20,0.36,21,0.701,22,0.614,23,0.794,24,0.955,26,1.023,28,0.902,29,0.902,30,0.79,31,0.79,32,0.902,33,0.79,34,0.685,35,0.71,37,0.532,38,0.896,45,1.394,48,0.033,49,0.041,52,0.701,125,2.754,133,1.794,147,1.591,191,2.624,192,2.754,193,3.376,194,3.376,195,4.346,196,3.376]],["title/classes/ExpectedNoneOf.html",[0,0.201,197,1.744]],["body/classes/ExpectedNoneOf.html",[0,0.284,2,0.482,3,0.349,4,0.287,6,0.229,7,0.643,8,0.66,9,0.66,10,0.741,11,0.888,12,0.812,15,0.723,17,0.72,18,0.045,19,0.556,20,0.343,21,0.635,22,0.925,23,0.72,24,0.925,26,0.959,28,0.846,29,0.846,30,0.741,31,0.741,32,0.846,33,0.741,34,0.643,35,0.66,36,1.92,37,0.482,38,0.812,45,1.216,48,0.031,49,0.031,52,1.086,117,1.457,133,2.165,145,2.588,147,1.92,148,2.46,149,2.124,152,1.626,160,2.124,173,1.847,175,2.124,197,2.46,198,2.496,199,4.075,200,4.582,201,3.059,202,3.059,203,1.847,204,3.059]],["title/classes/ExpectedOnce.html",[0,0.201,205,1.744]],["body/classes/ExpectedOnce.html",[0,0.294,2,0.509,3,0.368,4,0.303,6,0.242,7,0.666,8,0.636,9,0.674,10,0.767,11,0.907,12,0.856,15,0.742,17,0.759,18,0.045,19,0.586,20,0.352,21,0.67,22,0.767,23,0.759,24,0.855,26,0.993,28,0.876,29,0.876,30,0.767,31,0.767,32,0.876,33,0.767,34,0.666,35,0.436,36,1.52,37,0.509,38,0.856,45,1.409,48,0.032,49,0.032,52,0.67,117,1.258,145,2.615,149,2.241,152,1.715,173,1.948,175,2.241,203,1.948,205,2.548,206,2.632,207,2.931,208,4.224,209,4.221,210,3.227]],["title/classes/ExpectedWithinRange.html",[0,0.201,211,1.744]],["body/classes/ExpectedWithinRange.html",[0,0.295,2,0.511,3,0.369,4,0.304,6,0.243,7,0.668,8,0.676,9,0.676,10,0.77,11,0.909,12,0.861,15,0.744,17,0.763,18,0.044,19,0.589,20,0.353,21,0.673,22,0.589,23,0.763,24,0.943,26,0.996,28,0.879,29,0.879,30,0.77,31,0.77,32,0.879,33,0.77,34,0.668,35,0.732,37,0.511,38,0.861,45,1.327,48,0.032,49,0.032,52,0.673,117,0.967,147,1.528,167,3.847,169,2.646,174,2.646,207,2.252,211,2.557,212,2.646,213,4.235,214,3.243,215,4.999,216,4.235,217,3.274,218,4.716,219,3.243,220,3.243]],["title/classes/PatternMismatch.html",[0,0.201,221,1.744]],["body/classes/PatternMismatch.html",[0,0.302,2,0.531,3,0.384,4,0.316,6,0.252,7,0.684,8,0.649,9,0.685,10,0.789,11,0.922,12,0.893,15,0.757,17,0.792,18,0.044,19,0.612,20,0.36,21,0.699,22,0.612,23,0.792,24,0.873,26,1.021,28,0.9,29,0.9,30,0.789,31,0.789,32,0.9,33,0.789,34,0.684,35,0.685,37,0.531,38,0.893,45,1.151,48,0.033,49,0.039,52,0.699,117,1.004,221,2.62,222,2.746,223,3.367,224,5.466,225,3.367,226,4.339,227,4.801,228,3.367,229,3.367]],["title/interfaces/TextInput.html",[230,1.212,231,1.744]],["body/interfaces/TextInput.html",[2,0.643,3,0.464,4,0.383,6,0.416,7,0.77,8,0.66,18,0.043,20,0.366,35,0.707,37,0.643,48,0.037,49,0.037,83,2.031,170,3.16,230,2.05,231,2.95,232,3.324]],["title/classes/UnexpectedEoi.html",[0,0.201,233,1.744]],["body/classes/UnexpectedEoi.html",[0,0.312,2,0.558,3,0.403,4,0.332,6,0.265,7,0.706,8,0.664,9,0.698,10,0.814,11,0.939,15,0.706,18,0.044,20,0.335,22,0.643,23,0.833,24,0.893,26,1.054,28,0.93,29,0.93,30,0.814,31,0.814,32,0.93,33,0.814,34,0.706,35,0.478,37,0.558,45,0.939,48,0.034,49,0.034,52,0.735,83,1.677,117,1.055,178,3.111,233,2.705,234,2.888,235,5.166,236,4.009,237,3.54,238,3.54]],["title/interfaces/ValueInput.html",[230,1.212,239,1.744]],["body/interfaces/ValueInput.html",[2,0.636,3,0.46,4,0.379,6,0.302,7,0.766,8,0.656,18,0.044,20,0.364,35,0.704,37,0.636,48,0.037,49,0.037,83,2.025,170,3.146,230,2.038,239,2.933,240,3.292,241,4.412]],["title/contributing.html",[242,1.682,243,1.463,244,1.682]],["body/contributing.html",[3,0.392,4,0.323,18,0.033,46,2.338,48,0.033,49,0.033,122,1.829,154,2.078,208,2.807,244,3.669,245,3.442,246,3.442,247,2.807,248,3.442,249,5.404,250,2.807,251,3.442,252,4.851,253,3.957,254,3.59,255,3.59,256,3.056,257,3.957,258,3.442,259,3.442,260,2.807,261,2.807,262,3.442,263,2.39,264,2.807,265,3.368,266,2.807,267,2.807,268,3.442,269,2.807,270,3.442,271,2.807,272,2.807,273,3.442,274,3.59,275,3.442,276,3.442,277,3.442,278,2.807,279,2.39,280,2.807,281,2.807,282,3.442,283,2.807,284,4.4,285,3.59,286,2.807,287,3.442,288,2.807,289,4.4,290,4.4,291,3.59,292,2.807,293,3.442,294,3.442,295,2.807,296,2.807,297,3.59,298,3.442,299,3.442]],["title/coverage.html",[300,3.198]],["body/coverage.html",[0,0.364,1,0.995,4,0.155,5,1.344,14,0.995,18,0.045,20,0.123,48,0.02,49,0.024,50,0.995,51,1.344,60,1.144,61,2.75,66,0.995,67,1.144,114,1.344,115,0.995,117,0.491,122,0.876,133,0.876,143,0.995,144,2.117,152,0.876,160,1.144,163,4.041,164,0.995,165,1.344,176,0.995,177,1.344,182,0.995,183,1.344,191,0.995,192,1.344,197,0.995,198,1.344,205,0.995,206,1.344,211,0.995,212,1.344,221,0.995,222,1.344,230,1.089,231,0.995,232,1.344,233,0.995,234,1.344,236,1.344,239,0.995,240,1.344,300,1.344,301,1.344,302,1.344,303,1.344,304,3.431,305,1.648,306,1.648,307,5.841,308,4.692,309,4.401,310,1.648,311,1.344,312,1.648,313,1.648,314,2.117,315,2.595,316,1.648,317,1.648,318,5.809,319,1.344,320,1.648,321,4.692,322,4.692,323,1.344,324,2.595,325,1.344,326,4.508,327,1.648,328,1.344,329,2.117,330,2.595,331,2.117,332,2.595,333,1.802,334,1.648,335,1.648,336,1.648,337,1.648,338,1.648,339,1.648,340,1.648,341,1.648,342,1.648,343,2.595,344,1.344,345,1.648,346,2.595,347,4.491,348,1.648,349,1.648,350,1.648,351,1.648,352,1.344,353,1.648,354,1.648,355,1.648,356,1.648,357,1.648,358,1.648,359,1.648,360,1.344,361,1.648,362,1.648,363,1.648,364,1.648,365,1.648,366,1.648,367,1.648,368,1.648,369,1.648,370,1.648,371,1.648,372,1.648]],["title/miscellaneous/enumerations.html",[373,1.463,374,2.829]],["body/miscellaneous/enumerations.html",[6,0.316,9,0.569,18,0.038,48,0.038,49,0.038,83,1.577,117,1.256,145,2.501,207,2.926,279,2.926,323,3.437,329,3.437,331,3.437,344,3.437,373,2.544,374,4.066,375,4.214,376,4.214,377,3.437,378,4.214,379,3.437,380,4.214,381,4.214,382,4.214]],["title/index.html",[6,0.181,242,1.682,243,1.463]],["body/index.html",[0,0.251,6,0.238,8,0.346,9,0.429,10,0.294,11,0.294,14,0.978,15,0.404,17,0.381,18,0.044,19,0.294,20,0.365,21,0.336,22,0.759,24,0.926,25,1.778,31,0.294,33,0.294,34,0.619,35,0.631,38,0.842,39,2.817,43,2.204,46,1.36,48,0.027,49,0.019,62,1.778,64,1.322,66,0.978,83,1.883,84,1.125,86,0.978,94,2.521,115,0.978,117,1.655,122,2.479,133,0.861,147,0.763,148,1.546,153,1.322,154,0.978,163,1.778,168,1.125,170,2.521,188,1.546,203,0.978,217,2.204,231,0.978,239,0.978,241,2.088,243,0.978,250,1.322,253,2.942,263,1.125,265,3.036,269,1.322,272,2.589,280,1.322,291,1.322,311,2.088,314,2.088,328,2.088,333,1.125,352,2.088,360,2.088,383,2.56,384,3.174,385,1.62,386,1.62,387,1.62,388,1.62,389,1.62,390,2.088,391,1.62,392,2.942,393,1.62,394,1.62,395,3.204,396,1.62,397,3.928,398,2.56,399,1.62,400,1.62,401,1.322,402,1.62,403,1.62,404,1.62,405,2.56,406,1.62,407,1.62,408,1.62,409,1.62,410,2.56,411,1.322,412,2.088,413,1.62,414,2.56,415,1.62,416,1.62,417,1.62,418,1.62,419,3.174,420,3.406,421,2.56,422,1.62,423,2.56,424,2.088,425,2.942,426,1.62,427,1.322,428,1.62,429,1.322,430,1.62,431,1.62,432,2.56,433,2.56,434,1.62,435,1.62,436,1.62,437,1.62,438,1.62,439,1.62,440,1.62,441,1.125,442,1.62,443,2.942,444,2.56,445,3.174,446,1.62,447,3.174,448,3.928,449,3.607,450,1.62,451,1.62,452,1.62,453,2.56,454,1.62,455,2.56,456,1.62,457,1.62,458,1.62,459,4.175,460,1.62,461,1.322,462,1.62,463,2.56,464,1.62,465,1.62,466,1.62,467,1.62,468,1.62,469,2.56,470,1.62,471,1.62,472,1.62,473,1.62,474,1.62,475,1.62,476,1.62,477,1.62,478,2.56,479,1.62,480,1.62,481,1.322,482,1.62,483,1.62,484,1.62,485,1.62,486,1.62,487,1.62,488,1.62,489,1.62,490,1.62,491,1.62,492,1.62,493,1.62,494,1.62,495,1.62,496,2.56,497,1.322,498,2.56,499,2.56,500,1.62,501,1.62,502,1.322,503,1.62,504,3.607,505,3.174,506,2.56,507,3.174,508,2.56,509,1.62,510,2.56,511,1.322,512,1.62,513,1.322,514,1.62,515,3.928,516,1.62,517,3.607,518,2.56,519,1.62,520,1.322,521,1.62,522,2.56,523,1.62,524,1.62,525,1.62,526,1.62,527,1.62]],["title/license.html",[242,1.682,243,1.463,256,1.682]],["body/license.html",[0,0.074,3,0.498,4,0.41,9,0.244,15,0.167,18,0.018,19,0.569,20,0.08,25,0.738,30,0.193,36,0.5,46,0.564,48,0.021,49,0.014,52,0.22,63,0.866,65,0.866,86,0.641,115,0.641,145,2.008,146,3.646,147,0.5,154,1.092,156,1.476,157,0.866,173,0.641,178,0.738,188,0.641,203,0.641,217,2.659,230,0.446,244,2.659,247,2.276,254,1.928,255,3.375,256,3.743,257,0.866,260,0.866,261,3.646,263,0.738,264,2.276,265,2.96,266,1.928,267,2.276,271,0.866,274,2.554,278,0.866,279,0.738,281,0.866,283,1.928,285,0.866,286,3.78,288,2.276,292,2.966,295,0.866,296,1.476,297,1.928,301,2.276,302,0.866,303,0.866,319,0.866,333,1.256,377,0.866,379,0.866,390,2.554,392,3.124,395,0.866,401,2.779,411,0.866,412,0.866,420,2.276,427,2.276,429,1.476,441,2.366,443,0.866,481,0.866,497,0.866,502,0.866,511,1.928,513,1.928,520,3.566,528,2.791,529,2.363,530,2.363,531,1.062,532,1.062,533,1.062,534,3.995,535,2.791,536,4.469,537,4.634,538,1.809,539,1.062,540,1.062,541,4.137,542,3.407,543,1.809,544,3.829,545,3.13,546,2.363,547,3.995,548,1.062,549,1.062,550,2.791,551,1.809,552,1.809,553,1.809,554,4.828,555,2.791,556,1.809,557,3.407,558,1.062,559,1.809,560,1.062,561,1.062,562,1.062,563,1.062,564,1.062,565,1.062,566,2.363,567,1.809,568,4.469,569,1.062,570,3.407,571,3.636,572,1.809,573,1.062,574,1.062,575,1.062,576,0.866,577,1.062,578,1.062,579,5.599,580,2.363,581,1.809,582,1.062,583,4.769,584,1.809,585,1.809,586,1.062,587,4.881,588,1.062,589,1.062,590,1.062,591,1.062,592,1.062,593,1.809,594,1.809,595,2.363,596,1.062,597,1.062,598,1.062,599,2.791,600,1.809,601,1.809,602,3.13,603,1.809,604,1.062,605,1.062,606,1.062,607,1.062,608,1.809,609,1.062,610,1.062,611,1.062,612,2.363,613,1.062,614,1.476,615,1.062,616,1.062,617,1.062,618,1.809,619,1.809,620,2.791,621,1.809,622,1.809,623,1.809,624,2.363,625,1.809,626,2.363,627,1.809,628,1.809,629,1.809,630,2.363,631,1.062,632,1.809,633,1.809,634,1.062,635,1.062,636,3.636,637,2.363,638,2.791,639,1.809,640,1.809,641,1.062,642,2.363,643,2.363,644,1.062,645,2.363,646,2.363,647,1.062,648,1.062,649,1.809,650,1.809,651,1.062,652,1.062,653,1.062,654,1.062,655,1.062,656,1.062,657,1.062,658,1.062,659,2.791,660,1.062,661,3.13,662,1.062,663,1.062,664,1.062,665,2.791,666,1.062,667,1.062,668,1.062,669,1.062,670,2.363,671,2.791,672,1.809,673,1.062,674,0.866,675,1.062,676,1.062,677,1.062,678,1.809,679,1.809,680,1.062,681,1.809,682,1.809,683,1.062,684,1.062,685,1.062,686,1.062,687,1.062,688,2.791,689,1.062,690,1.062,691,1.062,692,1.062,693,1.062,694,1.062,695,1.062,696,1.062,697,1.062,698,1.809,699,1.062,700,1.062,701,3.636,702,2.363,703,2.363,704,2.791,705,1.809,706,1.809,707,1.062,708,1.062,709,1.062,710,1.809,711,1.809,712,1.062,713,1.809,714,1.062,715,1.062,716,1.062,717,3.13,718,1.062,719,1.062,720,1.062,721,1.809,722,1.062,723,1.062,724,1.062,725,3.13,726,1.062,727,1.062,728,1.062,729,1.062,730,1.062,731,1.809,732,1.062,733,1.062,734,1.062,735,1.062,736,1.062,737,1.062,738,1.062,739,1.062,740,1.062,741,1.062,742,1.809,743,1.062,744,1.062,745,1.062,746,1.062,747,1.062,748,1.062,749,1.062,750,1.062,751,1.062,752,1.062,753,1.809,754,1.809,755,1.062,756,1.062,757,1.062,758,1.062,759,1.062,760,1.062,761,1.062,762,1.062,763,1.062,764,1.062,765,1.062,766,1.062,767,1.062,768,1.062,769,1.062,770,1.062,771,1.062,772,1.062]],["title/modules.html",[773,2.722]],["body/modules.html",[18,0.04,48,0.04,49,0.04,773,3.174]],["title/overview.html",[774,3.198]],["body/overview.html",[0,0.314,18,0.039,48,0.039,49,0.039,230,1.89,461,3.675,774,3.675,775,4.505]],["title/miscellaneous/typealiases.html",[373,1.463,776,3.468]],["body/miscellaneous/typealiases.html",[1,1.87,6,0.232,14,2.784,18,0.044,19,0.563,20,0.42,21,0.643,22,0.838,34,0.488,48,0.035,49,0.031,50,1.87,61,2.151,62,3.201,66,1.87,67,2.151,83,1.838,84,2.151,86,1.87,94,2.784,117,1.642,122,1.646,143,1.87,148,1.87,164,1.87,168,2.151,176,1.87,182,1.87,188,2.481,191,1.87,197,1.87,205,1.87,211,1.87,221,1.87,233,1.87,304,2.527,325,2.527,326,2.527,347,2.527,373,1.87,424,3.761,425,2.527,441,3.201,576,2.527,614,2.527,674,2.527,773,2.151,777,3.098,778,4.61,779,3.098,780,3.098,781,5.109,782,4.61,783,4.61,784,4.61,785,4.61,786,3.098,787,3.098,788,4.61,789,3.098,790,3.098,791,3.098,792,4.61,793,3.098,794,3.098,795,3.098,796,3.098]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":163,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"coverage.html":{},"index.html":{}}}],["0.2",{"_index":506,"title":{},"body":{"index.html":{}}}],["0.3",{"_index":487,"title":{},"body":{"index.html":{}}}],["0.5",{"_index":504,"title":{},"body":{"index.html":{}}}],["0.8",{"_index":508,"title":{},"body":{"index.html":{}}}],["0/1",{"_index":318,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":346,"title":{},"body":{"coverage.html":{}}}],["003366",{"_index":503,"title":{},"body":{"index.html":{}}}],["1",{"_index":203,"title":{},"body":{"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"index.html":{},"license.html":{}}}],["1/1",{"_index":309,"title":{},"body":{"coverage.html":{}}}],["1/28",{"_index":315,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":308,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":316,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":461,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2",{"_index":775,"title":{},"body":{"overview.html":{}}}],["2.0",{"_index":530,"title":{},"body":{"license.html":{}}}],["2/16",{"_index":317,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":320,"title":{},"body":{"coverage.html":{}}}],["2004",{"_index":532,"title":{},"body":{"license.html":{}}}],["25/26",{"_index":306,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":314,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["3/3",{"_index":324,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":322,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":319,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["75",{"_index":321,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":540,"title":{},"body":{"license.html":{}}}],["96",{"_index":305,"title":{},"body":{"coverage.html":{}}}],["9a",{"_index":457,"title":{},"body":{"index.html":{}}}],["_e",{"_index":68,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["_i",{"_index":69,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["_o",{"_index":70,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["abov",{"_index":502,"title":{},"body":{"index.html":{},"license.html":{}}}],["abstract",{"_index":71,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["accept",{"_index":247,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["accompani",{"_index":258,"title":{},"body":{"contributing.html":{}}}],["act",{"_index":546,"title":{},"body":{"license.html":{}}}],["add",{"_index":682,"title":{},"body":{"license.html":{}}}],["addendum",{"_index":684,"title":{},"body":{"license.html":{}}}],["addit",{"_index":401,"title":{},"body":{"index.html":{},"license.html":{}}}],["adopt",{"_index":407,"title":{},"body":{"index.html":{}}}],["advis",{"_index":737,"title":{},"body":{"license.html":{}}}],["again",{"_index":282,"title":{},"body":{"contributing.html":{}}}],["against",{"_index":650,"title":{},"body":{"license.html":{}}}],["agre",{"_index":704,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":257,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["alias",{"_index":777,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alleg",{"_index":654,"title":{},"body":{"license.html":{}}}],["allow",{"_index":53,"title":{},"body":{"classes/CustomError.html":{}}}],["alon",{"_index":647,"title":{},"body":{"license.html":{}}}],["along",{"_index":676,"title":{},"body":{"license.html":{}}}],["alongsid",{"_index":683,"title":{},"body":{"license.html":{}}}],["alreadi",{"_index":277,"title":{},"body":{"contributing.html":{}}}],["and(b",{"_index":664,"title":{},"body":{"license.html":{}}}],["and(c",{"_index":669,"title":{},"body":{"license.html":{}}}],["and(d",{"_index":673,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":743,"title":{},"body":{"license.html":{}}}],["annot",{"_index":591,"title":{},"body":{"license.html":{}}}],["anyarrayvalu",{"_index":348,"title":{},"body":{"coverage.html":{}}}],["anyvalu",{"_index":349,"title":{},"body":{"coverage.html":{}}}],["apach",{"_index":528,"title":{},"body":{"license.html":{}}}],["appear",{"_index":680,"title":{},"body":{"license.html":{}}}],["appendix",{"_index":585,"title":{},"body":{"license.html":{}}}],["appli",{"_index":642,"title":{},"body":{"license.html":{}}}],["applic",{"_index":702,"title":{},"body":{"license.html":{}}}],["appropri",{"_index":713,"title":{},"body":{"license.html":{}}}],["archiv",{"_index":765,"title":{},"body":{"license.html":{}}}],["aris",{"_index":729,"title":{},"body":{"license.html":{}}}],["array",{"_index":148,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedNoneOf.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["array/tupl",{"_index":442,"title":{},"body":{"index.html":{}}}],["arrayvalu",{"_index":350,"title":{},"body":{"coverage.html":{}}}],["assert",{"_index":751,"title":{},"body":{"license.html":{}}}],["associ",{"_index":716,"title":{},"body":{"license.html":{}}}],["assum",{"_index":714,"title":{},"body":{"license.html":{}}}],["attach",{"_index":584,"title":{},"body":{"license.html":{}}}],["attribut",{"_index":671,"title":{},"body":{"license.html":{}}}],["author",{"_index":543,"title":{},"body":{"license.html":{}}}],["authorship",{"_index":580,"title":{},"body":{"license.html":{}}}],["avail",{"_index":412,"title":{},"body":{"index.html":{},"license.html":{}}}],["base",{"_index":588,"title":{},"body":{"license.html":{}}}],["basi",{"_index":705,"title":{},"body":{"license.html":{}}}],["be",{"_index":500,"title":{},"body":{"index.html":{}}}],["behalf",{"_index":602,"title":{},"body":{"license.html":{}}}],["below",{"_index":586,"title":{},"body":{"license.html":{}}}],["benefici",{"_index":565,"title":{},"body":{"license.html":{}}}],["between",{"_index":213,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["bind",{"_index":598,"title":{},"body":{"license.html":{}}}],["boilerpl",{"_index":752,"title":{},"body":{"license.html":{}}}],["booleanvalu",{"_index":351,"title":{},"body":{"coverage.html":{}}}],["both",{"_index":419,"title":{},"body":{"index.html":{}}}],["bracket",{"_index":754,"title":{},"body":{"license.html":{}}}],["build",{"_index":385,"title":{},"body":{"index.html":{}}}],["captur",{"_index":207,"title":{},"body":{"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"miscellaneous/enumerations.html":{}}}],["carri",{"_index":666,"title":{},"body":{"license.html":{}}}],["case",{"_index":514,"title":{},"body":{"index.html":{}}}],["caus",{"_index":552,"title":{},"body":{"license.html":{}}}],["chang",{"_index":668,"title":{},"body":{"license.html":{}}}],["char",{"_index":327,"title":{},"body":{"coverage.html":{}}}],["charact",{"_index":379,"title":{},"body":{"miscellaneous/enumerations.html":{},"license.html":{}}}],["charg",{"_index":626,"title":{},"body":{"license.html":{}}}],["choos",{"_index":738,"title":{},"body":{"license.html":{}}}],["cla",{"_index":275,"title":{},"body":{"contributing.html":{}}}],["claim",{"_index":643,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"coverage.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["code",{"_index":283,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["color",{"_index":445,"title":{},"body":{"index.html":{}}}],["colortextdecod",{"_index":477,"title":{},"body":{"index.html":{}}}],["colortextdecoder('#003355",{"_index":484,"title":{},"body":{"index.html":{}}}],["colortextdecoder('gray",{"_index":486,"title":{},"body":{"index.html":{}}}],["colortextdecoder('gray0.2",{"_index":489,"title":{},"body":{"index.html":{}}}],["colortextdecoder('hsl(0.1,0.2,0.3",{"_index":491,"title":{},"body":{"index.html":{}}}],["colorvaluedecod",{"_index":510,"title":{},"body":{"index.html":{}}}],["combin",{"_index":25,"title":{},"body":{"classes/CombineErrors.html":{},"index.html":{},"license.html":{}}}],["combineerror",{"_index":1,"title":{"classes/CombineErrors.html":{}},"body":{"classes/CombineErrors.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["come",{"_index":494,"title":{},"body":{"index.html":{}}}],["comma",{"_index":155,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["comment",{"_index":756,"title":{},"body":{"license.html":{}}}],["commerci",{"_index":736,"title":{},"body":{"license.html":{}}}],["common",{"_index":548,"title":{},"body":{"license.html":{}}}],["commun",{"_index":297,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["compil",{"_index":576,"title":{},"body":{"license.html":{},"miscellaneous/typealiases.html":{}}}],["compli",{"_index":687,"title":{},"body":{"license.html":{}}}],["complianc",{"_index":767,"title":{},"body":{"license.html":{}}}],["comput",{"_index":734,"title":{},"body":{"license.html":{}}}],["concat",{"_index":160,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedNoneOf.html":{},"coverage.html":{}}}],["concaten",{"_index":159,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["concator(this.descript",{"_index":204,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["condit",{"_index":146,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"license.html":{}}}],["configur",{"_index":573,"title":{},"body":{"license.html":{}}}],["consequenti",{"_index":728,"title":{},"body":{"license.html":{}}}],["consid",{"_index":430,"title":{},"body":{"index.html":{}}}],["consist",{"_index":745,"title":{},"body":{"license.html":{}}}],["conspicu",{"_index":613,"title":{},"body":{"license.html":{}}}],["const",{"_index":39,"title":{},"body":{"classes/CombineErrors.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"index.html":{}}}],["constitut",{"_index":655,"title":{},"body":{"license.html":{}}}],["constru",{"_index":685,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":12,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{}}}],["constructor(ent",{"_index":149,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{}}}],["constructor(error",{"_index":13,"title":{},"body":{"classes/CombineErrors.html":{}}}],["constructor(field",{"_index":186,"title":{},"body":{"classes/ExpectedField.html":{}}}],["constructor(input",{"_index":81,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["constructor(messag",{"_index":56,"title":{},"body":{"classes/CustomError.html":{}}}],["constructor(min",{"_index":169,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{}}}],["constructor(pattern",{"_index":225,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["constructor(readonli",{"_index":38,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"index.html":{}}}],["constructor(valu",{"_index":194,"title":{},"body":{"classes/ExpectedMatch.html":{}}}],["consult",{"_index":293,"title":{},"body":{"contributing.html":{}}}],["contain",{"_index":674,"title":{},"body":{"license.html":{},"miscellaneous/typealiases.html":{}}}],["content",{"_index":681,"title":{},"body":{"license.html":{}}}],["contract",{"_index":556,"title":{},"body":{"license.html":{}}}],["contribut",{"_index":244,"title":{"contributing.html":{}},"body":{"contributing.html":{},"license.html":{}}}],["contribution(",{"_index":646,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":255,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["contributori",{"_index":656,"title":{},"body":{"license.html":{}}}],["control",{"_index":390,"title":{},"body":{"index.html":{},"license.html":{}}}],["convers",{"_index":577,"title":{},"body":{"license.html":{}}}],["copi",{"_index":659,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":261,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["counterclaim",{"_index":652,"title":{},"body":{"license.html":{}}}],["coverag",{"_index":300,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cpu",{"_index":438,"title":{},"body":{"index.html":{}}}],["cross",{"_index":651,"title":{},"body":{"license.html":{}}}],["current",{"_index":272,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["custom",{"_index":54,"title":{},"body":{"classes/CustomError.html":{}}}],["customari",{"_index":699,"title":{},"body":{"license.html":{}}}],["customerror",{"_index":50,"title":{"classes/CustomError.html":{}},"body":{"classes/CustomError.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["cycl",{"_index":439,"title":{},"body":{"index.html":{}}}],["damag",{"_index":725,"title":{},"body":{"license.html":{}}}],["date",{"_index":658,"title":{},"body":{"license.html":{}}}],["deal",{"_index":512,"title":{},"body":{"index.html":{}}}],["debug",{"_index":33,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{}}}],["decod",{"_index":117,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["decodeerror",{"_index":14,"title":{},"body":{"classes/CombineErrors.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["decodeerror.combin",{"_index":478,"title":{},"body":{"index.html":{}}}],["decodefailur",{"_index":67,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["decodefailure(f(this.input",{"_index":140,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodefailure(input",{"_index":142,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodefailure(this.input",{"_index":135,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodererror",{"_index":410,"title":{},"body":{"index.html":{}}}],["decoderesult",{"_index":62,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["decoderesultbas",{"_index":60,"title":{"classes/DecodeResultBase.html":{}},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{}}}],["decodesuccess",{"_index":66,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["decodesuccess(f(this.input",{"_index":126,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodesuccess(input",{"_index":141,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodesuccess(this.input",{"_index":123,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodetext",{"_index":328,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["decodevalu",{"_index":352,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["default",{"_index":23,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}}}],["defend",{"_index":747,"title":{},"body":{"license.html":{}}}],["defin",{"_index":15,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{},"license.html":{}}}],["definit",{"_index":511,"title":{},"body":{"index.html":{},"license.html":{}}}],["deliber",{"_index":722,"title":{},"body":{"license.html":{}}}],["deriv",{"_index":587,"title":{},"body":{"license.html":{}}}],["describ",{"_index":147,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedWithinRange.html":{},"index.html":{},"license.html":{}}}],["descript",{"_index":52,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"license.html":{}}}],["design",{"_index":615,"title":{},"body":{"license.html":{}}}],["determin",{"_index":712,"title":{},"body":{"license.html":{}}}],["differ",{"_index":279,"title":{},"body":{"contributing.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["digit",{"_index":329,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["direct",{"_index":550,"title":{},"body":{"license.html":{}}}],["directli",{"_index":408,"title":{},"body":{"index.html":{}}}],["disclaim",{"_index":700,"title":{},"body":{"license.html":{}}}],["discrimin",{"_index":26,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}}}],["discuss",{"_index":610,"title":{},"body":{"license.html":{}}}],["display",{"_index":633,"title":{},"body":{"license.html":{}}}],["distribut",{"_index":536,"title":{},"body":{"license.html":{}}}],["document",{"_index":301,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["don't",{"_index":281,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["e.tostr",{"_index":42,"title":{},"body":{"classes/CombineErrors.html":{}}}],["each",{"_index":620,"title":{},"body":{"license.html":{}}}],["easier",{"_index":763,"title":{},"body":{"license.html":{}}}],["editori",{"_index":589,"title":{},"body":{"license.html":{}}}],["elabor",{"_index":592,"title":{},"body":{"license.html":{}}}],["electron",{"_index":603,"title":{},"body":{"license.html":{}}}],["employ",{"_index":259,"title":{},"body":{"contributing.html":{}}}],["empti",{"_index":519,"title":{},"body":{"index.html":{}}}],["enclos",{"_index":753,"title":{},"body":{"license.html":{}}}],["end",{"_index":178,"title":{},"body":{"classes/ExpectedEoi.html":{},"classes/UnexpectedEoi.html":{},"license.html":{}}}],["entir",{"_index":422,"title":{},"body":{"index.html":{}}}],["entiti",{"_index":145,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["entitytostr",{"_index":152,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"coverage.html":{}}}],["entitytostring(this.ent",{"_index":175,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{}}}],["enumer",{"_index":374,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["eoi",{"_index":236,"title":{},"body":{"classes/UnexpectedEoi.html":{},"coverage.html":{}}}],["eot",{"_index":179,"title":{},"body":{"classes/ExpectedEoi.html":{}}}],["err",{"_index":84,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["err2",{"_index":97,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["error",{"_index":22,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["error(\"can't",{"_index":130,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["even",{"_index":278,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["event",{"_index":718,"title":{},"body":{"license.html":{}}}],["exact",{"_index":193,"title":{},"body":{"classes/ExpectedMatch.html":{}}}],["exampl",{"_index":443,"title":{},"body":{"index.html":{},"license.html":{}}}],["except",{"_index":637,"title":{},"body":{"license.html":{}}}],["exclud",{"_index":612,"title":{},"body":{"license.html":{}}}],["exclus",{"_index":625,"title":{},"body":{"license.html":{}}}],["execut",{"_index":693,"title":{},"body":{"license.html":{}}}],["exercis",{"_index":567,"title":{},"body":{"license.html":{}}}],["expect",{"_index":45,"title":{},"body":{"classes/CombineErrors.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}}}],["expected_any_of",{"_index":202,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["expectedanyof",{"_index":143,"title":{"classes/ExpectedAnyOf.html":{}},"body":{"classes/ExpectedAnyOf.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedatleast",{"_index":164,"title":{"classes/ExpectedAtLeast.html":{}},"body":{"classes/ExpectedAtLeast.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedeoi",{"_index":176,"title":{"classes/ExpectedEoi.html":{}},"body":{"classes/ExpectedEoi.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedfield",{"_index":182,"title":{"classes/ExpectedField.html":{}},"body":{"classes/ExpectedField.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedmatch",{"_index":191,"title":{"classes/ExpectedMatch.html":{}},"body":{"classes/ExpectedMatch.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectednoneof",{"_index":197,"title":{"classes/ExpectedNoneOf.html":{}},"body":{"classes/ExpectedNoneOf.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedonc",{"_index":205,"title":{"classes/ExpectedOnce.html":{}},"body":{"classes/ExpectedOnce.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedwithinrang",{"_index":211,"title":{"classes/ExpectedWithinRange.html":{}},"body":{"classes/ExpectedWithinRange.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["explicitli",{"_index":689,"title":{},"body":{"license.html":{}}}],["export",{"_index":37,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{}}}],["express",{"_index":429,"title":{},"body":{"index.html":{},"license.html":{}}}],["extend",{"_index":116,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["extract",{"_index":788,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["f",{"_index":93,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["f(e",{"_index":139,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["f(this.failur",{"_index":137,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["f(this.valu",{"_index":120,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["f(v",{"_index":124,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["f]{6})/iy",{"_index":458,"title":{},"body":{"index.html":{}}}],["fail",{"_index":133,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"coverage.html":{},"index.html":{}}}],["failur",{"_index":115,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["failuretostr",{"_index":330,"title":{},"body":{"coverage.html":{}}}],["fals",{"_index":128,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["fee",{"_index":739,"title":{},"body":{"license.html":{}}}],["few",{"_index":250,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["fieeld",{"_index":185,"title":{},"body":{"classes/ExpectedField.html":{}}}],["field",{"_index":188,"title":{},"body":{"classes/ExpectedField.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["fifti",{"_index":560,"title":{},"body":{"license.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"coverage.html":{},"license.html":{}}}],["finitenumbervalu",{"_index":353,"title":{},"body":{"coverage.html":{}}}],["fit",{"_index":411,"title":{},"body":{"index.html":{},"license.html":{}}}],["flag",{"_index":433,"title":{},"body":{"index.html":{}}}],["flatmap",{"_index":72,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["flatmap(f",{"_index":88,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["flatmaperror",{"_index":73,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["flatmaperror(f",{"_index":95,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["flexibl",{"_index":417,"title":{},"body":{"index.html":{}}}],["follow",{"_index":254,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["form",{"_index":568,"title":{},"body":{"license.html":{}}}],["format",{"_index":758,"title":{},"body":{"license.html":{}}}],["found",{"_index":378,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["free",{"_index":628,"title":{},"body":{"license.html":{}}}],["full",{"_index":389,"title":{},"body":{"index.html":{}}}],["function",{"_index":94,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["gener",{"_index":154,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"contributing.html":{},"index.html":{},"license.html":{}}}],["get",{"_index":242,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["getunsafefailur",{"_index":74,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["getunsafesuccess",{"_index":75,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["github",{"_index":289,"title":{},"body":{"contributing.html":{}}}],["give",{"_index":263,"title":{},"body":{"contributing.html":{},"index.html":{},"license.html":{}}}],["given",{"_index":790,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["goodwil",{"_index":732,"title":{},"body":{"license.html":{}}}],["google'",{"_index":298,"title":{},"body":{"contributing.html":{}}}],["govern",{"_index":772,"title":{},"body":{"license.html":{}}}],["grant",{"_index":544,"title":{},"body":{"license.html":{}}}],["granular",{"_index":418,"title":{},"body":{"index.html":{}}}],["grey",{"_index":448,"title":{},"body":{"index.html":{}}}],["grey(0.2",{"_index":490,"title":{},"body":{"index.html":{}}}],["grey(0.3",{"_index":488,"title":{},"body":{"index.html":{}}}],["grey(v",{"_index":468,"title":{},"body":{"index.html":{}}}],["grey(v.grey",{"_index":521,"title":{},"body":{"index.html":{}}}],["greydecod",{"_index":463,"title":{},"body":{"index.html":{}}}],["greyvalu",{"_index":518,"title":{},"body":{"index.html":{}}}],["grossli",{"_index":723,"title":{},"body":{"license.html":{}}}],["guidelin",{"_index":252,"title":{},"body":{"contributing.html":{}}}],["h",{"_index":505,"title":{},"body":{"index.html":{}}}],["handi",{"_index":495,"title":{},"body":{"index.html":{}}}],["harmless",{"_index":749,"title":{},"body":{"license.html":{}}}],["head",{"_index":268,"title":{},"body":{"contributing.html":{}}}],["help",{"_index":294,"title":{},"body":{"contributing.html":{}}}],["here",{"_index":509,"title":{},"body":{"index.html":{}}}],["herebi",{"_index":621,"title":{},"body":{"license.html":{}}}],["herein",{"_index":691,"title":{},"body":{"license.html":{}}}],["hold",{"_index":748,"title":{},"body":{"license.html":{}}}],["hsl",{"_index":449,"title":{},"body":{"index.html":{}}}],["hsl(0.1,0.2,0.3)anoth",{"_index":492,"title":{},"body":{"index.html":{}}}],["hsl(v.h",{"_index":524,"title":{},"body":{"index.html":{}}}],["hsl(v[0",{"_index":473,"title":{},"body":{"index.html":{}}}],["hsldecod",{"_index":469,"title":{},"body":{"index.html":{}}}],["hslvalu",{"_index":522,"title":{},"body":{"index.html":{}}}],["http://www.apache.org/licens",{"_index":533,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/licens",{"_index":769,"title":{},"body":{"license.html":{}}}],["https://cla.developers.google.com",{"_index":270,"title":{},"body":{"contributing.html":{}}}],["hue",{"_index":450,"title":{},"body":{"index.html":{}}}],["human",{"_index":29,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}}}],["identif",{"_index":764,"title":{},"body":{"license.html":{}}}],["identifi",{"_index":302,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["ii",{"_index":558,"title":{},"body":{"license.html":{}}}],["iii",{"_index":564,"title":{},"body":{"license.html":{}}}],["implement",{"_index":440,"title":{},"body":{"index.html":{}}}],["impli",{"_index":706,"title":{},"body":{"license.html":{}}}],["import",{"_index":36,"title":{},"body":{"classes/CombineErrors.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"license.html":{}}}],["improv",{"_index":611,"title":{},"body":{"license.html":{}}}],["in2",{"_index":108,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["inabl",{"_index":730,"title":{},"body":{"license.html":{}}}],["incident",{"_index":727,"title":{},"body":{"license.html":{}}}],["includ",{"_index":286,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["inclus",{"_index":601,"title":{},"body":{"license.html":{}}}],["incorpor",{"_index":618,"title":{},"body":{"license.html":{}}}],["incur",{"_index":750,"title":{},"body":{"license.html":{}}}],["indemn",{"_index":741,"title":{},"body":{"license.html":{}}}],["indemnifi",{"_index":746,"title":{},"body":{"license.html":{}}}],["index",{"_index":6,"title":{"index.html":{}},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["indic",{"_index":582,"title":{},"body":{"license.html":{}}}],["indirect",{"_index":551,"title":{},"body":{"license.html":{}}}],["individu",{"_index":566,"title":{},"body":{"license.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{}}}],["inform",{"_index":296,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["infring",{"_index":645,"title":{},"body":{"license.html":{}}}],["input",{"_index":83,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedEoi.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["instanc",{"_index":446,"title":{},"body":{"index.html":{}}}],["institut",{"_index":648,"title":{},"body":{"license.html":{}}}],["int",{"_index":789,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["integervalu",{"_index":354,"title":{},"body":{"coverage.html":{}}}],["intend",{"_index":426,"title":{},"body":{"index.html":{}}}],["intention",{"_index":600,"title":{},"body":{"license.html":{}}}],["interfac",{"_index":230,"title":{"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{}},"body":{"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{},"coverage.html":{},"license.html":{},"overview.html":{}}}],["irrevoc",{"_index":629,"title":{},"body":{"license.html":{}}}],["isfailur",{"_index":76,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["issu",{"_index":609,"title":{},"body":{"license.html":{}}}],["issuccess",{"_index":77,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["istoken",{"_index":355,"title":{},"body":{"coverage.html":{}}}],["it'",{"_index":398,"title":{},"body":{"index.html":{}}}],["januari",{"_index":531,"title":{},"body":{"license.html":{}}}],["join('\\n",{"_index":44,"title":{},"body":{"classes/CombineErrors.html":{}}}],["js",{"_index":405,"title":{},"body":{"index.html":{}}}],["json",{"_index":499,"title":{},"body":{"index.html":{}}}],["json.pars",{"_index":501,"title":{},"body":{"index.html":{}}}],["json.stringify(this.input",{"_index":131,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["keep",{"_index":421,"title":{},"body":{"index.html":{}}}],["kind",{"_index":9,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{}}}],["l",{"_index":507,"title":{},"body":{"index.html":{}}}],["languag",{"_index":771,"title":{},"body":{"license.html":{}}}],["last",{"_index":158,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["law",{"_index":703,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":653,"title":{},"body":{"license.html":{}}}],["lazi",{"_index":310,"title":{},"body":{"coverage.html":{}}}],["leav",{"_index":416,"title":{},"body":{"index.html":{}}}],["left",{"_index":482,"title":{},"body":{"index.html":{}}}],["legal",{"_index":545,"title":{},"body":{"license.html":{}}}],["length",{"_index":161,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["letter",{"_index":331,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["level",{"_index":794,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["liabil",{"_index":717,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":724,"title":{},"body":{"license.html":{}}}],["librari",{"_index":384,"title":{},"body":{"index.html":{}}}],["licens",{"_index":256,"title":{"license.html":{}},"body":{"contributing.html":{},"license.html":{}}}],["license.y",{"_index":686,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":541,"title":{},"body":{"license.html":{}}}],["light",{"_index":452,"title":{},"body":{"index.html":{}}}],["limit",{"_index":571,"title":{},"body":{"license.html":{}}}],["link",{"_index":173,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"license.html":{}}}],["list",{"_index":157,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"license.html":{}}}],["liter",{"_index":110,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["literalvalu",{"_index":356,"title":{},"body":{"coverage.html":{}}}],["literalvalue('hsl",{"_index":523,"title":{},"body":{"index.html":{}}}],["litig",{"_index":649,"title":{},"body":{"license.html":{}}}],["loss",{"_index":731,"title":{},"body":{"license.html":{}}}],["love",{"_index":246,"title":{},"body":{"contributing.html":{}}}],["lower_case_lett",{"_index":382,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lowercaselett",{"_index":332,"title":{},"body":{"coverage.html":{}}}],["made",{"_index":581,"title":{},"body":{"license.html":{}}}],["mail",{"_index":607,"title":{},"body":{"license.html":{}}}],["make",{"_index":333,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["malfunct",{"_index":735,"title":{},"body":{"license.html":{}}}],["manag",{"_index":553,"title":{},"body":{"license.html":{}}}],["map",{"_index":78,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["map(",{"_index":41,"title":{},"body":{"classes/CombineErrors.html":{}}}],["map(f",{"_index":102,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["map(v",{"_index":459,"title":{},"body":{"index.html":{}}}],["maperror",{"_index":79,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["maperror(f",{"_index":104,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["mapinput",{"_index":80,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["mapinput(f",{"_index":106,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["mark",{"_index":614,"title":{},"body":{"license.html":{},"miscellaneous/typealiases.html":{}}}],["markoptionalfield",{"_index":782,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["match",{"_index":49,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["match(o",{"_index":109,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["matchanycharof",{"_index":334,"title":{},"body":{"coverage.html":{}}}],["matchinsensit",{"_index":335,"title":{},"body":{"coverage.html":{}}}],["matchinsensitive('gray",{"_index":465,"title":{},"body":{"index.html":{}}}],["matchinsensitive('grey').or(decodeerror.combin",{"_index":464,"title":{},"body":{"index.html":{}}}],["matchinsensitive('hsl",{"_index":470,"title":{},"body":{"index.html":{}}}],["matchnocharof",{"_index":336,"title":{},"body":{"coverage.html":{}}}],["max",{"_index":215,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["mean",{"_index":520,"title":{},"body":{"index.html":{},"license.html":{}}}],["mechan",{"_index":574,"title":{},"body":{"license.html":{}}}],["media",{"_index":578,"title":{},"body":{"license.html":{}}}],["medium",{"_index":660,"title":{},"body":{"license.html":{}}}],["meet",{"_index":662,"title":{},"body":{"license.html":{}}}],["member",{"_index":287,"title":{},"body":{"contributing.html":{}}}],["memori",{"_index":437,"title":{},"body":{"index.html":{}}}],["merchant",{"_index":708,"title":{},"body":{"license.html":{}}}],["mere",{"_index":597,"title":{},"body":{"license.html":{}}}],["messag",{"_index":55,"title":{},"body":{"classes/CustomError.html":{}}}],["method",{"_index":10,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{}}}],["min",{"_index":167,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{}}}],["miscellan",{"_index":373,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["mismatch",{"_index":227,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["miss",{"_index":184,"title":{},"body":{"classes/ExpectedField.html":{}}}],["modif",{"_index":570,"title":{},"body":{"license.html":{}}}],["modifi",{"_index":665,"title":{},"body":{"license.html":{}}}],["modul",{"_index":773,"title":{"modules.html":{}},"body":{"modules.html":{},"miscellaneous/typealiases.html":{}}}],["more",{"_index":295,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["mostli",{"_index":32,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}}}],["name",{"_index":19,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["nativ",{"_index":404,"title":{},"body":{"index.html":{}}}],["necessarili",{"_index":644,"title":{},"body":{"license.html":{}}}],["need",{"_index":253,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["neglig",{"_index":721,"title":{},"body":{"license.html":{}}}],["never",{"_index":796,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["new",{"_index":122,"title":{},"body":{"classes/DecodeResultBase.html":{},"contributing.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["non",{"_index":624,"title":{},"body":{"license.html":{}}}],["none",{"_index":200,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["normal",{"_index":377,"title":{},"body":{"miscellaneous/enumerations.html":{},"license.html":{}}}],["noth",{"_index":481,"title":{},"body":{"index.html":{},"license.html":{}}}],["notic",{"_index":583,"title":{},"body":{"license.html":{}}}],["notwithstand",{"_index":690,"title":{},"body":{"license.html":{}}}],["nullablevalu",{"_index":357,"title":{},"body":{"coverage.html":{}}}],["nullvalu",{"_index":358,"title":{},"body":{"coverage.html":{}}}],["number",{"_index":170,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{},"index.html":{}}}],["numbervalu",{"_index":359,"title":{},"body":{"coverage.html":{}}}],["numbervalue.test(v",{"_index":516,"title":{},"body":{"index.html":{}}}],["o",{"_index":112,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["o.failure(thi",{"_index":134,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["o.success(thi",{"_index":119,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["object",{"_index":441,"title":{},"body":{"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["objectvalu",{"_index":360,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["oblig",{"_index":742,"title":{},"body":{"license.html":{}}}],["obtain",{"_index":768,"title":{},"body":{"license.html":{}}}],["of:\\n${error",{"_index":47,"title":{},"body":{"classes/CombineErrors.html":{}}}],["offer",{"_index":639,"title":{},"body":{"license.html":{}}}],["on",{"_index":46,"title":{},"body":{"classes/CombineErrors.html":{},"classes/ExpectedAnyOf.html":{},"contributing.html":{},"index.html":{},"license.html":{}}}],["onc",{"_index":208,"title":{},"body":{"classes/ExpectedOnce.html":{},"contributing.html":{}}}],["oneof",{"_index":311,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["open",{"_index":299,"title":{},"body":{"contributing.html":{}}}],["option",{"_index":21,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["optionalvalu",{"_index":361,"title":{},"body":{"coverage.html":{}}}],["optionalwhitespac",{"_index":337,"title":{},"body":{"coverage.html":{}}}],["origin",{"_index":595,"title":{},"body":{"license.html":{}}}],["otherwis",{"_index":557,"title":{},"body":{"license.html":{}}}],["out",{"_index":86,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["out2",{"_index":92,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["output",{"_index":424,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["outstand",{"_index":562,"title":{},"body":{"license.html":{}}}],["over",{"_index":269,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["overview",{"_index":774,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":542,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":559,"title":{},"body":{"license.html":{}}}],["page",{"_index":762,"title":{},"body":{"license.html":{}}}],["paramet",{"_index":17,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"index.html":{}}}],["pars",{"_index":444,"title":{},"body":{"index.html":{}}}],["parseint(v",{"_index":460,"title":{},"body":{"index.html":{}}}],["parser",{"_index":400,"title":{},"body":{"index.html":{}}}],["parsers/decod",{"_index":386,"title":{},"body":{"index.html":{}}}],["part",{"_index":267,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["parti",{"_index":679,"title":{},"body":{"license.html":{}}}],["particular",{"_index":709,"title":{},"body":{"license.html":{}}}],["parts",{"_index":383,"title":{},"body":{"index.html":{}}}],["partsing/core/decod",{"_index":391,"title":{},"body":{"index.html":{}}}],["partsing/error",{"_index":413,"title":{},"body":{"index.html":{}}}],["partsing/text",{"_index":403,"title":{},"body":{"index.html":{}}}],["partsing/valu",{"_index":406,"title":{},"body":{"index.html":{}}}],["patch",{"_index":248,"title":{},"body":{"contributing.html":{}}}],["patent",{"_index":636,"title":{},"body":{"license.html":{}}}],["path",{"_index":241,"title":{},"body":{"interfaces/ValueInput.html":{},"index.html":{}}}],["pathtostr",{"_index":362,"title":{},"body":{"coverage.html":{}}}],["pattern",{"_index":224,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["patternmismatch",{"_index":221,"title":{"classes/PatternMismatch.html":{}},"body":{"classes/PatternMismatch.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["payload",{"_index":498,"title":{},"body":{"index.html":{}}}],["percent",{"_index":561,"title":{},"body":{"license.html":{}}}],["perform",{"_index":634,"title":{},"body":{"license.html":{}}}],["permiss",{"_index":264,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["perpetu",{"_index":622,"title":{},"body":{"license.html":{}}}],["pertain",{"_index":672,"title":{},"body":{"license.html":{}}}],["picknext",{"_index":471,"title":{},"body":{"index.html":{}}}],["picknext(ratiodecod",{"_index":467,"title":{},"body":{"index.html":{}}}],["place",{"_index":675,"title":{},"body":{"license.html":{}}}],["portion",{"_index":394,"title":{},"body":{"index.html":{}}}],["posit",{"_index":397,"title":{},"body":{"index.html":{}}}],["possibl",{"_index":65,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["power",{"_index":549,"title":{},"body":{"license.html":{}}}],["predic",{"_index":380,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["prefer",{"_index":569,"title":{},"body":{"license.html":{}}}],["prepar",{"_index":631,"title":{},"body":{"license.html":{}}}],["print",{"_index":761,"title":{},"body":{"license.html":{}}}],["probabl",{"_index":280,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["product",{"_index":697,"title":{},"body":{"license.html":{}}}],["project",{"_index":249,"title":{},"body":{"contributing.html":{}}}],["promin",{"_index":667,"title":{},"body":{"license.html":{}}}],["properti",{"_index":7,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{}}}],["provid",{"_index":392,"title":{},"body":{"index.html":{},"license.html":{}}}],["prvide",{"_index":28,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}}}],["publicli",{"_index":632,"title":{},"body":{"license.html":{}}}],["pull",{"_index":290,"title":{},"body":{"contributing.html":{}}}],["purpos",{"_index":292,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["r",{"_index":89,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["rang",{"_index":218,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["ratiodecod",{"_index":453,"title":{},"body":{"index.html":{}}}],["ratiovalu",{"_index":515,"title":{},"body":{"index.html":{}}}],["readabl",{"_index":30,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"license.html":{}}}],["readonli",{"_index":8,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"index.html":{}}}],["realli",{"_index":387,"title":{},"body":{"index.html":{}}}],["realloc",{"_index":434,"title":{},"body":{"index.html":{}}}],["reason",{"_index":698,"title":{},"body":{"license.html":{}}}],["receiv",{"_index":616,"title":{},"body":{"license.html":{}}}],["recipi",{"_index":663,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":759,"title":{},"body":{"license.html":{}}}],["redistribut",{"_index":266,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["regard",{"_index":694,"title":{},"body":{"license.html":{}}}],["regexp",{"_index":338,"title":{},"body":{"coverage.html":{}}}],["regexp(/0[.]\\d+/y).map(numb",{"_index":454,"title":{},"body":{"index.html":{}}}],["regexp(/[#]([0",{"_index":456,"title":{},"body":{"index.html":{}}}],["regular",{"_index":428,"title":{},"body":{"index.html":{}}}],["remain",{"_index":596,"title":{},"body":{"license.html":{}}}],["rememb",{"_index":393,"title":{},"body":{"index.html":{}}}],["repeat",{"_index":166,"title":{},"body":{"classes/ExpectedAtLeast.html":{}}}],["replac",{"_index":755,"title":{},"body":{"license.html":{}}}],["repres",{"_index":593,"title":{},"body":{"license.html":{}}}],["represent",{"_index":31,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{}}}],["reproduc",{"_index":630,"title":{},"body":{"license.html":{}}}],["reproduct",{"_index":535,"title":{},"body":{"license.html":{}}}],["request",{"_index":291,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["requir",{"_index":288,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["respons",{"_index":711,"title":{},"body":{"license.html":{}}}],["rest",{"_index":339,"title":{},"body":{"coverage.html":{}}}],["result",{"_index":48,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["retain",{"_index":260,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["return",{"_index":34,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["review",{"_index":284,"title":{},"body":{"contributing.html":{}}}],["revis",{"_index":590,"title":{},"body":{"license.html":{}}}],["rgb",{"_index":447,"title":{},"body":{"index.html":{}}}],["rgb(0x003355",{"_index":485,"title":{},"body":{"index.html":{}}}],["rgb(v",{"_index":462,"title":{},"body":{"index.html":{}}}],["rgbdecod",{"_index":455,"title":{},"body":{"index.html":{}}}],["rgbvalu",{"_index":527,"title":{},"body":{"index.html":{}}}],["right",{"_index":744,"title":{},"body":{"license.html":{}}}],["risk",{"_index":715,"title":{},"body":{"license.html":{}}}],["royalti",{"_index":627,"title":{},"body":{"license.html":{}}}],["s",{"_index":43,"title":{},"body":{"classes/CombineErrors.html":{},"classes/DecodeResultBase.html":{},"index.html":{}}}],["safeintegervalu",{"_index":363,"title":{},"body":{"coverage.html":{}}}],["same",{"_index":760,"title":{},"body":{"license.html":{}}}],["satur",{"_index":451,"title":{},"body":{"index.html":{}}}],["save",{"_index":436,"title":{},"body":{"index.html":{}}}],["scenario",{"_index":493,"title":{},"body":{"index.html":{}}}],["section",{"_index":538,"title":{},"body":{"license.html":{}}}],["see",{"_index":271,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["sell",{"_index":640,"title":{},"body":{"license.html":{}}}],["sent",{"_index":606,"title":{},"body":{"license.html":{}}}],["separ",{"_index":156,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"license.html":{}}}],["separatedbytimes(match",{"_index":472,"title":{},"body":{"index.html":{}}}],["sequenc",{"_index":312,"title":{},"body":{"coverage.html":{}}}],["servic",{"_index":696,"title":{},"body":{"license.html":{}}}],["set",{"_index":402,"title":{},"body":{"index.html":{}}}],["shall",{"_index":537,"title":{},"body":{"license.html":{}}}],["shape",{"_index":409,"title":{},"body":{"index.html":{}}}],["share",{"_index":563,"title":{},"body":{"license.html":{}}}],["sign",{"_index":273,"title":{},"body":{"contributing.html":{}}}],["signatur",{"_index":786,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["simpl",{"_index":414,"title":{},"body":{"index.html":{}}}],["simpli",{"_index":262,"title":{},"body":{"contributing.html":{}}}],["simplifi",{"_index":423,"title":{},"body":{"index.html":{}}}],["skipnext(eoi",{"_index":479,"title":{},"body":{"index.html":{}}}],["skipnext(match",{"_index":476,"title":{},"body":{"index.html":{}}}],["skipnext(optionalwhitespac",{"_index":466,"title":{},"body":{"index.html":{}}}],["slice",{"_index":435,"title":{},"body":{"index.html":{}}}],["small",{"_index":251,"title":{},"body":{"contributing.html":{}}}],["softwar",{"_index":572,"title":{},"body":{"license.html":{}}}],["sole",{"_index":710,"title":{},"body":{"license.html":{}}}],["somehow",{"_index":396,"title":{},"body":{"index.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"license.html":{}}}],["special",{"_index":726,"title":{},"body":{"license.html":{}}}],["specif",{"_index":770,"title":{},"body":{"license.html":{}}}],["specifi",{"_index":793,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../decoder.t",{"_index":780,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../entity.t",{"_index":375,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../index.t",{"_index":778,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../result.t",{"_index":779,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../type_level.t",{"_index":781,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/core/decoder.t",{"_index":304,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/result.t",{"_index":61,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/result.ts:22",{"_index":85,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:23",{"_index":87,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:24",{"_index":82,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:27",{"_index":111,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:32",{"_index":91,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:33",{"_index":96,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:35",{"_index":103,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:36",{"_index":105,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:37",{"_index":107,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:39",{"_index":101,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:40",{"_index":100,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:42",{"_index":99,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:43",{"_index":98,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:48",{"_index":113,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/type_level.t",{"_index":787,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/error/combine_errors.t",{"_index":5,"title":{},"body":{"classes/CombineErrors.html":{},"coverage.html":{}}}],["src/error/combine_errors.ts:23",{"_index":16,"title":{},"body":{"classes/CombineErrors.html":{}}}],["src/error/combine_errors.ts:29",{"_index":27,"title":{},"body":{"classes/CombineErrors.html":{}}}],["src/error/custom_error.t",{"_index":51,"title":{},"body":{"classes/CustomError.html":{},"coverage.html":{}}}],["src/error/custom_error.ts:24",{"_index":57,"title":{},"body":{"classes/CustomError.html":{}}}],["src/error/custom_error.ts:30",{"_index":58,"title":{},"body":{"classes/CustomError.html":{}}}],["src/error/entity.t",{"_index":323,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/error/expected_any_of.t",{"_index":144,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"coverage.html":{}}}],["src/error/expected_any_of.ts:44",{"_index":150,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["src/error/expected_any_of.ts:50",{"_index":151,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["src/error/expected_at_least.t",{"_index":165,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"coverage.html":{}}}],["src/error/expected_at_least.ts:26",{"_index":171,"title":{},"body":{"classes/ExpectedAtLeast.html":{}}}],["src/error/expected_at_least.ts:32",{"_index":172,"title":{},"body":{"classes/ExpectedAtLeast.html":{}}}],["src/error/expected_eoi.t",{"_index":177,"title":{},"body":{"classes/ExpectedEoi.html":{},"coverage.html":{}}}],["src/error/expected_eoi.ts:24",{"_index":180,"title":{},"body":{"classes/ExpectedEoi.html":{}}}],["src/error/expected_eoi.ts:29",{"_index":181,"title":{},"body":{"classes/ExpectedEoi.html":{}}}],["src/error/expected_field.t",{"_index":183,"title":{},"body":{"classes/ExpectedField.html":{},"coverage.html":{}}}],["src/error/expected_field.ts:24",{"_index":187,"title":{},"body":{"classes/ExpectedField.html":{}}}],["src/error/expected_field.ts:30",{"_index":189,"title":{},"body":{"classes/ExpectedField.html":{}}}],["src/error/expected_match.t",{"_index":192,"title":{},"body":{"classes/ExpectedMatch.html":{},"coverage.html":{}}}],["src/error/expected_match.ts:25",{"_index":195,"title":{},"body":{"classes/ExpectedMatch.html":{}}}],["src/error/expected_match.ts:31",{"_index":196,"title":{},"body":{"classes/ExpectedMatch.html":{}}}],["src/error/expected_none_of.t",{"_index":198,"title":{},"body":{"classes/ExpectedNoneOf.html":{},"coverage.html":{}}}],["src/error/expected_none_of.ts:28",{"_index":199,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["src/error/expected_none_of.ts:34",{"_index":201,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["src/error/expected_once.t",{"_index":206,"title":{},"body":{"classes/ExpectedOnce.html":{},"coverage.html":{}}}],["src/error/expected_once.ts:27",{"_index":209,"title":{},"body":{"classes/ExpectedOnce.html":{}}}],["src/error/expected_once.ts:33",{"_index":210,"title":{},"body":{"classes/ExpectedOnce.html":{}}}],["src/error/expected_within_range.t",{"_index":212,"title":{},"body":{"classes/ExpectedWithinRange.html":{},"coverage.html":{}}}],["src/error/expected_within_range.ts:25",{"_index":216,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["src/error/expected_within_range.ts:31",{"_index":219,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["src/error/index.t",{"_index":325,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/error/pattern_mismatch.t",{"_index":222,"title":{},"body":{"classes/PatternMismatch.html":{},"coverage.html":{}}}],["src/error/pattern_mismatch.ts:24",{"_index":226,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["src/error/pattern_mismatch.ts:30",{"_index":228,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["src/error/unexpected_eoi.t",{"_index":234,"title":{},"body":{"classes/UnexpectedEoi.html":{},"coverage.html":{}}}],["src/error/unexpected_eoi.ts:24",{"_index":237,"title":{},"body":{"classes/UnexpectedEoi.html":{}}}],["src/error/unexpected_eoi.ts:29",{"_index":238,"title":{},"body":{"classes/UnexpectedEoi.html":{}}}],["src/text/index.t",{"_index":326,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/text/input.t",{"_index":232,"title":{},"body":{"interfaces/TextInput.html":{},"coverage.html":{}}}],["src/value/index.t",{"_index":347,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/value/input.t",{"_index":240,"title":{},"body":{"interfaces/ValueInput.html":{},"coverage.html":{}}}],["start",{"_index":243,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["state",{"_index":638,"title":{},"body":{"license.html":{}}}],["statement",{"_index":303,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["sticki",{"_index":432,"title":{},"body":{"index.html":{}}}],["still",{"_index":415,"title":{},"body":{"index.html":{}}}],["stoppag",{"_index":733,"title":{},"body":{"license.html":{}}}],["string",{"_index":35,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"index.html":{}}}],["stringvalu",{"_index":364,"title":{},"body":{"coverage.html":{}}}],["subject",{"_index":619,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":635,"title":{},"body":{"license.html":{}}}],["submiss",{"_index":285,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["submit",{"_index":274,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["subsequ",{"_index":617,"title":{},"body":{"license.html":{}}}],["succ",{"_index":132,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["succe",{"_index":313,"title":{},"body":{"coverage.html":{}}}],["success",{"_index":114,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{}}}],["successfulli",{"_index":399,"title":{},"body":{"index.html":{}}}],["such",{"_index":554,"title":{},"body":{"license.html":{}}}],["super(input",{"_index":118,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["supersed",{"_index":692,"title":{},"body":{"license.html":{}}}],["support",{"_index":740,"title":{},"body":{"license.html":{}}}],["sure",{"_index":480,"title":{},"body":{"index.html":{}}}],["syntax",{"_index":757,"title":{},"body":{"license.html":{}}}],["system",{"_index":608,"title":{},"body":{"license.html":{}}}],["t",{"_index":791,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["tabl",{"_index":372,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":371,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":425,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["takecharbetween",{"_index":340,"title":{},"body":{"coverage.html":{}}}],["takecharwhil",{"_index":341,"title":{},"body":{"coverage.html":{}}}],["term",{"_index":534,"title":{},"body":{"license.html":{}}}],["termin",{"_index":657,"title":{},"body":{"license.html":{}}}],["testchar",{"_index":342,"title":{},"body":{"coverage.html":{}}}],["testobject",{"_index":365,"title":{},"body":{"coverage.html":{}}}],["testtyp",{"_index":366,"title":{},"body":{"coverage.html":{}}}],["testvalu",{"_index":367,"title":{},"body":{"coverage.html":{}}}],["text",{"_index":420,"title":{},"body":{"index.html":{},"license.html":{}}}],["textdecod",{"_index":783,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["textinput",{"_index":231,"title":{"interfaces/TextInput.html":{}},"body":{"interfaces/TextInput.html":{},"coverage.html":{},"index.html":{}}}],["theori",{"_index":719,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":599,"title":{},"body":{"license.html":{}}}],["third",{"_index":678,"title":{},"body":{"license.html":{}}}],["this.error",{"_index":40,"title":{},"body":{"classes/CombineErrors.html":{}}}],["this.failur",{"_index":136,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["this.field",{"_index":190,"title":{},"body":{"classes/ExpectedField.html":{}}}],["this.flatmap(v",{"_index":121,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["this.flatmaperror(",{"_index":138,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["this.max",{"_index":220,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["this.messag",{"_index":59,"title":{},"body":{"classes/CustomError.html":{}}}],["this.min",{"_index":174,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{}}}],["this.pattern",{"_index":229,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["this.valu",{"_index":125,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedMatch.html":{}}}],["those",{"_index":513,"title":{},"body":{"index.html":{},"license.html":{}}}],["through",{"_index":539,"title":{},"body":{"license.html":{}}}],["throw",{"_index":129,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["time",{"_index":168,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["titl",{"_index":707,"title":{},"body":{"license.html":{}}}],["tort",{"_index":720,"title":{},"body":{"license.html":{}}}],["tostr",{"_index":11,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{}}}],["track",{"_index":395,"title":{},"body":{"index.html":{},"license.html":{}}}],["trade",{"_index":695,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":670,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":641,"title":{},"body":{"license.html":{}}}],["transform",{"_index":497,"title":{},"body":{"index.html":{},"license.html":{}}}],["translat",{"_index":575,"title":{},"body":{"license.html":{}}}],["tri",{"_index":376,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["true",{"_index":127,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["tupletounion",{"_index":784,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["tuplevalu",{"_index":368,"title":{},"body":{"coverage.html":{}}}],["two",{"_index":64,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{}}}],["twp",{"_index":214,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["type",{"_index":20,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":776,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["u",{"_index":792,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["undefineablevalu",{"_index":369,"title":{},"body":{"coverage.html":{}}}],["undefinedvalu",{"_index":370,"title":{},"body":{"coverage.html":{}}}],["under",{"_index":547,"title":{},"body":{"license.html":{}}}],["unexpect",{"_index":235,"title":{},"body":{"classes/UnexpectedEoi.html":{}}}],["unexpectedeoi",{"_index":233,"title":{"classes/UnexpectedEoi.html":{}},"body":{"classes/UnexpectedEoi.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["union",{"_index":63,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["unless",{"_index":688,"title":{},"body":{"license.html":{}}}],["uppercase_lett",{"_index":381,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["uppercaselett",{"_index":343,"title":{},"body":{"coverage.html":{}}}],["us",{"_index":265,"title":{},"body":{"contributing.html":{},"index.html":{},"license.html":{}}}],["usag",{"_index":795,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["util",{"_index":153,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"index.html":{}}}],["v",{"_index":517,"title":{},"body":{"index.html":{}}}],["v.",{"_index":525,"title":{},"body":{"index.html":{}}}],["v.l",{"_index":526,"title":{},"body":{"index.html":{}}}],["v[1",{"_index":474,"title":{},"body":{"index.html":{}}}],["v[2",{"_index":475,"title":{},"body":{"index.html":{}}}],["valid",{"_index":496,"title":{},"body":{"index.html":{}}}],["valu",{"_index":24,"title":{},"body":{"classes/CombineErrors.html":{},"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{}}}],["valuedecod",{"_index":785,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["valueinput",{"_index":239,"title":{"interfaces/ValueInput.html":{}},"body":{"interfaces/ValueInput.html":{},"coverage.html":{},"index.html":{}}}],["values.length",{"_index":162,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["variabl",{"_index":307,"title":{},"body":{"coverage.html":{}}}],["verbal",{"_index":604,"title":{},"body":{"license.html":{}}}],["version",{"_index":529,"title":{},"body":{"license.html":{}}}],["void",{"_index":90,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["want",{"_index":388,"title":{},"body":{"index.html":{}}}],["warranti",{"_index":701,"title":{},"body":{"license.html":{}}}],["wasn't",{"_index":223,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["we'd",{"_index":245,"title":{},"body":{"contributing.html":{}}}],["wherev",{"_index":677,"title":{},"body":{"license.html":{}}}],["whether",{"_index":555,"title":{},"body":{"license.html":{}}}],["whitespac",{"_index":344,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["whole",{"_index":594,"title":{},"body":{"license.html":{}}}],["within",{"_index":217,"title":{},"body":{"classes/ExpectedWithinRange.html":{},"index.html":{},"license.html":{}}}],["without",{"_index":661,"title":{},"body":{"license.html":{}}}],["withposit",{"_index":345,"title":{},"body":{"coverage.html":{}}}],["work",{"_index":579,"title":{},"body":{"license.html":{}}}],["worldwid",{"_index":623,"title":{},"body":{"license.html":{}}}],["wrap",{"_index":483,"title":{},"body":{"index.html":{}}}],["write",{"_index":427,"title":{},"body":{"index.html":{},"license.html":{}}}],["written",{"_index":605,"title":{},"body":{"license.html":{}}}],["y",{"_index":431,"title":{},"body":{"index.html":{}}}],["you'v",{"_index":276,"title":{},"body":{"contributing.html":{}}}],["yyyi",{"_index":766,"title":{},"body":{"license.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/CombineErrors.html":{"url":"classes/CombineErrors.html","title":"class - CombineErrors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CombineErrors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/combine_errors.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(errors: DecodeError[])\n                    \n                \n                        \n                            \n                                Defined in src/error/combine_errors.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        errors\n                                                  \n                                                        \n                                                                    DecodeError[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'combine-errors'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/combine_errors.ts:23\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/combine_errors.ts:29\n                            \n                        \n\n\n                \n                    \n                            Prvide a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { DecodeError } from './'\n\nexport class CombineErrors {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'combine-errors' = 'combine-errors'\n  constructor(readonly errors: DecodeError[]) {}\n\n  /**\n   * Prvide a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    const errors: string = this.errors\n      .map(e => e.toString())\n      .map(s => `  - ${s}`)\n      .join('\\n')\n    return `expected one of:\\n${errors}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomError.html":{"url":"classes/CustomError.html","title":"class - CustomError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/custom_error.ts\n        \n\n            \n                Description\n            \n            \n                Error type that allows for a customized message.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/custom_error.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'custom-error'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/custom_error.ts:24\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/custom_error.ts:30\n                            \n                        \n\n\n                \n                    \n                            Prvide a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class CustomError {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'custom-error' = 'custom-error'\n  constructor(readonly message: string) {}\n\n  /**\n   * Prvide a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return this.message\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DecodeResultBase.html":{"url":"classes/DecodeResultBase.html","title":"class - DecodeResultBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DecodeResultBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/result.ts\n        \n\n            \n                Description\n            \n            \n                DecodeResult is a union type that has two possible constructors\nDecodeSuccess and DecodeFailure.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                _E\n                            \n                            \n                                    Readonly\n                                _I\n                            \n                            \n                                    Readonly\n                                _O\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                flatMap\n                            \n                            \n                                    Abstract\n                                flatMapError\n                            \n                            \n                                    Abstract\n                                getUnsafeFailure\n                            \n                            \n                                    Abstract\n                                getUnsafeSuccess\n                            \n                            \n                                    Abstract\n                                isFailure\n                            \n                            \n                                    Abstract\n                                isSuccess\n                            \n                            \n                                    Abstract\n                                map\n                            \n                            \n                                    Abstract\n                                mapError\n                            \n                            \n                                    Abstract\n                                mapInput\n                            \n                            \n                                    Abstract\n                                match\n                            \n                            \n                                    Abstract\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(input: In)\n                    \n                \n                        \n                            \n                                Defined in src/core/result.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        input\n                                                  \n                                                        \n                                                                    In\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            _E\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _E:     Err\n\n                    \n                \n                    \n                        \n                            Type :     Err\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/result.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            _I\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _I:     In\n\n                    \n                \n                    \n                        \n                            Type :     In\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/result.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            _O\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _O:     Out\n\n                    \n                \n                    \n                        \n                            Type :     Out\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/result.ts:23\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            flatMap\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        flatMap(f: (r: Out) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:32\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        Out2\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            flatMapError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        flatMapError(f: (r: Err) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:33\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        Err2\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            getUnsafeFailure\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getUnsafeFailure()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:43\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Err\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            getUnsafeSuccess\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getUnsafeSuccess()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:42\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Out\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            isFailure\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        isFailure()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:40\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     DecodeFailure\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            isSuccess\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        isSuccess()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:39\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     DecodeSuccess\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            map\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        map(f: (r: Out) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:35\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        Out2\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            mapError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        mapError(f: (r: Err) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:36\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        Err2\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            mapInput\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        mapInput(f: (i: In) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:37\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        In2\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            match\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        match(o: literal type)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:27\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        O\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        o\n                                                        \n                                                                    literal type\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     O\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:48\n                            \n                        \n\n\n                \n                    \n                            Prvide a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        abstract class DecodeResultBase {\n  readonly _I!: In\n  readonly _O!: Out\n  readonly _E!: Err\n\n  constructor(readonly input: In) {}\n  abstract match(o: {\n    success: (s: DecodeSuccess) => O\n    failure: (f: DecodeFailure) => O\n  }): O\n\n  abstract flatMap(f: (r: Out) => DecodeResult): DecodeResult\n  abstract flatMapError(f: (r: Err) => DecodeResult): DecodeResult\n\n  abstract map(f: (r: Out) => Out2): DecodeResult\n  abstract mapError(f: (r: Err) => Err2): DecodeResult\n  abstract mapInput(f: (i: In) => In2): DecodeResult\n\n  abstract isSuccess(): this is DecodeSuccess\n  abstract isFailure(): this is DecodeFailure\n\n  abstract getUnsafeSuccess(): Out\n  abstract getUnsafeFailure(): Err\n\n  /**\n   * Prvide a human readable representation of the value. Mostly for debugging.\n   */\n  abstract toString(): string\n}\n\nexport class DecodeSuccess extends DecodeResultBase {\n  readonly kind = 'decode-success'\n  constructor(input: In, readonly value: Out) {\n    super(input)\n  }\n\n  match(o: { success: (s: DecodeSuccess) => O; failure: (f: DecodeFailure) => O }): O {\n    return o.success(this)\n  }\n\n  flatMap(f: (r: Out) => DecodeResult): DecodeResult {\n    return f(this.value)\n  }\n  map(f: (r: Out) => Out2): DecodeResult {\n    return this.flatMap(v => new DecodeSuccess(this.input, f(v)))\n  }\n  flatMapError(f: (r: Err) => DecodeResult): DecodeResult {\n    return new DecodeSuccess(this.input, this.value)\n  }\n  mapError(f: (r: Err) => Err2): DecodeResult {\n    return new DecodeSuccess(this.input, this.value)\n  }\n  mapInput(f: (i: In) => In2): DecodeResult {\n    return new DecodeSuccess(f(this.input), this.value)\n  }\n\n  isSuccess(): this is DecodeSuccess {\n    return true\n  }\n  isFailure(): this is DecodeFailure {\n    return false\n  }\n\n  getUnsafeSuccess(): Out {\n    return this.value\n  }\n  getUnsafeFailure(): Err {\n    throw new Error(\"can't get failure from success\")\n  }\n\n  toString(): string {\n    return `DecodeSuccess: ${JSON.stringify(this.input)}`\n  }\n}\n\nexport class DecodeFailure extends DecodeResultBase {\n  readonly kind = 'decode-failure'\n  constructor(input: In, readonly failure: Err) {\n    super(input)\n  }\n\n  match(o: {\n    success: (succ: DecodeSuccess) => O\n    failure: (fail: DecodeFailure) => O\n  }): O {\n    return o.failure(this)\n  }\n\n  flatMap(f: (r: Out) => DecodeResult): DecodeResult {\n    return new DecodeFailure(this.input, this.failure)\n  }\n  map(f: (r: Out) => Out2): DecodeResult {\n    return new DecodeFailure(this.input, this.failure)\n  }\n  flatMapError(f: (r: Err) => DecodeResult): DecodeResult {\n    return f(this.failure)\n  }\n  mapError(f: (r: Err) => Err2): DecodeResult {\n    return this.flatMapError(e => new DecodeFailure(this.input, f(e)))\n  }\n  mapInput(f: (i: In) => In2): DecodeResult {\n    return new DecodeFailure(f(this.input), this.failure)\n  }\n\n  isSuccess(): this is DecodeSuccess {\n    return false\n  }\n  isFailure(): this is DecodeFailure {\n    return true\n  }\n  getUnsafeSuccess(): Out {\n    throw new Error(\"can't get success from failure\")\n  }\n  getUnsafeFailure(): Err {\n    return this.failure\n  }\n\n  toString(): string {\n    return `DecodeFailure: ${JSON.stringify(this.input)}`\n  }\n}\n\nexport type DecodeResult = DecodeSuccess | DecodeFailure\n\nexport const success = (input: In, result: Out): DecodeResult =>\n  new DecodeSuccess(input, result)\nexport const failure = (input: In, failure: Err): DecodeResult =>\n  new DecodeFailure(input, failure)\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedAnyOf.html":{"url":"classes/ExpectedAnyOf.html","title":"class - ExpectedAnyOf","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedAnyOf\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_any_of.ts\n        \n\n            \n                Description\n            \n            \n                Error for any Entity that should match at least one of the conditions\ndescribed in the descriptions array.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entity: Entity, descriptions: string[])\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_any_of.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                    Entity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        descriptions\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-any-of'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_any_of.ts:44\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_any_of.ts:50\n                            \n                        \n\n\n                \n                    \n                            Prvide a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, entityToString } from './entity'\n\n/**\n * Utility function to generate a comma separate list of values where the last\n * one is concatenated by `or`.\n */\nexport const concatOr = (values: string[]) => {\n  const length = values.length\n  if (length === 0) {\n    return ''\n  } else if (length \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedAtLeast.html":{"url":"classes/ExpectedAtLeast.html","title":"class - ExpectedAtLeast","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedAtLeast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_at_least.ts\n        \n\n            \n                Description\n            \n            \n                Error for an Entity that was not repeated at least min times.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(min: number, entity: Entity)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_at_least.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        min\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                    Entity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-at-least'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_at_least.ts:26\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_at_least.ts:32\n                            \n                        \n\n\n                \n                    \n                            Prvide a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, entityToString } from './entity'\n\n/**\n * Error for an {@link Entity} that was not repeated at least `min` times.\n */\nexport class ExpectedAtLeast {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-at-least' = 'expected-at-least'\n  constructor(readonly min: number, readonly entity: Entity) {}\n\n  /**\n   * Prvide a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `expected at least ${this.min} ${entityToString(this.entity, this.min)}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedEoi.html":{"url":"classes/ExpectedEoi.html","title":"class - ExpectedEoi","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedEoi\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_eoi.ts\n        \n\n            \n                Description\n            \n            \n                Error for expected end of input.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-eot'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_eoi.ts:24\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_eoi.ts:29\n                            \n                        \n\n\n                \n                    \n                            Prvide a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class ExpectedEoi {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-eot' = 'expected-eot'\n\n  /**\n   * Prvide a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `expected end of input`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedField.html":{"url":"classes/ExpectedField.html","title":"class - ExpectedField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_field.ts\n        \n\n            \n                Description\n            \n            \n                Error for missing fieeld.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_field.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-field'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_field.ts:24\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_field.ts:30\n                            \n                        \n\n\n                \n                    \n                            Prvide a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class ExpectedField {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-field' = 'expected-field'\n  constructor(readonly field: string) {}\n\n  /**\n   * Prvide a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `expected field \"${this.field}\"`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedMatch.html":{"url":"classes/ExpectedMatch.html","title":"class - ExpectedMatch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedMatch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_match.ts\n        \n\n            \n                Description\n            \n            \n                Error for an exact match that failed. The expectation is described as a\nstring.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_match.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-match'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_match.ts:25\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_match.ts:31\n                            \n                        \n\n\n                \n                    \n                            Prvide a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class ExpectedMatch {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-match' = 'expected-match'\n  constructor(readonly value: string) {}\n\n  /**\n   * Prvide a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `expected ${this.value}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedNoneOf.html":{"url":"classes/ExpectedNoneOf.html","title":"class - ExpectedNoneOf","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedNoneOf\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_none_of.ts\n        \n\n            \n                Description\n            \n            \n                Error for a decoder that is expected to fail decoding an Entity for\nany of the values as they are described in the descriptions array.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entity: Entity, descriptions: string[])\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_none_of.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                    Entity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        descriptions\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'none-of-error'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_none_of.ts:28\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_none_of.ts:34\n                            \n                        \n\n\n                \n                    \n                            Prvide a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, entityToString } from './entity'\nimport { concatOr } from './expected_any_of'\n\n/**\n * Error for a decoder that is expected to fail decoding an {@link Entity} for\n * any of the values as they are described in the `descriptions` array.\n */\nexport class ExpectedNoneOf {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'none-of-error' = 'none-of-error'\n  constructor(readonly entity: Entity, readonly descriptions: string[]) {}\n\n  /**\n   * Prvide a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `expected no ${entityToString(this.entity, 1)} like ${concatOr(this.descriptions)}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedOnce.html":{"url":"classes/ExpectedOnce.html","title":"class - ExpectedOnce","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedOnce\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_once.ts\n        \n\n            \n                Description\n            \n            \n                Error for an Entity that was expected to be captured once by a\ndecoder.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entity: Entity)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_once.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                    Entity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-once'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_once.ts:27\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_once.ts:33\n                            \n                        \n\n\n                \n                    \n                            Prvide a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, entityToString } from './entity'\n\n/**\n * Error for an {@link Entity} that was expected to be captured once by a\n * decoder.\n */\nexport class ExpectedOnce {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-once' = 'expected-once'\n  constructor(readonly entity: Entity) {}\n\n  /**\n   * Prvide a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `expected a ${entityToString(this.entity, 1)}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedWithinRange.html":{"url":"classes/ExpectedWithinRange.html","title":"class - ExpectedWithinRange","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedWithinRange\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_within_range.ts\n        \n\n            \n                Description\n            \n            \n                Error for a decoder that should have captured a value between twp values\nas described in min and max.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(min: string, max: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_within_range.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        min\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        max\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-within-range'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_within_range.ts:25\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_within_range.ts:31\n                            \n                        \n\n\n                \n                    \n                            Prvide a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class ExpectedWithinRange {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-within-range' = 'expected-within-range'\n  constructor(readonly min: string, readonly max: string) {}\n\n  /**\n   * Prvide a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `expected between ${this.min} and ${this.max}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatternMismatch.html":{"url":"classes/PatternMismatch.html","title":"class - PatternMismatch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatternMismatch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/pattern_mismatch.ts\n        \n\n            \n                Description\n            \n            \n                Expected error for a decoder that wasn't able to match pattern.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pattern: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/pattern_mismatch.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pattern\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'pattern-mismatch'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/pattern_mismatch.ts:24\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/pattern_mismatch.ts:30\n                            \n                        \n\n\n                \n                    \n                            Prvide a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class PatternMismatch {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'pattern-mismatch' = 'pattern-mismatch'\n  constructor(readonly pattern: string) {}\n\n  /**\n   * Prvide a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `expected to match pattern ${this.pattern}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TextInput.html":{"url":"interfaces/TextInput.html","title":"interface - TextInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TextInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/text/input.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        index\n                                \n                                \n                                        input\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        index\n                                    \n                                \n                                \n                                    \n                                        index:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        input\n                                    \n                                \n                                \n                                    \n                                        input:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TextInput {\n  readonly input: string\n  readonly index: number\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnexpectedEoi.html":{"url":"classes/UnexpectedEoi.html","title":"class - UnexpectedEoi","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnexpectedEoi\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/unexpected_eoi.ts\n        \n\n            \n                Description\n            \n            \n                Error for a decoder that is not expecting an end of input.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'unexpected-eoi'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/unexpected_eoi.ts:24\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/unexpected_eoi.ts:29\n                            \n                        \n\n\n                \n                    \n                            Prvide a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class UnexpectedEoi {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'unexpected-eoi' = 'unexpected-eoi'\n\n  /**\n   * Prvide a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `unexpected end of input`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValueInput.html":{"url":"interfaces/ValueInput.html","title":"interface - ValueInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ValueInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/value/input.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        input\n                                \n                                \n                                        path\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        input\n                                    \n                                \n                                \n                                    \n                                        input:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:     (string | number)[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     (string | number)[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ValueInput {\n  readonly input: any\n  readonly path: (string | number)[]\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nHow to Contribute\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\nContributor License Agreement\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to https://cla.developers.google.com/ to see\nyour current agreements on file or to sign a new one.\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\nCode reviews\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\nGitHub Help for more\ninformation on using pull requests.\nCommunity Guidelines\nThis project follows\nGoogle's Open Source Community Guidelines.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                class\n            \n            \n                Decoder\n            \n            \n                96 %\n                (25/26)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                fail\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                lazy\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                oneOf\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                sequence\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                succeed\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                class\n            \n            \n                DecodeFailure\n            \n            \n                3 %\n                (1/28)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                class\n            \n            \n                DecodeResultBase\n            \n            \n                12 %\n                (2/16)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                class\n            \n            \n                DecodeSuccess\n            \n            \n                3 %\n                (1/28)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                variable\n            \n            \n                failure\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                variable\n            \n            \n                success\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/error/combine_errors.ts\n            \n            \n                class\n            \n            \n                CombineErrors\n            \n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/error/custom_error.ts\n            \n            \n                class\n            \n            \n                CustomError\n            \n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/error/entity.ts\n            \n            \n                variable\n            \n            \n                entityToString\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/error/expected_any_of.ts\n            \n            \n                class\n            \n            \n                ExpectedAnyOf\n            \n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/error/expected_any_of.ts\n            \n            \n                variable\n            \n            \n                concatOr\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/error/expected_at_least.ts\n            \n            \n                class\n            \n            \n                ExpectedAtLeast\n            \n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/error/expected_eoi.ts\n            \n            \n                class\n            \n            \n                ExpectedEoi\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/error/expected_field.ts\n            \n            \n                class\n            \n            \n                ExpectedField\n            \n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/error/expected_match.ts\n            \n            \n                class\n            \n            \n                ExpectedMatch\n            \n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/error/expected_none_of.ts\n            \n            \n                class\n            \n            \n                ExpectedNoneOf\n            \n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/error/expected_once.ts\n            \n            \n                class\n            \n            \n                ExpectedOnce\n            \n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/error/expected_within_range.ts\n            \n            \n                class\n            \n            \n                ExpectedWithinRange\n            \n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/error/index.ts\n            \n            \n                variable\n            \n            \n                DecodeError\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/error/pattern_mismatch.ts\n            \n            \n                class\n            \n            \n                PatternMismatch\n            \n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/error/unexpected_eoi.ts\n            \n            \n                class\n            \n            \n                UnexpectedEoi\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                char\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                decodeText\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                digit\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                digits\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                eoi\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                failureToString\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                letter\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                letters\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                lowerCaseLetter\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                lowerCaseLetters\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                make\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                match\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                matchAnyCharOf\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                matchInsensitive\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                matchNoCharOf\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                optionalWhitespace\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                regexp\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                rest\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                \n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                takeCharBetween\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                takeCharWhile\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                testChar\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                upperCaseLetter\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                upperCaseLetters\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                whitespace\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                withPosition\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/input.ts\n            \n            \n                interface\n            \n            \n                TextInput\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                anyArrayValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                anyValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                arrayValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                booleanValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                decodeValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                failureToString\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                finiteNumberValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                integerValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                isToken\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                literalValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                make\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                nullableValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                nullValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                numberValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                objectValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                optionalValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                pathToString\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                safeIntegerValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                stringValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                testObject\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                testType\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                testValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                tupleValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                undefineableValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                undefinedValue\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/input.ts\n            \n            \n                interface\n            \n            \n                ValueInput\n            \n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Entity   (src/.../entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/error/entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Entity\n                    \n                \n                    \n                        \n                            Enumeration that tries to capture different kind of entities that are\nnormally found has decoder inputs.\n\n                        \n                    \n                        \n                            \n                                 CHARACTER\n                            \n                        \n                        \n                            \n                                 PREDICATE\n                            \n                        \n                        \n                            \n                                 LETTER\n                            \n                        \n                        \n                            \n                                 UPPERCASE_LETTER\n                            \n                        \n                        \n                            \n                                 LOWER_CASE_LETTER\n                            \n                        \n                        \n                            \n                                 DIGIT\n                            \n                        \n                        \n                            \n                                 WHITESPACE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nParTSing\nParTSing is a decoder combinator library. You can use it to build parsers/decoders from string or really any input values.\nIf you want full control over what to decode your should start from partsing/core/decoder. It provides 3 types parameters\n\nIn for the input. Remember that you will need to decode one portion of your input at the time and your input probably needs to track somehow the current position.\nOut it's the type of the value if successfully decoded.\nErr it's the type of the failure returned when the parser fails.\n\nThe library provides two additional set of utility functions to decode string values (partsing/text) and native JS values (partsing/value).\nDecoder Error\nIf you adopt the generic Decoder directly, you can define the shape of your error. The library provides a DecoderError type that should fit most decoding needs. The type of errors available are defined in partsing/error.\nDecoderError provides a simple method to debug the result of the decoding (toString) but still leaves the flexibility to give granular control on the representation of the error.\nBoth [Text Decoding] and [Value Decoding] use DecodeError.\nText Decoding\nTo be able to keep track of the position of the decoding within a string, Text Decoding uses TextInput to track both the entire text input and the current index.\nThe decodeText function simplifies the inputs and outputs of decoding text. It takes a text decoder (Decoder) and return a function that takes a string input and returns a DecodeResult (where input and error are of type string).\nIf you intend to write your own regular expressions decoder functions, consider using the y (sticky) flag. When used, there is no need to reallocate slices of the input string saving memory and CPU cycles. The sticky flag is not available for all implementations of JS.\nValue Decoding\nTo be able to keep track of the position of the decoding within any value, Value Decoding uses ValueInput to track both the input value and the current position within it using a path. path is an array of either string (object field name) or number (array/tuple index position).\nThe decodeValue function simplifies the inputs and outputs of decoding values. It takes a value decoder (Decoder) and return a function that takes any and returns a DecodeResult (where input is of type any and error is of type string).\nExample\nA simple decoder combinator to parse color values from strings into class instances.\nclass RGB {\n  constructor(readonly rgb: number) {}\n}\n\nclass Grey {\n  constructor(readonly value: number) {}\n}\n\nclass HSL {\n  constructor(readonly hue: number, readonly saturation: number, readonly lightness: number) {}\n}\n\ntype Color = RGB | Grey | HSL\n\nconst ratioDecoder = regexp(/0[.]\\d+/y).map(Number)\nconst rgbDecoder   = regexp(/[#]([0-9a-f]{6})/iy, 1)\n                       .map(v => parseInt(v, 16))\n                       .map(v => new RGB(v))\nconst greyDecoder  = matchInsensitive('grey').or(DecodeError.combine, matchInsensitive('gray'))\n                       .skipNext(optionalWhitespace)\n                       .pickNext(ratioDecoder)\n                       .map(v => new Grey(v))\nconst hslDecoder   = matchInsensitive('hsl(')\n                       .pickNext(\n                         ratioDecoder\n                           .separatedByTimes(match(','), 3)\n                           .map(v => new HSL(v[0], v[1], v[2]))\n                       )\n                       .skipNext(match(')'))\n\nconst colorTextDecoder = decodeText(\n    oneOf(\n      DecodeError.combine,\n      rgbDecoder,\n      greyDecoder,\n      hslDecoder\n    ).skipNext(eoi) // make sure that there is nothing left to decode\n  )\n\n// all results are wrapped in a DecodeSuccess\n// colorTextDecoder('#003355')          == new RGB(0x003355)\n// colorTextDecoder('gray 0.3')         == new Grey(0.3)\n// colorTextDecoder('gray0.2')          == new Grey(0.2)\n// colorTextDecoder('HSL(0.1,0.2,0.3)') == new HSL(0.1,0.2,0.3)Another scenario where decoding comes in handy is to validate, type and transform payloads from JSON requests. You can decode a value (after being parsed by JSON.parse) into one of the Color types described above.\nA few examples of valid JSON payloads:\n\"#003366\"{ \"grey\": 0.5 }{ \"kind\": \"hsl\", \"h\": 0.2, \"s\": 0.5, \"l\": 0.8 }Here is a colorValueDecoder definition that can deal with those cases:\nconst ratioValue = numberValue.test(v => v >= 0 && v  ({ input, index: 0 }), v => v)\n\n// example: { \"grey\": 0.5 }\nconst greyValue = objectValue(\n    { grey: ratioValue },\n    [] // the empty array means that no fields are optional\n  ).map(v => new Grey(v.grey))\n\n// example: { \"kind\": \"hsl\", \"h\": 0.2, \"s\": 0.5, \"l\": 0.8 }\nconst hslValue = objectValue(\n    {\n      kind: literalValue('hsl'),\n      h: ratioValue,\n      s: ratioValue,\n      l: ratioValue\n    },\n    []\n  ).map(v => new HSL(v.h, v.s, v.l))\n\nconst colorValueDecoder = decodeValue(\n    oneOf(\n      DecodeError.combine,\n      rgbValue,\n      greyValue,\n      hslValue\n    )\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\n                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.You may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nAPPENDIX: How to apply the Apache License to your work.\nTo apply the Apache License to your work, attach the following\nboilerplate notice, with the fields enclosed by brackets \"[]\"\nreplaced with your own identifying information. (Don't include\nthe brackets!)  The text should be enclosed in the appropriate\ncomment syntax for the file format. We also recommend that a\nfile or class name and description of purpose be included on the\nsame \"printed page\" as the copyright notice for easier\nidentification within third-party archives.\nCopyright [yyyy] [name of copyright owner]\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    16 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DecodeError   (src/.../index.ts)\n                        \n                        \n                            DecodeResult   (src/.../result.ts)\n                        \n                        \n                            Decoding   (src/.../decoder.ts)\n                        \n                        \n                            Error   (src/.../type_level.ts)\n                        \n                        \n                            Input   (src/.../type_level.ts)\n                        \n                        \n                            MarkOptionalFields   (src/.../type_level.ts)\n                        \n                        \n                            Output   (src/.../type_level.ts)\n                        \n                        \n                            TextDecoder   (src/.../index.ts)\n                        \n                        \n                            TupleToUnion   (src/.../type_level.ts)\n                        \n                        \n                            ValueDecoder   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/error/index.ts\n    \n        \n            \n                \n                    \n                        \n                        DecodeError\n                    \n                \n                \n                    \n                        DecodeError:     CustomError | ExpectedAnyOf | ExpectedAtLeast | ExpectedEoi | ExpectedField | ExpectedMatch | ExpectedNoneOf | ExpectedOnce | CombineErrors | ExpectedWithinRange | PatternMismatch | UnexpectedEoi\n\n                    \n                \n            \n        \n\n    src/core/result.ts\n    \n        \n            \n                \n                    \n                        \n                        DecodeResult\n                    \n                \n                \n                    \n                        DecodeResult:     DecodeSuccess | DecodeFailure\n\n                    \n                \n            \n        \n\n    src/core/decoder.ts\n    \n        \n            \n                \n                    \n                        \n                        Decoding\n                    \n                \n                    \n                        \n                            Type signature for a function that takes an input and decodes it into a\nresult object.\n\n                        \n                    \n                \n                    \n                        Decoding:     function\n\n                    \n                \n            \n        \n\n    src/core/type_level.ts\n    \n        \n            \n                \n                    \n                        \n                        Error\n                    \n                \n                    \n                        \n                            Extracts the Err type from a Decoder type.\n\n                        \n                    \n                \n                    \n                        Error:     \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        Input\n                    \n                \n                    \n                        \n                            Extracts the Int type from a Decoder type.\n\n                        \n                    \n                \n                    \n                        Input:     \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        MarkOptionalFields\n                    \n                \n                    \n                        \n                            Given a type for an object T and an array U of field names from U,\nreturn a new object type with the specified fields U marked as optional.\n\n                        \n                    \n                \n                    \n                        MarkOptionalFields:     \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        Output\n                    \n                \n                    \n                        \n                            Extracts the Out type from a Decoder type.\n\n                        \n                    \n                \n                    \n                        Output:     \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        TupleToUnion\n                    \n                \n                    \n                        \n                            This module contains type-level functions for compile-time usage.\n\n                        \n                    \n                \n                    \n                        TupleToUnion:      | never\n\n                    \n                \n            \n        \n\n    src/text/index.ts\n    \n        \n            \n                \n                    \n                        \n                        TextDecoder\n                    \n                \n                \n                    \n                        TextDecoder:     Decoder\n\n                    \n                \n            \n        \n\n    src/value/index.ts\n    \n        \n            \n                \n                    \n                        \n                        ValueDecoder\n                    \n                \n                \n                    \n                        ValueDecoder:     Decoder\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
