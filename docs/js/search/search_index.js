var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/CustomError.html",[0,0.184,1,1.702]],["body/classes/CustomError.html",[0,0.281,1,2.595,2,0.575,3,0.414,4,0.34,5,2.765,6,0.628,7,0.852,8,0.402,9,2.765,10,5.041,11,4.33,12,0.271,13,0.734,14,0.692,15,0.729,16,0.848,17,0.984,18,0.864,19,3.401,20,0.729,21,0.809,22,4.343,23,1.247,24,1.103,25,4.343,26,0.76,27,0.047,28,0.575,29,0.76,30,1.126,31,0.984,32,4.343,33,2.276,34,0.864,35,0.582,36,0.97,37,3.401,38,0.734,39,0.848,40,0.97,41,0.848,42,0.734,43,0.575,44,1.24,45,0.977,46,3.401,47,0.035,48,0.035]],["title/classes/DecodeResultBase.html",[0,0.184,49,1.965]],["body/classes/DecodeResultBase.html",[0,0.161,2,0.153,3,0.11,4,0.091,6,0.131,7,0.153,8,0.43,9,2.026,11,0.735,12,0.072,13,0.523,14,0.642,15,0.448,16,0.307,17,0.604,18,0.633,20,0.36,21,0.762,23,0.452,24,1.127,26,0.956,27,0.048,28,0.562,29,0.743,30,0.557,31,0.486,33,2.455,35,0.618,36,0.557,38,0.624,39,0.486,40,0.557,41,0.486,42,0.874,43,0.477,44,0.909,45,0.26,47,0.038,48,0.02,49,1.946,50,0.624,51,3.698,52,0.624,53,1.438,54,1.718,55,3.021,56,3.486,57,5.23,58,0.624,59,2.206,60,0.735,61,0.735,62,0.735,63,3.379,64,3.84,65,3.096,66,3.096,67,1.572,68,1.572,69,3.096,70,3.096,71,3.096,72,3.096,73,1.572,74,1.572,75,1.572,76,2.085,77,1.572,78,1.433,79,1.278,80,1.278,81,1.591,82,3.265,83,0.904,84,1.572,85,0.466,86,1.695,87,1.572,88,1.278,89,1.572,90,1.084,91,0.939,92,0.904,93,2.8,94,0.904,95,1.077,96,3.48,97,2.492,98,4.44,99,2.822,100,0.904,101,3.326,102,3.522,103,2.455,104,2.863,105,2.928,106,4.365,107,2.492,108,0.904,109,3.326,110,2.085,111,1.572,112,1.278,113,1.709,114,0.904,115,2.492,116,2.012,117,3.096,118,2.863,119,2.026,120,2.492,121,0.904,122,0.904,123,3.096,124,2.492,125,2.026,126,1.489,127,2.492,128,0.904,129,2.492,130,0.904,131,2.026,132,2.492,133,0.904,134,2.492,135,0.904,136,3.096,137,2.135,138,1.695,139,2.492,140,1.572,141,0.904,142,4.573,143,1.278,144,0.824,145,1.278,146,1.278,147,1.278,148,1.572,149,1.718,150,0.904,151,2.604,152,1.278,153,1.572,154,1.572,155,0.735,156,0.735,157,0.735,158,0.728,159,1.572,160,1.572,161,0.904,162,1.572,163,0.904,164,1.572,165,0.904,166,2.085,167,0.904,168,1.572,169,2.026,170,1.572,171,1.572,172,0.904,173,1.572,174,1.572,175,1.572,176,1.572,177,1.572,178,1.572,179,1.572,180,0.824,181,1.278,182,0.904,183,0.735,184,0.735,185,2.822,186,0.904,187,0.904,188,1.572,189,0.904,190,0.904,191,0.904,192,0.904,193,0.624,194,0.735,195,0.624,196,0.735,197,0.624,198,0.54,199,1.572,200,1.572,201,0.904,202,1.084,203,0.904,204,0.904]],["title/classes/ExpectedAnyOf.html",[0,0.184,205,1.702]],["body/classes/ExpectedAnyOf.html",[0,0.222,2,0.58,3,0.417,4,0.343,6,0.772,7,0.58,8,0.348,12,0.274,13,0.738,14,0.631,15,0.694,16,0.852,17,0.938,18,0.871,20,0.731,21,0.812,23,0.985,24,0.871,26,0.766,27,0.047,28,0.58,29,0.766,30,0.975,31,0.852,34,0.871,35,0.615,36,0.766,38,0.58,39,0.67,40,0.766,41,0.67,42,0.738,43,0.58,47,0.035,48,0.041,85,0.766,105,2.05,126,2.05,158,1.588,202,3.012,205,2.61,206,2.789,207,2.471,208,2.61,209,1.588,210,1.798,211,2.366,212,4.367,213,2.366,214,3.431,215,1.798,216,1.798,217,2.789,218,3.431,219,2.789,220,2.789,221,3.431,222,3.431,223,2.366,224,4.804,225,3.431,226,2.366]],["title/classes/ExpectedAtLeast.html",[0,0.184,227,1.702]],["body/classes/ExpectedAtLeast.html",[0,0.272,2,0.547,3,0.394,4,0.324,6,0.608,7,0.711,8,0.373,12,0.258,13,0.711,14,0.715,15,0.715,16,0.821,17,0.965,18,0.821,20,0.468,21,0.789,23,1.208,24,1.068,26,0.722,27,0.047,28,0.547,29,0.722,30,0.939,31,0.821,34,0.821,35,0.568,36,0.939,38,0.711,39,0.821,40,0.939,41,0.821,42,0.711,43,0.547,44,1.533,45,0.929,47,0.034,48,0.034,85,1.145,91,2.513,151,1.695,207,2.579,215,1.695,216,1.695,227,2.956,228,2.629,229,4.205,230,4.168,231,2.629,232,2.687,233,4.205,234,3.418,235,2.9,236,4.205,237,3.235,238,3.418,239,2.231]],["title/classes/ExpectedEoi.html",[0,0.184,240,1.702]],["body/classes/ExpectedEoi.html",[0,0.297,2,0.627,3,0.452,4,0.372,6,0.537,7,0.627,8,0.366,12,0.296,13,0.775,14,0.72,15,0.752,16,0.895,17,1.015,20,0.537,21,0.775,27,0.046,30,1.025,31,0.895,34,0.942,35,0.606,36,1.025,38,0.775,39,0.895,40,1.025,41,0.895,42,0.775,43,0.627,47,0.037,48,0.037,81,1.673,85,1.162,240,2.742,241,3.017,242,3.164,243,4.98,244,3.712,245,3.712]],["title/classes/ExpectedField.html",[0,0.184,246,1.702]],["body/classes/ExpectedField.html",[0,0.282,2,0.578,3,0.416,4,0.343,6,0.63,7,0.578,8,0.383,12,0.273,13,0.737,14,0.694,15,0.73,16,0.851,17,0.986,18,0.869,20,0.73,21,0.811,23,1.253,24,1.107,26,0.765,27,0.047,28,0.811,29,0.765,30,0.974,31,0.851,34,0.869,35,0.584,36,0.974,38,0.737,39,0.851,40,0.974,41,0.851,42,0.737,43,0.578,44,1.248,45,0.983,47,0.035,48,0.035,78,2.565,85,1.072,213,3.31,246,3.02,247,2.783,248,3.423,249,3.423,250,4.361,251,4.361,252,3.423,253,3.423]],["title/classes/ExpectedMatch.html",[0,0.184,254,1.702]],["body/classes/ExpectedMatch.html",[0,0.28,2,0.572,3,0.412,4,0.339,6,0.728,7,0.572,8,0.381,12,0.27,13,0.732,14,0.69,15,0.728,16,0.845,17,0.982,18,0.86,20,0.752,21,0.807,23,1.244,24,1.1,26,0.756,27,0.047,28,0.572,29,0.756,30,1.124,31,0.982,34,0.86,35,0.647,36,0.967,38,0.732,39,0.845,40,0.967,41,0.845,42,0.732,43,0.572,44,1.235,45,0.973,47,0.035,48,0.044,85,1.124,113,1.568,169,2.753,209,1.568,213,2.987,254,3.008,255,2.753,256,3.387,257,3.387,258,4.331,259,3.387]],["title/classes/ExpectedNoneOf.html",[0,0.184,260,1.702]],["body/classes/ExpectedNoneOf.html",[0,0.265,2,0.525,3,0.378,4,0.311,6,0.794,7,0.855,8,0.365,12,0.248,13,0.692,14,0.704,15,0.704,16,0.799,17,0.951,18,0.789,20,0.704,21,0.774,23,1.176,24,1.04,26,0.694,27,0.047,28,0.525,29,0.694,30,1.088,31,0.951,34,0.789,35,0.616,36,0.915,38,0.692,39,0.799,40,0.915,41,0.799,42,0.692,43,0.525,44,1.494,45,0.893,47,0.033,48,0.039,85,0.915,95,1.088,113,1.896,126,2.448,151,1.629,207,2.543,209,1.896,210,2.147,211,2.143,215,2.147,216,1.629,223,2.143,239,2.143,260,2.911,261,2.526,262,4.096,263,4.582,264,3.108,265,3.108,266,1.857,267,3.108]],["title/classes/ExpectedOnce.html",[0,0.184,268,1.702]],["body/classes/ExpectedOnce.html",[0,0.279,2,0.569,3,0.409,4,0.337,6,0.486,7,0.729,8,0.38,12,0.268,13,0.729,14,0.688,15,0.726,16,0.842,17,0.98,18,0.854,20,0.486,21,0.804,23,1.239,24,1.095,26,0.752,27,0.047,28,0.569,29,0.752,30,0.963,31,0.842,34,0.854,35,0.579,36,0.963,38,0.729,39,0.842,40,0.963,41,0.842,42,0.729,43,0.569,45,0.966,47,0.035,48,0.035,85,1.159,95,0.963,151,1.764,207,2.557,211,2.321,215,1.764,216,1.764,239,2.321,266,2.011,268,3,269,2.735,270,2.975,271,4.22,272,4.313,273,3.365]],["title/classes/ExpectedWithinRange.html",[0,0.184,274,1.702]],["body/classes/ExpectedWithinRange.html",[0,0.27,2,0.54,3,0.389,4,0.32,6,0.603,7,0.54,8,0.37,12,0.255,13,0.705,14,0.712,15,0.712,16,0.814,17,0.961,18,0.811,20,0.771,21,0.785,23,1.198,24,1.059,26,0.714,27,0.046,28,0.54,29,0.714,30,0.932,31,0.814,34,0.811,35,0.621,36,0.932,38,0.705,39,0.814,40,0.932,41,0.814,42,0.705,43,0.54,44,1.521,45,0.918,47,0.034,48,0.034,80,3.391,85,1.192,95,0.714,209,1.479,230,4.002,231,2.598,232,2.58,234,3.391,235,3.395,238,2.598,270,2.204,274,2.942,275,2.598,276,3.195,277,5.108,278,4.172,279,4.923,280,4.172,281,3.203,282,4.644,283,3.195,284,3.195]],["title/classes/PatternMismatch.html",[0,0.184,285,1.702]],["body/classes/PatternMismatch.html",[0,0.279,2,0.569,3,0.409,4,0.337,6,0.726,7,0.569,8,0.38,12,0.268,13,0.729,14,0.688,15,0.726,16,0.842,17,0.98,18,0.854,20,0.726,21,0.804,23,1.239,24,1.095,26,0.752,27,0.047,28,0.569,29,0.752,30,1.121,31,0.842,34,0.854,35,0.579,36,0.963,38,0.729,39,0.842,40,0.963,41,0.842,42,0.729,43,0.569,44,1.227,45,0.966,47,0.035,48,0.043,85,0.752,95,0.752,285,3,286,2.735,287,4.761,288,5.569,289,3.365,290,4.313,291,4.313,292,4.761,293,3.365,294,3.365]],["title/interfaces/TextInput.html",[295,1.169,296,1.493]],["body/interfaces/TextInput.html",[2,0.626,3,0.45,4,0.371,6,0.535,8,0.365,12,0.434,13,0.774,14,0.662,20,0.787,27,0.046,35,0.605,43,0.626,47,0.037,48,0.037,58,3.159,81,2.011,95,1.161,116,2.607,180,1.941,197,2.554,232,2.607,295,1.88,296,2.607,297,3.01,298,3.01,299,3.01,300,2.554,301,3.431,302,3.01,303,4.581,304,3.724,305,4.581,306,4.581]],["title/classes/UnexpectedEoi.html",[0,0.184,307,1.702]],["body/classes/UnexpectedEoi.html",[0,0.296,2,0.626,3,0.45,4,0.371,6,0.535,7,0.626,8,0.365,12,0.295,13,0.774,14,0.719,15,0.751,16,0.894,17,1.014,20,0.535,21,0.774,27,0.046,30,1.023,31,0.894,34,0.94,35,0.605,36,1.023,38,0.774,39,0.894,40,1.023,41,0.894,42,0.774,43,0.626,47,0.037,48,0.037,81,1.67,85,0.827,95,0.827,242,3.159,307,2.738,308,3.01,309,4.975,310,4.044,311,3.703,312,3.703]],["title/interfaces/ValueInput.html",[295,1.169,313,1.493]],["body/interfaces/ValueInput.html",[2,0.575,3,0.582,4,0.34,6,0.492,8,0.402,12,0.346,13,0.734,14,0.628,20,0.729,27,0.046,28,0.575,35,0.695,43,0.575,47,0.035,48,0.035,78,1.574,81,2.018,88,3.53,95,1.126,116,2.791,144,2.507,145,3.53,155,3.53,180,1.782,210,2.642,232,2.642,295,1.783,298,2.765,301,2.346,302,2.765,313,2.507,314,2.765,315,2.765,316,4.456,317,2.346,318,3.401,319,4.343,320,4.343,321,4.343]],["title/contributing.html",[322,1.649,323,1.429,324,1.649]],["body/contributing.html",[3,0.439,4,0.361,27,0.036,47,0.036,48,0.036,59,2.939,63,2.49,103,1.892,116,1.892,158,1.671,198,2.157,208,2.695,271,2.935,324,3.657,325,3.61,326,3.61,327,2.935,328,3.61,329,5.408,330,2.935,331,3.61,332,4.918,333,3.998,334,3.666,335,3.666,336,3.11,337,3.998,338,3.61,339,3.61,340,2.935,341,2.935,342,3.61,343,2.49,344,2.935,345,2.935,346,2.935,347,3.61,348,2.935,349,3.61,350,3.61,351,3.666,352,3.61,353,3.61,354,3.61,355,2.935,356,2.49,357,2.935,358,2.935,359,3.61,360,2.935,361,4.51,362,3.666,363,2.935,364,3.61,365,2.935,366,4.51,367,4.51,368,3.666,369,2.935,370,3.61,371,3.61,372,2.935,373,3.666,374,3.61,375,3.61]],["title/coverage.html",[376,3.142]],["body/coverage.html",[0,0.34,1,1.148,4,0.192,5,1.562,8,0.153,27,0.047,33,1.007,47,0.023,48,0.028,49,1.325,50,2.906,55,1.148,56,1.325,95,0.429,96,1.562,103,1.007,113,0.889,205,1.148,206,2.367,216,1.007,223,1.325,226,1.325,227,1.148,228,1.562,240,1.148,241,1.562,246,1.148,247,1.562,254,1.148,255,1.562,260,1.148,261,1.562,268,1.148,269,1.562,274,1.148,275,1.562,285,1.148,286,1.562,295,1.195,296,1.007,297,1.562,307,1.148,308,1.562,310,1.562,313,1.007,314,1.562,317,1.325,376,1.562,377,1.562,378,1.562,379,3.605,380,3.515,381,1.921,382,5.804,383,5.838,384,5.801,385,1.921,386,1.562,387,1.921,388,1.921,389,1.921,390,1.921,391,1.921,392,4.858,393,1.562,394,3.922,395,1.562,396,1.325,397,4.513,398,1.921,399,1.562,400,2.367,401,2.911,402,2.367,403,2.911,404,2.008,405,1.921,406,1.921,407,1.921,408,1.921,409,1.921,410,1.921,411,1.921,412,1.921,413,1.921,414,1.921,415,2.911,416,1.562,417,1.921,418,4.5,419,1.921,420,1.921,421,1.921,422,1.921,423,1.562,424,1.921,425,1.921,426,1.921,427,1.921,428,1.921,429,1.921,430,1.921,431,1.562,432,1.921,433,1.921,434,1.921,435,1.921,436,1.921,437,1.921,438,1.921,439,1.921,440,1.921,441,1.921,442,1.921,443,1.921]],["title/miscellaneous/enumerations.html",[444,1.429,445,2.78]],["body/miscellaneous/enumerations.html",[12,0.339,15,0.614,27,0.04,47,0.04,48,0.04,81,1.549,95,0.949,156,3.454,207,2.443,270,2.93,300,2.93,356,2.93,393,3.454,400,3.454,402,3.454,416,3.454,444,2.539,445,4.046,446,4.249,447,3.454,448,4.249,449,4.249,450,4.249,451,4.249]],["title/index.html",[12,0.191,322,1.649,323,1.429]],["body/index.html",[0,0.251,7,0.743,8,0.399,12,0.276,14,0.414,15,0.501,16,0.367,17,0.367,20,0.698,21,0.484,24,0.477,26,0.42,27,0.047,28,0.317,29,0.42,33,0.984,35,0.632,38,0.655,39,0.367,41,0.367,42,0.705,45,0.996,47,0.031,48,0.023,51,1.973,53,1.295,55,1.122,59,2.732,60,1.527,78,1.325,81,1.873,82,1.295,91,1.122,93,1.122,95,1.244,103,2.53,105,2.627,113,0.869,116,1.817,137,1.295,144,0.984,147,2.818,149,2.673,152,2.818,158,0.869,184,2.326,193,1.973,195,1.295,202,3.329,208,1.71,209,0.869,210,1.5,217,1.527,226,1.973,232,2.304,266,1.122,281,2.391,296,0.984,299,1.527,301,2.877,313,0.984,315,2.326,316,2.326,323,1.122,330,1.527,333,3.151,343,1.295,348,1.527,357,1.527,368,1.527,386,2.326,396,1.295,399,2.326,404,1.295,423,2.326,431,2.326,452,2.862,453,2.326,454,3.467,455,1.878,456,1.878,457,1.878,458,1.878,459,1.878,460,2.326,461,1.878,462,2.862,463,1.878,464,1.878,465,3.391,466,1.878,467,1.878,468,1.527,469,1.878,470,1.878,471,1.878,472,1.878,473,1.878,474,1.878,475,2.862,476,1.527,477,2.326,478,1.878,479,2.862,480,1.878,481,1.878,482,1.878,483,1.878,484,3.573,485,2.862,486,2.862,487,2.326,488,1.878,489,1.527,490,1.878,491,1.527,492,1.878,493,1.878,494,2.862,495,2.862,496,1.878,497,1.878,498,1.878,499,1.878,500,1.878,501,1.878,502,1.878,503,1.878,504,3.151,505,2.862,506,3.467,507,3.467,508,4.172,509,3.876,510,1.878,511,1.878,512,1.878,513,2.862,514,1.878,515,2.862,516,1.878,517,1.878,518,1.878,519,4.396,520,1.878,521,1.878,522,1.878,523,2.862,524,1.878,525,1.878,526,1.878,527,1.878,528,1.878,529,2.862,530,1.878,531,1.878,532,1.878,533,1.878,534,1.878,535,1.878,536,1.878,537,1.878,538,2.862,539,1.878,540,1.878,541,1.527,542,1.878,543,1.878,544,1.878,545,1.878,546,1.878,547,1.878,548,1.878,549,1.878,550,1.878,551,1.878,552,1.878,553,1.878,554,1.878,555,1.878,556,2.862,557,2.862,558,1.878,559,1.878,560,1.527,561,1.878,562,3.876,563,3.467,564,2.862,565,3.467,566,2.862,567,1.878,568,2.862,569,1.527,570,1.878,571,1.527,572,1.878,573,4.172,574,1.878,575,3.876,576,2.862,577,1.878,578,1.527,579,1.878,580,2.862,581,1.878,582,1.878,583,1.878,584,1.878,585,1.878]],["title/license.html",[322,1.649,323,1.429,336,1.649]],["body/license.html",[0,0.082,3,0.558,4,0.459,6,0.184,8,0.101,15,0.304,21,0.215,27,0.022,28,0.582,31,0.248,33,0.667,38,0.693,47,0.025,48,0.017,52,0.877,54,0.877,59,2.682,61,1.034,63,0.877,78,0.589,79,1.034,90,0.877,93,0.76,104,2.179,112,3.796,118,2.179,119,2.529,125,1.034,126,2.79,131,2.179,137,0.877,138,1.034,143,1.034,144,1.943,151,0.667,158,0.972,180,0.667,181,1.707,183,1.034,198,1.255,207,2.077,208,0.76,209,0.589,215,0.667,219,1.707,220,1.034,235,1.448,242,0.877,266,0.76,281,2.827,295,0.522,300,0.877,304,2.529,317,0.877,324,2.827,327,2.529,334,2.179,335,3.558,336,3.754,337,1.034,340,1.034,341,3.796,343,0.877,344,2.529,345,2.179,346,2.529,351,2.799,355,1.034,356,0.877,358,1.034,360,2.179,362,1.034,363,3.912,365,2.529,369,3.188,372,1.034,373,2.179,377,2.529,378,1.034,404,1.448,447,1.034,453,1.034,460,2.799,465,1.034,468,3.014,476,1.034,477,1.034,484,2.529,489,2.529,491,1.707,504,1.034,541,1.034,560,1.034,569,2.179,571,2.179,578,3.727,586,3.112,587,2.681,588,2.681,589,1.272,590,1.272,591,1.272,592,4.249,593,3.112,594,4.67,595,4.812,596,2.1,597,1.272,598,1.272,599,4.377,600,3.707,601,2.1,602,4.099,603,3.444,604,2.681,605,4.249,606,1.272,607,3.112,608,2.1,609,2.1,610,2.1,611,4.977,612,3.112,613,2.1,614,3.707,615,1.272,616,2.1,617,1.272,618,1.272,619,1.272,620,1.272,621,1.272,622,1.272,623,2.681,624,2.1,625,1.272,626,3.707,627,3.922,628,2.1,629,1.272,630,1.272,631,1.272,632,1.272,633,1.272,634,5.612,635,2.681,636,2.1,637,1.272,638,4.928,639,2.1,640,2.1,641,1.272,642,5.023,643,1.272,644,1.272,645,1.272,646,1.272,647,1.272,648,2.1,649,2.1,650,1.272,651,1.272,652,1.272,653,3.112,654,2.1,655,3.444,656,2.1,657,1.272,658,1.272,659,1.272,660,1.272,661,2.1,662,1.272,663,1.272,664,1.272,665,2.681,666,1.272,667,1.707,668,1.272,669,1.272,670,1.272,671,2.1,672,2.1,673,3.112,674,2.1,675,2.1,676,2.1,677,2.681,678,2.1,679,2.681,680,2.1,681,2.1,682,2.1,683,2.681,684,1.272,685,2.1,686,2.1,687,1.272,688,3.922,689,3.112,690,2.1,691,2.1,692,1.272,693,2.681,694,1.272,695,2.681,696,2.681,697,1.272,698,1.272,699,2.1,700,2.1,701,1.272,702,1.272,703,1.272,704,1.272,705,1.272,706,1.272,707,1.272,708,1.272,709,3.112,710,1.272,711,3.444,712,1.272,713,1.272,714,1.272,715,1.272,716,1.272,717,1.272,718,1.272,719,2.681,720,3.112,721,2.1,722,1.272,723,1.272,724,1.272,725,2.1,726,2.1,727,1.272,728,2.1,729,2.1,730,1.272,731,1.272,732,1.272,733,1.272,734,1.272,735,1.272,736,1.272,737,1.272,738,1.272,739,1.272,740,1.272,741,1.272,742,1.272,743,1.272,744,1.272,745,1.272,746,3.922,747,2.681,748,2.681,749,3.112,750,2.1,751,2.1,752,1.272,753,1.272,754,1.272,755,2.1,756,2.1,757,1.272,758,2.1,759,1.272,760,1.272,761,3.444,762,1.272,763,1.272,764,1.272,765,2.1,766,1.272,767,1.272,768,1.272,769,3.444,770,1.034,771,1.272,772,1.272,773,1.272,774,1.272,775,2.1,776,1.272,777,1.272,778,1.272,779,1.272,780,1.272,781,1.272,782,1.272,783,1.272,784,1.272,785,1.272,786,2.1,787,1.272,788,1.272,789,1.272,790,1.272,791,1.272,792,1.272,793,1.272,794,1.272,795,1.272,796,2.1,797,2.1,798,1.272,799,1.272,800,1.272,801,1.272,802,1.272,803,1.272,804,1.272,805,1.272,806,1.272,807,1.272,808,1.272,809,1.272,810,1.272,811,1.272,812,1.272,813,1.272,814,1.272,815,1.272]],["title/modules.html",[816,2.665]],["body/modules.html",[27,0.042,47,0.042,48,0.042,816,3.122]],["title/overview.html",[817,3.142]],["body/overview.html",[0,0.289,27,0.041,47,0.041,48,0.041,146,3.639,295,1.837,817,3.639,818,4.477]],["title/miscellaneous/typealiases.html",[444,1.429,819,3.42]],["body/miscellaneous/typealiases.html",[1,1.744,7,0.863,8,0.457,12,0.233,18,0.741,26,0.652,27,0.045,28,0.493,29,0.652,35,0.578,42,0.493,47,0.038,48,0.032,50,2.013,51,3.419,52,2.013,53,2.013,54,2.709,55,2.348,56,2.709,58,2.013,62,2.373,78,1.818,81,1.808,82,2.709,85,0.652,86,2.373,90,2.013,91,1.744,93,2.348,95,1.274,103,1.53,105,2.654,113,1.818,144,2.327,149,2.013,157,3.194,158,1.818,180,2.059,193,2.013,194,2.373,195,2.013,196,2.373,197,2.013,198,1.744,205,1.744,210,1.53,227,1.744,240,1.744,246,1.744,254,1.744,260,1.744,268,1.744,274,1.744,285,1.744,296,1.53,307,1.744,313,1.53,379,2.373,395,2.373,396,3.419,397,2.373,418,2.373,444,1.744,487,3.61,667,2.373,770,3.194,816,2.013,820,2.919,821,4.441,822,2.919,823,2.919,824,4.957,825,4.441,826,4.441,827,4.441,828,4.441,829,2.919,830,4.441,831,2.919,832,2.919,833,2.919,834,4.441,835,2.919,836,2.919,837,2.919,838,3.929]]],"invertedIndex":[["",{"_index":27,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":226,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"coverage.html":{},"index.html":{}}}],["0.2",{"_index":564,"title":{},"body":{"index.html":{}}}],["0.3",{"_index":547,"title":{},"body":{"index.html":{}}}],["0.5",{"_index":562,"title":{},"body":{"index.html":{}}}],["0.8",{"_index":566,"title":{},"body":{"index.html":{}}}],["0/1",{"_index":411,"title":{},"body":{"coverage.html":{}}}],["003366",{"_index":561,"title":{},"body":{"index.html":{}}}],["1",{"_index":266,"title":{},"body":{"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"index.html":{},"license.html":{}}}],["1/1",{"_index":384,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":383,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":818,"title":{},"body":{"overview.html":{}}}],["16",{"_index":521,"title":{},"body":{"index.html":{}}}],["17/17",{"_index":390,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":146,"title":{},"body":{"classes/DecodeResultBase.html":{},"overview.html":{}}}],["2.0",{"_index":588,"title":{},"body":{"license.html":{}}}],["2004",{"_index":590,"title":{},"body":{"license.html":{}}}],["25/26",{"_index":381,"title":{},"body":{"coverage.html":{}}}],["28/29",{"_index":391,"title":{},"body":{"coverage.html":{}}}],["29/30",{"_index":389,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":462,"title":{},"body":{"index.html":{}}}],["3/3",{"_index":394,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":392,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":619,"title":{},"body":{"license.html":{}}}],["9",{"_index":598,"title":{},"body":{"license.html":{}}}],["96",{"_index":380,"title":{},"body":{"coverage.html":{}}}],["9a",{"_index":517,"title":{},"body":{"index.html":{}}}],["_e",{"_index":64,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["_i",{"_index":65,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["_o",{"_index":66,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["abov",{"_index":560,"title":{},"body":{"index.html":{},"license.html":{}}}],["abstract",{"_index":57,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["accept",{"_index":327,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["accompani",{"_index":338,"title":{},"body":{"contributing.html":{}}}],["act",{"_index":604,"title":{},"body":{"license.html":{}}}],["add",{"_index":729,"title":{},"body":{"license.html":{}}}],["addendum",{"_index":731,"title":{},"body":{"license.html":{}}}],["addit",{"_index":468,"title":{},"body":{"index.html":{},"license.html":{}}}],["adopt",{"_index":473,"title":{},"body":{"index.html":{}}}],["advis",{"_index":781,"title":{},"body":{"license.html":{}}}],["again",{"_index":359,"title":{},"body":{"contributing.html":{}}}],["against",{"_index":700,"title":{},"body":{"license.html":{}}}],["agre",{"_index":749,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":337,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["alia",{"_index":838,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alias",{"_index":820,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alleg",{"_index":704,"title":{},"body":{"license.html":{}}}],["allow",{"_index":9,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{}}}],["alon",{"_index":697,"title":{},"body":{"license.html":{}}}],["along",{"_index":723,"title":{},"body":{"license.html":{}}}],["alongsid",{"_index":730,"title":{},"body":{"license.html":{}}}],["alreadi",{"_index":354,"title":{},"body":{"contributing.html":{}}}],["and(b",{"_index":714,"title":{},"body":{"license.html":{}}}],["and(c",{"_index":718,"title":{},"body":{"license.html":{}}}],["and(d",{"_index":722,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":787,"title":{},"body":{"license.html":{}}}],["annot",{"_index":646,"title":{},"body":{"license.html":{}}}],["anyarrayvalu",{"_index":419,"title":{},"body":{"coverage.html":{}}}],["anyvalu",{"_index":420,"title":{},"body":{"coverage.html":{}}}],["apach",{"_index":586,"title":{},"body":{"license.html":{}}}],["appear",{"_index":727,"title":{},"body":{"license.html":{}}}],["appendix",{"_index":640,"title":{},"body":{"license.html":{}}}],["appli",{"_index":104,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["applic",{"_index":747,"title":{},"body":{"license.html":{}}}],["appropri",{"_index":758,"title":{},"body":{"license.html":{}}}],["archiv",{"_index":808,"title":{},"body":{"license.html":{}}}],["aris",{"_index":773,"title":{},"body":{"license.html":{}}}],["array",{"_index":210,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedNoneOf.html":{},"interfaces/ValueInput.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["array/tupl",{"_index":503,"title":{},"body":{"index.html":{}}}],["arrayvalu",{"_index":421,"title":{},"body":{"coverage.html":{}}}],["assert",{"_index":794,"title":{},"body":{"license.html":{}}}],["associ",{"_index":138,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["assum",{"_index":759,"title":{},"body":{"license.html":{}}}],["attach",{"_index":639,"title":{},"body":{"license.html":{}}}],["attribut",{"_index":720,"title":{},"body":{"license.html":{}}}],["aunion",{"_index":194,"title":{},"body":{"classes/DecodeResultBase.html":{},"miscellaneous/typealiases.html":{}}}],["author",{"_index":601,"title":{},"body":{"license.html":{}}}],["authorship",{"_index":635,"title":{},"body":{"license.html":{}}}],["avail",{"_index":477,"title":{},"body":{"index.html":{},"license.html":{}}}],["base",{"_index":643,"title":{},"body":{"license.html":{}}}],["basi",{"_index":750,"title":{},"body":{"license.html":{}}}],["be",{"_index":558,"title":{},"body":{"index.html":{}}}],["behalf",{"_index":655,"title":{},"body":{"license.html":{}}}],["below",{"_index":641,"title":{},"body":{"license.html":{}}}],["benefici",{"_index":622,"title":{},"body":{"license.html":{}}}],["between",{"_index":80,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedWithinRange.html":{}}}],["bind",{"_index":652,"title":{},"body":{"license.html":{}}}],["boilerpl",{"_index":795,"title":{},"body":{"license.html":{}}}],["booleanvalu",{"_index":422,"title":{},"body":{"coverage.html":{}}}],["both",{"_index":147,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{}}}],["bracket",{"_index":797,"title":{},"body":{"license.html":{}}}],["bring",{"_index":86,"title":{},"body":{"classes/DecodeResultBase.html":{},"miscellaneous/typealiases.html":{}}}],["build",{"_index":455,"title":{},"body":{"index.html":{}}}],["captur",{"_index":270,"title":{},"body":{"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"miscellaneous/enumerations.html":{}}}],["carri",{"_index":715,"title":{},"body":{"license.html":{}}}],["case",{"_index":572,"title":{},"body":{"index.html":{}}}],["caus",{"_index":609,"title":{},"body":{"license.html":{}}}],["chain",{"_index":306,"title":{},"body":{"interfaces/TextInput.html":{}}}],["chang",{"_index":717,"title":{},"body":{"license.html":{}}}],["char",{"_index":398,"title":{},"body":{"coverage.html":{}}}],["charact",{"_index":300,"title":{},"body":{"interfaces/TextInput.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["charg",{"_index":679,"title":{},"body":{"license.html":{}}}],["choos",{"_index":782,"title":{},"body":{"license.html":{}}}],["cla",{"_index":352,"title":{},"body":{"contributing.html":{}}}],["claim",{"_index":693,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"coverage.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["code",{"_index":360,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["color",{"_index":506,"title":{},"body":{"index.html":{}}}],["colortextdecod",{"_index":537,"title":{},"body":{"index.html":{}}}],["colortextdecoder('#003355",{"_index":544,"title":{},"body":{"index.html":{}}}],["colortextdecoder('gray",{"_index":546,"title":{},"body":{"index.html":{}}}],["colortextdecoder('gray0.2",{"_index":549,"title":{},"body":{"index.html":{}}}],["colortextdecoder('hsl(0.1,0.2,0.3",{"_index":551,"title":{},"body":{"index.html":{}}}],["colorvaluedecod",{"_index":568,"title":{},"body":{"index.html":{}}}],["combin",{"_index":453,"title":{},"body":{"index.html":{},"license.html":{}}}],["come",{"_index":554,"title":{},"body":{"index.html":{}}}],["comma",{"_index":218,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["comment",{"_index":799,"title":{},"body":{"license.html":{}}}],["commerci",{"_index":780,"title":{},"body":{"license.html":{}}}],["common",{"_index":61,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["commun",{"_index":373,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["compil",{"_index":90,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["compli",{"_index":734,"title":{},"body":{"license.html":{}}}],["complianc",{"_index":810,"title":{},"body":{"license.html":{}}}],["comput",{"_index":778,"title":{},"body":{"license.html":{}}}],["concat",{"_index":223,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedNoneOf.html":{},"coverage.html":{}}}],["concaten",{"_index":222,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["concator(this.descript",{"_index":267,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["condit",{"_index":126,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedNoneOf.html":{},"license.html":{}}}],["configur",{"_index":629,"title":{},"body":{"license.html":{}}}],["consequenti",{"_index":772,"title":{},"body":{"license.html":{}}}],["consid",{"_index":492,"title":{},"body":{"index.html":{}}}],["consist",{"_index":788,"title":{},"body":{"license.html":{}}}],["conspicu",{"_index":666,"title":{},"body":{"license.html":{}}}],["const",{"_index":202,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"index.html":{}}}],["constitut",{"_index":705,"title":{},"body":{"license.html":{}}}],["constru",{"_index":732,"title":{},"body":{"license.html":{}}}],["construct",{"_index":23,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{}}}],["constructor",{"_index":18,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"miscellaneous/typealiases.html":{}}}],["constructor(ent",{"_index":211,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{}}}],["constructor(field",{"_index":249,"title":{},"body":{"classes/ExpectedField.html":{}}}],["constructor(input",{"_index":76,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["constructor(messag",{"_index":19,"title":{},"body":{"classes/CustomError.html":{}}}],["constructor(min",{"_index":231,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{}}}],["constructor(pattern",{"_index":289,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["constructor(readonli",{"_index":45,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"index.html":{}}}],["constructor(valu",{"_index":257,"title":{},"body":{"classes/ExpectedMatch.html":{}}}],["consult",{"_index":370,"title":{},"body":{"contributing.html":{}}}],["consum",{"_index":157,"title":{},"body":{"classes/DecodeResultBase.html":{},"miscellaneous/typealiases.html":{}}}],["contain",{"_index":180,"title":{},"body":{"classes/DecodeResultBase.html":{},"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["content",{"_index":728,"title":{},"body":{"license.html":{}}}],["context",{"_index":318,"title":{},"body":{"interfaces/ValueInput.html":{}}}],["contract",{"_index":613,"title":{},"body":{"license.html":{}}}],["contribut",{"_index":324,"title":{"contributing.html":{}},"body":{"contributing.html":{},"license.html":{}}}],["contribution(",{"_index":696,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":335,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["contributori",{"_index":706,"title":{},"body":{"license.html":{}}}],["control",{"_index":460,"title":{},"body":{"index.html":{},"license.html":{}}}],["contruct",{"_index":154,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["convers",{"_index":632,"title":{},"body":{"license.html":{}}}],["copi",{"_index":709,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":341,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["correspond",{"_index":182,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["counterclaim",{"_index":702,"title":{},"body":{"license.html":{}}}],["coverag",{"_index":376,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cpu",{"_index":500,"title":{},"body":{"index.html":{}}}],["creat",{"_index":200,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["cross",{"_index":701,"title":{},"body":{"license.html":{}}}],["current",{"_index":116,"title":{},"body":{"classes/DecodeResultBase.html":{},"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"index.html":{}}}],["custom",{"_index":10,"title":{},"body":{"classes/CustomError.html":{}}}],["customari",{"_index":744,"title":{},"body":{"license.html":{}}}],["customererror",{"_index":25,"title":{},"body":{"classes/CustomError.html":{}}}],["customerror",{"_index":1,"title":{"classes/CustomError.html":{}},"body":{"classes/CustomError.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["cycl",{"_index":501,"title":{},"body":{"index.html":{}}}],["damag",{"_index":769,"title":{},"body":{"license.html":{}}}],["date",{"_index":708,"title":{},"body":{"license.html":{}}}],["deal",{"_index":570,"title":{},"body":{"index.html":{}}}],["debug",{"_index":41,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{}}}],["decod",{"_index":95,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["decodeerror",{"_index":396,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["decodeerror.combin",{"_index":538,"title":{},"body":{"index.html":{}}}],["decodefailur",{"_index":56,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["decodefailure(input",{"_index":204,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodefailure(this.input",{"_index":188,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodererror",{"_index":475,"title":{},"body":{"index.html":{}}}],["decoderesult",{"_index":51,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["decoderesultbas",{"_index":49,"title":{"classes/DecodeResultBase.html":{}},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{}}}],["decoderesultbase.flatmap",{"_index":162,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.flatmaperror",{"_index":168,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.getunsafefailur",{"_index":177,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.getunsafesuccess",{"_index":176,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.isfailur",{"_index":174,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.issuccess",{"_index":173,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.map",{"_index":164,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.maperror",{"_index":170,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.mapinput",{"_index":171,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.match",{"_index":160,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodesuccess",{"_index":55,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["decodesuccess(f(this.input",{"_index":172,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodesuccess(input",{"_index":203,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodesuccess(this.input",{"_index":166,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodetext",{"_index":399,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["decodevalu",{"_index":423,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["default",{"_index":34,"title":{},"body":{"classes/CustomError.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}}}],["defend",{"_index":790,"title":{},"body":{"license.html":{}}}],["defin",{"_index":21,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{},"license.html":{}}}],["definit",{"_index":569,"title":{},"body":{"index.html":{},"license.html":{}}}],["deliber",{"_index":766,"title":{},"body":{"license.html":{}}}],["deriv",{"_index":642,"title":{},"body":{"license.html":{}}}],["describ",{"_index":209,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedWithinRange.html":{},"index.html":{},"license.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"license.html":{}}}],["design",{"_index":668,"title":{},"body":{"license.html":{}}}],["determin",{"_index":757,"title":{},"body":{"license.html":{}}}],["differ",{"_index":356,"title":{},"body":{"contributing.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["digit",{"_index":400,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["direct",{"_index":607,"title":{},"body":{"license.html":{}}}],["directli",{"_index":60,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{}}}],["disclaim",{"_index":745,"title":{},"body":{"license.html":{}}}],["discrimin",{"_index":36,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}}}],["discuss",{"_index":663,"title":{},"body":{"license.html":{}}}],["display",{"_index":686,"title":{},"body":{"license.html":{}}}],["distribut",{"_index":594,"title":{},"body":{"license.html":{}}}],["document",{"_index":377,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["don't",{"_index":358,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["each",{"_index":673,"title":{},"body":{"license.html":{}}}],["easier",{"_index":806,"title":{},"body":{"license.html":{}}}],["editori",{"_index":644,"title":{},"body":{"license.html":{}}}],["elabor",{"_index":647,"title":{},"body":{"license.html":{}}}],["electron",{"_index":656,"title":{},"body":{"license.html":{}}}],["element",{"_index":321,"title":{},"body":{"interfaces/ValueInput.html":{}}}],["employ",{"_index":339,"title":{},"body":{"contributing.html":{}}}],["empti",{"_index":577,"title":{},"body":{"index.html":{}}}],["enclos",{"_index":796,"title":{},"body":{"license.html":{}}}],["end",{"_index":242,"title":{},"body":{"classes/ExpectedEoi.html":{},"classes/UnexpectedEoi.html":{},"license.html":{}}}],["entir",{"_index":299,"title":{},"body":{"interfaces/TextInput.html":{},"index.html":{}}}],["entiti",{"_index":207,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["entitytostr",{"_index":216,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"coverage.html":{}}}],["entitytostring(this.ent",{"_index":239,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{}}}],["enumer",{"_index":445,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["eoi",{"_index":310,"title":{},"body":{"classes/UnexpectedEoi.html":{},"coverage.html":{}}}],["eot",{"_index":243,"title":{},"body":{"classes/ExpectedEoi.html":{}}}],["err",{"_index":82,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["err2",{"_index":109,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["error",{"_index":7,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["error(\"can't",{"_index":178,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["even",{"_index":355,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["event",{"_index":762,"title":{},"body":{"license.html":{}}}],["exact",{"_index":256,"title":{},"body":{"classes/ExpectedMatch.html":{}}}],["exampl",{"_index":504,"title":{},"body":{"index.html":{},"license.html":{}}}],["except",{"_index":118,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["exclud",{"_index":665,"title":{},"body":{"license.html":{}}}],["exclus",{"_index":678,"title":{},"body":{"license.html":{}}}],["execut",{"_index":739,"title":{},"body":{"license.html":{}}}],["exercis",{"_index":624,"title":{},"body":{"license.html":{}}}],["exist",{"_index":87,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["expect",{"_index":85,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"miscellaneous/typealiases.html":{}}}],["expected_any_of",{"_index":265,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["expectedanyof",{"_index":205,"title":{"classes/ExpectedAnyOf.html":{}},"body":{"classes/ExpectedAnyOf.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedatleast",{"_index":227,"title":{"classes/ExpectedAtLeast.html":{}},"body":{"classes/ExpectedAtLeast.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedeoi",{"_index":240,"title":{"classes/ExpectedEoi.html":{}},"body":{"classes/ExpectedEoi.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedfield",{"_index":246,"title":{"classes/ExpectedField.html":{}},"body":{"classes/ExpectedField.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedmatch",{"_index":254,"title":{"classes/ExpectedMatch.html":{}},"body":{"classes/ExpectedMatch.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectednoneof",{"_index":260,"title":{"classes/ExpectedNoneOf.html":{}},"body":{"classes/ExpectedNoneOf.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedonc",{"_index":268,"title":{"classes/ExpectedOnce.html":{}},"body":{"classes/ExpectedOnce.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedwithinrang",{"_index":274,"title":{"classes/ExpectedWithinRange.html":{}},"body":{"classes/ExpectedWithinRange.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["explicitli",{"_index":735,"title":{},"body":{"license.html":{}}}],["export",{"_index":43,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{}}}],["express",{"_index":491,"title":{},"body":{"index.html":{},"license.html":{}}}],["extend",{"_index":153,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["extract",{"_index":830,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["f",{"_index":106,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["f(this.failur",{"_index":189,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["f(this.valu",{"_index":163,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["f(v",{"_index":167,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["f]{6})/iy",{"_index":518,"title":{},"body":{"index.html":{}}}],["fail",{"_index":113,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["failur",{"_index":33,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["failure(f(this.input",{"_index":192,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["failure(this.input",{"_index":190,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["failuretostr",{"_index":401,"title":{},"body":{"coverage.html":{}}}],["fals",{"_index":175,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["fee",{"_index":783,"title":{},"body":{"license.html":{}}}],["few",{"_index":330,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["fieeld",{"_index":248,"title":{},"body":{"classes/ExpectedField.html":{}}}],["field",{"_index":78,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedField.html":{},"interfaces/ValueInput.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["fifti",{"_index":617,"title":{},"body":{"license.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"coverage.html":{},"license.html":{}}}],["finitenumbervalu",{"_index":424,"title":{},"body":{"coverage.html":{}}}],["fit",{"_index":476,"title":{},"body":{"index.html":{},"license.html":{}}}],["flag",{"_index":495,"title":{},"body":{"index.html":{}}}],["flatmap",{"_index":67,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["flatmap(f",{"_index":97,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["flatmaperror",{"_index":68,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["flatmaperror(f",{"_index":107,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["flexibl",{"_index":482,"title":{},"body":{"index.html":{}}}],["follow",{"_index":334,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["form",{"_index":112,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["format",{"_index":801,"title":{},"body":{"license.html":{}}}],["found",{"_index":448,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["free",{"_index":681,"title":{},"body":{"license.html":{}}}],["full",{"_index":459,"title":{},"body":{"index.html":{}}}],["function",{"_index":105,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["gener",{"_index":158,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"contributing.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["get",{"_index":322,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["getunsafefailur",{"_index":69,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["getunsafesuccess",{"_index":70,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["github",{"_index":366,"title":{},"body":{"contributing.html":{}}}],["give",{"_index":343,"title":{},"body":{"contributing.html":{},"index.html":{},"license.html":{}}}],["given",{"_index":832,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["goodwil",{"_index":776,"title":{},"body":{"license.html":{}}}],["google'",{"_index":374,"title":{},"body":{"contributing.html":{}}}],["govern",{"_index":815,"title":{},"body":{"license.html":{}}}],["grant",{"_index":602,"title":{},"body":{"license.html":{}}}],["granular",{"_index":483,"title":{},"body":{"index.html":{}}}],["grey",{"_index":508,"title":{},"body":{"index.html":{}}}],["grey(0.2",{"_index":550,"title":{},"body":{"index.html":{}}}],["grey(0.3",{"_index":548,"title":{},"body":{"index.html":{}}}],["grey(v",{"_index":528,"title":{},"body":{"index.html":{}}}],["grey(v.grey",{"_index":579,"title":{},"body":{"index.html":{}}}],["greydecod",{"_index":523,"title":{},"body":{"index.html":{}}}],["greyvalu",{"_index":576,"title":{},"body":{"index.html":{}}}],["grossli",{"_index":767,"title":{},"body":{"license.html":{}}}],["guard",{"_index":124,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["guidelin",{"_index":332,"title":{},"body":{"contributing.html":{}}}],["h",{"_index":563,"title":{},"body":{"index.html":{}}}],["handi",{"_index":555,"title":{},"body":{"index.html":{}}}],["harmless",{"_index":792,"title":{},"body":{"license.html":{}}}],["head",{"_index":347,"title":{},"body":{"contributing.html":{}}}],["help",{"_index":371,"title":{},"body":{"contributing.html":{}}}],["helper",{"_index":199,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["here",{"_index":567,"title":{},"body":{"index.html":{}}}],["herebi",{"_index":674,"title":{},"body":{"license.html":{}}}],["herein",{"_index":737,"title":{},"body":{"license.html":{}}}],["hold",{"_index":791,"title":{},"body":{"license.html":{}}}],["hsl",{"_index":509,"title":{},"body":{"index.html":{}}}],["hsl(0.1,0.2,0.3)anoth",{"_index":552,"title":{},"body":{"index.html":{}}}],["hsl(v.h",{"_index":582,"title":{},"body":{"index.html":{}}}],["hsl(v[0",{"_index":533,"title":{},"body":{"index.html":{}}}],["hsldecod",{"_index":529,"title":{},"body":{"index.html":{}}}],["hslvalu",{"_index":580,"title":{},"body":{"index.html":{}}}],["http://www.apache.org/licens",{"_index":591,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/licens",{"_index":812,"title":{},"body":{"license.html":{}}}],["https://cla.developers.google.com",{"_index":349,"title":{},"body":{"contributing.html":{}}}],["hue",{"_index":510,"title":{},"body":{"index.html":{}}}],["human",{"_index":30,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}}}],["identif",{"_index":807,"title":{},"body":{"license.html":{}}}],["identifi",{"_index":317,"title":{},"body":{"interfaces/ValueInput.html":{},"coverage.html":{},"license.html":{}}}],["ii",{"_index":615,"title":{},"body":{"license.html":{}}}],["iii",{"_index":621,"title":{},"body":{"license.html":{}}}],["implement",{"_index":502,"title":{},"body":{"index.html":{}}}],["impli",{"_index":751,"title":{},"body":{"license.html":{}}}],["import",{"_index":215,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"license.html":{}}}],["improv",{"_index":664,"title":{},"body":{"license.html":{}}}],["in2",{"_index":136,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["inabl",{"_index":774,"title":{},"body":{"license.html":{}}}],["incident",{"_index":771,"title":{},"body":{"license.html":{}}}],["includ",{"_index":363,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["inclus",{"_index":235,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{},"license.html":{}}}],["incorpor",{"_index":671,"title":{},"body":{"license.html":{}}}],["incur",{"_index":793,"title":{},"body":{"license.html":{}}}],["indemn",{"_index":785,"title":{},"body":{"license.html":{}}}],["indemnifi",{"_index":789,"title":{},"body":{"license.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["indic",{"_index":637,"title":{},"body":{"license.html":{}}}],["indirect",{"_index":608,"title":{},"body":{"license.html":{}}}],["individu",{"_index":623,"title":{},"body":{"license.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{}}}],["inform",{"_index":198,"title":{},"body":{"classes/DecodeResultBase.html":{},"contributing.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["infring",{"_index":695,"title":{},"body":{"license.html":{}}}],["input",{"_index":81,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedEoi.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["insid",{"_index":302,"title":{},"body":{"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{}}}],["inspect",{"_index":88,"title":{},"body":{"classes/DecodeResultBase.html":{},"interfaces/ValueInput.html":{}}}],["instanc",{"_index":24,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"index.html":{}}}],["institut",{"_index":698,"title":{},"body":{"license.html":{}}}],["int",{"_index":831,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["integervalu",{"_index":425,"title":{},"body":{"coverage.html":{}}}],["intend",{"_index":488,"title":{},"body":{"index.html":{}}}],["intention",{"_index":654,"title":{},"body":{"license.html":{}}}],["interfac",{"_index":295,"title":{"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{}},"body":{"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{},"coverage.html":{},"license.html":{},"overview.html":{}}}],["irrevoc",{"_index":682,"title":{},"body":{"license.html":{}}}],["isfailur",{"_index":71,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["issu",{"_index":662,"title":{},"body":{"license.html":{}}}],["issuccess",{"_index":72,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["istoken",{"_index":426,"title":{},"body":{"coverage.html":{}}}],["it'",{"_index":193,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["januari",{"_index":589,"title":{},"body":{"license.html":{}}}],["javascript",{"_index":319,"title":{},"body":{"interfaces/ValueInput.html":{}}}],["js",{"_index":315,"title":{},"body":{"interfaces/ValueInput.html":{},"index.html":{}}}],["json",{"_index":557,"title":{},"body":{"index.html":{}}}],["json.pars",{"_index":559,"title":{},"body":{"index.html":{}}}],["json.stringify(this.input",{"_index":179,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["justifi",{"_index":32,"title":{},"body":{"classes/CustomError.html":{}}}],["keep",{"_index":485,"title":{},"body":{"index.html":{}}}],["kind",{"_index":15,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{}}}],["l",{"_index":565,"title":{},"body":{"index.html":{}}}],["languag",{"_index":814,"title":{},"body":{"license.html":{}}}],["last",{"_index":221,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["law",{"_index":748,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":703,"title":{},"body":{"license.html":{}}}],["lazi",{"_index":385,"title":{},"body":{"coverage.html":{}}}],["leav",{"_index":481,"title":{},"body":{"index.html":{}}}],["left",{"_index":542,"title":{},"body":{"index.html":{}}}],["legal",{"_index":603,"title":{},"body":{"license.html":{}}}],["length",{"_index":224,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["letter",{"_index":402,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["level",{"_index":836,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["liabil",{"_index":761,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":768,"title":{},"body":{"license.html":{}}}],["librari",{"_index":454,"title":{},"body":{"index.html":{}}}],["licens",{"_index":336,"title":{"license.html":{}},"body":{"contributing.html":{},"license.html":{}}}],["license.y",{"_index":733,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":599,"title":{},"body":{"license.html":{}}}],["light",{"_index":512,"title":{},"body":{"index.html":{}}}],["limit",{"_index":627,"title":{},"body":{"license.html":{}}}],["link",{"_index":151,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"license.html":{}}}],["list",{"_index":220,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"license.html":{}}}],["liter",{"_index":140,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["literalvalu",{"_index":427,"title":{},"body":{"coverage.html":{}}}],["literalvalue('hsl",{"_index":581,"title":{},"body":{"index.html":{}}}],["litig",{"_index":699,"title":{},"body":{"license.html":{}}}],["loss",{"_index":775,"title":{},"body":{"license.html":{}}}],["love",{"_index":326,"title":{},"body":{"contributing.html":{}}}],["lower_case_lett",{"_index":451,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lowercaselett",{"_index":403,"title":{},"body":{"coverage.html":{}}}],["made",{"_index":636,"title":{},"body":{"license.html":{}}}],["mail",{"_index":660,"title":{},"body":{"license.html":{}}}],["main",{"_index":89,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["make",{"_index":404,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["malfunct",{"_index":779,"title":{},"body":{"license.html":{}}}],["manag",{"_index":610,"title":{},"body":{"license.html":{}}}],["map",{"_index":73,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["map(f",{"_index":129,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["map(v",{"_index":519,"title":{},"body":{"index.html":{}}}],["maperror",{"_index":74,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["maperror(f",{"_index":132,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["mapinput",{"_index":75,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["mapinput(f",{"_index":134,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["mark",{"_index":667,"title":{},"body":{"license.html":{},"miscellaneous/typealiases.html":{}}}],["markoptionalfield",{"_index":825,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["match",{"_index":48,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["match(o",{"_index":139,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["matchanycharof",{"_index":405,"title":{},"body":{"coverage.html":{}}}],["matchinsensit",{"_index":406,"title":{},"body":{"coverage.html":{}}}],["matchinsensitive('gray",{"_index":525,"title":{},"body":{"index.html":{}}}],["matchinsensitive('grey').or(decodeerror.combin",{"_index":524,"title":{},"body":{"index.html":{}}}],["matchinsensitive('hsl",{"_index":530,"title":{},"body":{"index.html":{}}}],["matchnocharof",{"_index":407,"title":{},"body":{"coverage.html":{}}}],["max",{"_index":277,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["maximum",{"_index":280,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["mean",{"_index":578,"title":{},"body":{"index.html":{},"license.html":{}}}],["mechan",{"_index":630,"title":{},"body":{"license.html":{}}}],["media",{"_index":633,"title":{},"body":{"license.html":{}}}],["medium",{"_index":710,"title":{},"body":{"license.html":{}}}],["meet",{"_index":712,"title":{},"body":{"license.html":{}}}],["member",{"_index":364,"title":{},"body":{"contributing.html":{}}}],["memori",{"_index":499,"title":{},"body":{"index.html":{}}}],["merchant",{"_index":753,"title":{},"body":{"license.html":{}}}],["mere",{"_index":651,"title":{},"body":{"license.html":{}}}],["messag",{"_index":11,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{}}}],["method",{"_index":16,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{}}}],["min",{"_index":230,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{}}}],["minimum",{"_index":234,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{}}}],["miscellan",{"_index":444,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["mismatch",{"_index":292,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["miss",{"_index":213,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{}}}],["modif",{"_index":626,"title":{},"body":{"license.html":{}}}],["modifi",{"_index":304,"title":{},"body":{"interfaces/TextInput.html":{},"license.html":{}}}],["modul",{"_index":816,"title":{"modules.html":{}},"body":{"modules.html":{},"miscellaneous/typealiases.html":{}}}],["more",{"_index":372,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["mostli",{"_index":40,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}}}],["name",{"_index":28,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/ValueInput.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["nativ",{"_index":471,"title":{},"body":{"index.html":{}}}],["necessarili",{"_index":694,"title":{},"body":{"license.html":{}}}],["need",{"_index":333,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["neglig",{"_index":765,"title":{},"body":{"license.html":{}}}],["never",{"_index":58,"title":{},"body":{"classes/DecodeResultBase.html":{},"interfaces/TextInput.html":{},"miscellaneous/typealiases.html":{}}}],["new",{"_index":103,"title":{},"body":{"classes/DecodeResultBase.html":{},"contributing.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["next",{"_index":155,"title":{},"body":{"classes/DecodeResultBase.html":{},"interfaces/ValueInput.html":{}}}],["non",{"_index":677,"title":{},"body":{"license.html":{}}}],["none",{"_index":263,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["normal",{"_index":447,"title":{},"body":{"miscellaneous/enumerations.html":{},"license.html":{}}}],["noth",{"_index":541,"title":{},"body":{"index.html":{},"license.html":{}}}],["notic",{"_index":638,"title":{},"body":{"license.html":{}}}],["notwithstand",{"_index":736,"title":{},"body":{"license.html":{}}}],["nullablevalu",{"_index":428,"title":{},"body":{"coverage.html":{}}}],["nullvalu",{"_index":429,"title":{},"body":{"coverage.html":{}}}],["number",{"_index":232,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{},"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{},"index.html":{}}}],["numbervalu",{"_index":430,"title":{},"body":{"coverage.html":{}}}],["numbervalue.test(v",{"_index":574,"title":{},"body":{"index.html":{}}}],["o",{"_index":142,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["o.failure(thi",{"_index":187,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["o.success(thi",{"_index":161,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["object",{"_index":144,"title":{},"body":{"classes/DecodeResultBase.html":{},"interfaces/ValueInput.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["objectvalu",{"_index":431,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["oblig",{"_index":786,"title":{},"body":{"license.html":{}}}],["obtain",{"_index":811,"title":{},"body":{"license.html":{}}}],["occurr",{"_index":279,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["offer",{"_index":690,"title":{},"body":{"license.html":{}}}],["on",{"_index":208,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"contributing.html":{},"index.html":{},"license.html":{}}}],["onc",{"_index":271,"title":{},"body":{"classes/ExpectedOnce.html":{},"contributing.html":{}}}],["oneof",{"_index":386,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["open",{"_index":375,"title":{},"body":{"contributing.html":{}}}],["oper",{"_index":110,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["option",{"_index":29,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["optionalvalu",{"_index":432,"title":{},"body":{"coverage.html":{}}}],["optionalwhitespac",{"_index":408,"title":{},"body":{"coverage.html":{}}}],["origin",{"_index":131,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["otherwis",{"_index":614,"title":{},"body":{"license.html":{}}}],["out",{"_index":93,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["out2",{"_index":101,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["output",{"_index":487,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["outstand",{"_index":620,"title":{},"body":{"license.html":{}}}],["over",{"_index":348,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["overview",{"_index":817,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":600,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":616,"title":{},"body":{"license.html":{}}}],["page",{"_index":805,"title":{},"body":{"license.html":{}}}],["param",{"_index":44,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{}}}],["paramet",{"_index":26,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["pars",{"_index":505,"title":{},"body":{"index.html":{}}}],["parseint(v",{"_index":520,"title":{},"body":{"index.html":{}}}],["parser",{"_index":467,"title":{},"body":{"index.html":{}}}],["parsers/decod",{"_index":456,"title":{},"body":{"index.html":{}}}],["part",{"_index":346,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["parti",{"_index":726,"title":{},"body":{"license.html":{}}}],["particular",{"_index":754,"title":{},"body":{"license.html":{}}}],["parts",{"_index":452,"title":{},"body":{"index.html":{}}}],["partsing/core/decod",{"_index":461,"title":{},"body":{"index.html":{}}}],["partsing/error",{"_index":478,"title":{},"body":{"index.html":{}}}],["partsing/text",{"_index":470,"title":{},"body":{"index.html":{}}}],["partsing/valu",{"_index":472,"title":{},"body":{"index.html":{}}}],["pass",{"_index":145,"title":{},"body":{"classes/DecodeResultBase.html":{},"interfaces/ValueInput.html":{}}}],["patch",{"_index":328,"title":{},"body":{"contributing.html":{}}}],["patent",{"_index":688,"title":{},"body":{"license.html":{}}}],["path",{"_index":316,"title":{},"body":{"interfaces/ValueInput.html":{},"index.html":{}}}],["pathtostr",{"_index":433,"title":{},"body":{"coverage.html":{}}}],["pattern",{"_index":288,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["patternmismatch",{"_index":285,"title":{"classes/PatternMismatch.html":{}},"body":{"classes/PatternMismatch.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["payload",{"_index":556,"title":{},"body":{"index.html":{}}}],["percent",{"_index":618,"title":{},"body":{"license.html":{}}}],["perform",{"_index":143,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["permiss",{"_index":344,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["perpetu",{"_index":675,"title":{},"body":{"license.html":{}}}],["pertain",{"_index":721,"title":{},"body":{"license.html":{}}}],["picknext",{"_index":531,"title":{},"body":{"index.html":{}}}],["picknext(ratiodecod",{"_index":527,"title":{},"body":{"index.html":{}}}],["place",{"_index":183,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["placehold",{"_index":84,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["point",{"_index":305,"title":{},"body":{"interfaces/TextInput.html":{}}}],["popul",{"_index":148,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["portion",{"_index":464,"title":{},"body":{"index.html":{}}}],["posit",{"_index":301,"title":{},"body":{"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{},"index.html":{}}}],["possibl",{"_index":54,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["power",{"_index":606,"title":{},"body":{"license.html":{}}}],["predic",{"_index":449,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["prefer",{"_index":625,"title":{},"body":{"license.html":{}}}],["prepar",{"_index":684,"title":{},"body":{"license.html":{}}}],["print",{"_index":804,"title":{},"body":{"license.html":{}}}],["probabl",{"_index":357,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["product",{"_index":743,"title":{},"body":{"license.html":{}}}],["project",{"_index":329,"title":{},"body":{"contributing.html":{}}}],["promin",{"_index":716,"title":{},"body":{"license.html":{}}}],["properti",{"_index":13,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{}}}],["protect",{"_index":120,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["provid",{"_index":38,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{},"license.html":{}}}],["publicli",{"_index":685,"title":{},"body":{"license.html":{}}}],["pull",{"_index":367,"title":{},"body":{"contributing.html":{}}}],["purpos",{"_index":369,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["r",{"_index":98,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["rang",{"_index":282,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["ratiodecod",{"_index":513,"title":{},"body":{"index.html":{}}}],["ratiovalu",{"_index":573,"title":{},"body":{"index.html":{}}}],["reach",{"_index":303,"title":{},"body":{"interfaces/TextInput.html":{}}}],["readabl",{"_index":31,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"license.html":{}}}],["readeabl",{"_index":291,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["readonli",{"_index":14,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"index.html":{}}}],["realli",{"_index":457,"title":{},"body":{"index.html":{}}}],["realloc",{"_index":496,"title":{},"body":{"index.html":{}}}],["reason",{"_index":181,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["receiv",{"_index":669,"title":{},"body":{"license.html":{}}}],["recipi",{"_index":713,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":802,"title":{},"body":{"license.html":{}}}],["record/object",{"_index":251,"title":{},"body":{"classes/ExpectedField.html":{}}}],["recov",{"_index":111,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["redistribut",{"_index":345,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["regard",{"_index":740,"title":{},"body":{"license.html":{}}}],["regexp",{"_index":409,"title":{},"body":{"coverage.html":{}}}],["regexp(/0[.]\\d+/y).map(numb",{"_index":514,"title":{},"body":{"index.html":{}}}],["regexp(/[#]([0",{"_index":516,"title":{},"body":{"index.html":{}}}],["regular",{"_index":490,"title":{},"body":{"index.html":{}}}],["remain",{"_index":650,"title":{},"body":{"license.html":{}}}],["rememb",{"_index":463,"title":{},"body":{"index.html":{}}}],["repeat",{"_index":229,"title":{},"body":{"classes/ExpectedAtLeast.html":{}}}],["repetit",{"_index":236,"title":{},"body":{"classes/ExpectedAtLeast.html":{}}}],["replac",{"_index":798,"title":{},"body":{"license.html":{}}}],["repres",{"_index":648,"title":{},"body":{"license.html":{}}}],["represent",{"_index":39,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{}}}],["reproduc",{"_index":683,"title":{},"body":{"license.html":{}}}],["reproduct",{"_index":593,"title":{},"body":{"license.html":{}}}],["request",{"_index":368,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["requir",{"_index":365,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["respons",{"_index":756,"title":{},"body":{"license.html":{}}}],["rest",{"_index":410,"title":{},"body":{"coverage.html":{}}}],["result",{"_index":47,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["retain",{"_index":340,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["return",{"_index":42,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["review",{"_index":361,"title":{},"body":{"contributing.html":{}}}],["revis",{"_index":645,"title":{},"body":{"license.html":{}}}],["rgb",{"_index":507,"title":{},"body":{"index.html":{}}}],["rgb(0x003355",{"_index":545,"title":{},"body":{"index.html":{}}}],["rgb(v",{"_index":522,"title":{},"body":{"index.html":{}}}],["rgbdecod",{"_index":515,"title":{},"body":{"index.html":{}}}],["rgbvalu",{"_index":585,"title":{},"body":{"index.html":{}}}],["right",{"_index":125,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["risk",{"_index":760,"title":{},"body":{"license.html":{}}}],["royalti",{"_index":680,"title":{},"body":{"license.html":{}}}],["s",{"_index":152,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{}}}],["safeintegervalu",{"_index":434,"title":{},"body":{"coverage.html":{}}}],["same",{"_index":803,"title":{},"body":{"license.html":{}}}],["satur",{"_index":511,"title":{},"body":{"index.html":{}}}],["save",{"_index":498,"title":{},"body":{"index.html":{}}}],["scenario",{"_index":553,"title":{},"body":{"index.html":{}}}],["scope",{"_index":127,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["section",{"_index":596,"title":{},"body":{"license.html":{}}}],["see",{"_index":63,"title":{},"body":{"classes/DecodeResultBase.html":{},"contributing.html":{},"license.html":{}}}],["sell",{"_index":691,"title":{},"body":{"license.html":{}}}],["sent",{"_index":659,"title":{},"body":{"license.html":{}}}],["separ",{"_index":219,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"license.html":{}}}],["separatedbytimes(match",{"_index":532,"title":{},"body":{"index.html":{}}}],["sequenc",{"_index":387,"title":{},"body":{"coverage.html":{}}}],["servic",{"_index":742,"title":{},"body":{"license.html":{}}}],["set",{"_index":469,"title":{},"body":{"index.html":{}}}],["shall",{"_index":595,"title":{},"body":{"license.html":{}}}],["shape",{"_index":474,"title":{},"body":{"index.html":{}}}],["share",{"_index":79,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["sign",{"_index":350,"title":{},"body":{"contributing.html":{}}}],["signatur",{"_index":62,"title":{},"body":{"classes/DecodeResultBase.html":{},"miscellaneous/typealiases.html":{}}}],["simpl",{"_index":479,"title":{},"body":{"index.html":{}}}],["simpli",{"_index":342,"title":{},"body":{"contributing.html":{}}}],["simplifi",{"_index":486,"title":{},"body":{"index.html":{}}}],["skipnext(eoi",{"_index":539,"title":{},"body":{"index.html":{}}}],["skipnext(match",{"_index":536,"title":{},"body":{"index.html":{}}}],["skipnext(optionalwhitespac",{"_index":526,"title":{},"body":{"index.html":{}}}],["slice",{"_index":497,"title":{},"body":{"index.html":{}}}],["small",{"_index":331,"title":{},"body":{"contributing.html":{}}}],["softwar",{"_index":628,"title":{},"body":{"license.html":{}}}],["sole",{"_index":755,"title":{},"body":{"license.html":{}}}],["somehow",{"_index":466,"title":{},"body":{"index.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"license.html":{}}}],["special",{"_index":770,"title":{},"body":{"license.html":{},"miscellaneous/typealiases.html":{}}}],["specif",{"_index":813,"title":{},"body":{"license.html":{}}}],["specifi",{"_index":835,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../decoder.t",{"_index":823,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../entity.t",{"_index":446,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../index.t",{"_index":821,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../result.t",{"_index":822,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../type_level.t",{"_index":824,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/core/decoder.t",{"_index":379,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/result.t",{"_index":50,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/result.ts:101",{"_index":128,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:108",{"_index":122,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:115",{"_index":121,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:122",{"_index":114,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:127",{"_index":150,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:34",{"_index":83,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:38",{"_index":92,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:42",{"_index":94,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:46",{"_index":77,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:62",{"_index":141,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:71",{"_index":100,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:76",{"_index":108,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:82",{"_index":130,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:88",{"_index":133,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:94",{"_index":135,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/type_level.t",{"_index":829,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/error/custom_error.t",{"_index":5,"title":{},"body":{"classes/CustomError.html":{},"coverage.html":{}}}],["src/error/custom_error.ts:24",{"_index":22,"title":{},"body":{"classes/CustomError.html":{}}}],["src/error/custom_error.ts:35",{"_index":37,"title":{},"body":{"classes/CustomError.html":{}}}],["src/error/entity.t",{"_index":393,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/error/expected_any_of.t",{"_index":206,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"coverage.html":{}}}],["src/error/expected_any_of.ts:44",{"_index":212,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["src/error/expected_any_of.ts:56",{"_index":214,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["src/error/expected_at_least.t",{"_index":228,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"coverage.html":{}}}],["src/error/expected_at_least.ts:26",{"_index":233,"title":{},"body":{"classes/ExpectedAtLeast.html":{}}}],["src/error/expected_at_least.ts:38",{"_index":237,"title":{},"body":{"classes/ExpectedAtLeast.html":{}}}],["src/error/expected_eoi.t",{"_index":241,"title":{},"body":{"classes/ExpectedEoi.html":{},"coverage.html":{}}}],["src/error/expected_eoi.ts:24",{"_index":244,"title":{},"body":{"classes/ExpectedEoi.html":{}}}],["src/error/expected_eoi.ts:29",{"_index":245,"title":{},"body":{"classes/ExpectedEoi.html":{}}}],["src/error/expected_field.t",{"_index":247,"title":{},"body":{"classes/ExpectedField.html":{},"coverage.html":{}}}],["src/error/expected_field.ts:24",{"_index":250,"title":{},"body":{"classes/ExpectedField.html":{}}}],["src/error/expected_field.ts:35",{"_index":252,"title":{},"body":{"classes/ExpectedField.html":{}}}],["src/error/expected_match.t",{"_index":255,"title":{},"body":{"classes/ExpectedMatch.html":{},"coverage.html":{}}}],["src/error/expected_match.ts:25",{"_index":258,"title":{},"body":{"classes/ExpectedMatch.html":{}}}],["src/error/expected_match.ts:36",{"_index":259,"title":{},"body":{"classes/ExpectedMatch.html":{}}}],["src/error/expected_none_of.t",{"_index":261,"title":{},"body":{"classes/ExpectedNoneOf.html":{},"coverage.html":{}}}],["src/error/expected_none_of.ts:28",{"_index":262,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["src/error/expected_none_of.ts:41",{"_index":264,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["src/error/expected_once.t",{"_index":269,"title":{},"body":{"classes/ExpectedOnce.html":{},"coverage.html":{}}}],["src/error/expected_once.ts:27",{"_index":272,"title":{},"body":{"classes/ExpectedOnce.html":{}}}],["src/error/expected_once.ts:37",{"_index":273,"title":{},"body":{"classes/ExpectedOnce.html":{}}}],["src/error/expected_within_range.t",{"_index":275,"title":{},"body":{"classes/ExpectedWithinRange.html":{},"coverage.html":{}}}],["src/error/expected_within_range.ts:25",{"_index":278,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["src/error/expected_within_range.ts:37",{"_index":283,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["src/error/index.t",{"_index":395,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/error/pattern_mismatch.t",{"_index":286,"title":{},"body":{"classes/PatternMismatch.html":{},"coverage.html":{}}}],["src/error/pattern_mismatch.ts:24",{"_index":290,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["src/error/pattern_mismatch.ts:35",{"_index":293,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["src/error/unexpected_eoi.t",{"_index":308,"title":{},"body":{"classes/UnexpectedEoi.html":{},"coverage.html":{}}}],["src/error/unexpected_eoi.ts:24",{"_index":311,"title":{},"body":{"classes/UnexpectedEoi.html":{}}}],["src/error/unexpected_eoi.ts:29",{"_index":312,"title":{},"body":{"classes/UnexpectedEoi.html":{}}}],["src/text/index.t",{"_index":397,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/text/input.t",{"_index":297,"title":{},"body":{"interfaces/TextInput.html":{},"coverage.html":{}}}],["src/value/index.t",{"_index":418,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/value/input.t",{"_index":314,"title":{},"body":{"interfaces/ValueInput.html":{},"coverage.html":{}}}],["start",{"_index":323,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["state",{"_index":689,"title":{},"body":{"license.html":{}}}],["statement",{"_index":378,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["sticki",{"_index":494,"title":{},"body":{"index.html":{}}}],["still",{"_index":480,"title":{},"body":{"index.html":{}}}],["stoppag",{"_index":777,"title":{},"body":{"license.html":{}}}],["store",{"_index":298,"title":{},"body":{"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{}}}],["stream",{"_index":197,"title":{},"body":{"classes/DecodeResultBase.html":{},"interfaces/TextInput.html":{},"miscellaneous/typealiases.html":{}}}],["string",{"_index":20,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"index.html":{}}}],["stringvalu",{"_index":435,"title":{},"body":{"coverage.html":{}}}],["subject",{"_index":672,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":687,"title":{},"body":{"license.html":{}}}],["submiss",{"_index":362,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["submit",{"_index":351,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["subsequ",{"_index":670,"title":{},"body":{"license.html":{}}}],["succ",{"_index":186,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["succe",{"_index":388,"title":{},"body":{"coverage.html":{}}}],["succeed",{"_index":201,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["success",{"_index":96,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{}}}],["successfulli",{"_index":195,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["such",{"_index":611,"title":{},"body":{"license.html":{}}}],["super(input",{"_index":159,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["supersed",{"_index":738,"title":{},"body":{"license.html":{}}}],["support",{"_index":784,"title":{},"body":{"license.html":{}}}],["sure",{"_index":540,"title":{},"body":{"index.html":{}}}],["syntax",{"_index":800,"title":{},"body":{"license.html":{}}}],["system",{"_index":661,"title":{},"body":{"license.html":{}}}],["t",{"_index":833,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["tabl",{"_index":443,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":442,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":149,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["takecharbetween",{"_index":412,"title":{},"body":{"coverage.html":{}}}],["takecharwhil",{"_index":413,"title":{},"body":{"coverage.html":{}}}],["term",{"_index":592,"title":{},"body":{"license.html":{}}}],["termin",{"_index":707,"title":{},"body":{"license.html":{}}}],["testchar",{"_index":414,"title":{},"body":{"coverage.html":{}}}],["testobject",{"_index":436,"title":{},"body":{"coverage.html":{}}}],["testtyp",{"_index":437,"title":{},"body":{"coverage.html":{}}}],["testvalu",{"_index":438,"title":{},"body":{"coverage.html":{}}}],["text",{"_index":484,"title":{},"body":{"index.html":{},"license.html":{}}}],["textdecod",{"_index":826,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["textinput",{"_index":296,"title":{"interfaces/TextInput.html":{}},"body":{"interfaces/TextInput.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["theori",{"_index":763,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":653,"title":{},"body":{"license.html":{}}}],["third",{"_index":725,"title":{},"body":{"license.html":{}}}],["this.failur",{"_index":185,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["this.failures.map(f",{"_index":191,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["this.field",{"_index":253,"title":{},"body":{"classes/ExpectedField.html":{}}}],["this.flatmap(v",{"_index":165,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["this.max",{"_index":284,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["this.messag",{"_index":46,"title":{},"body":{"classes/CustomError.html":{}}}],["this.min",{"_index":238,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{}}}],["this.pattern",{"_index":294,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["this.valu",{"_index":169,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedMatch.html":{}}}],["those",{"_index":571,"title":{},"body":{"index.html":{},"license.html":{}}}],["three",{"_index":196,"title":{},"body":{"classes/DecodeResultBase.html":{},"miscellaneous/typealiases.html":{}}}],["through",{"_index":597,"title":{},"body":{"license.html":{}}}],["throw",{"_index":117,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["time",{"_index":91,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedAtLeast.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["titl",{"_index":752,"title":{},"body":{"license.html":{}}}],["tort",{"_index":764,"title":{},"body":{"license.html":{}}}],["tostr",{"_index":17,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{}}}],["track",{"_index":465,"title":{},"body":{"index.html":{},"license.html":{}}}],["trade",{"_index":741,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":719,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":692,"title":{},"body":{"license.html":{}}}],["transfom",{"_index":102,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["transform",{"_index":137,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"license.html":{}}}],["translat",{"_index":631,"title":{},"body":{"license.html":{}}}],["travers",{"_index":320,"title":{},"body":{"interfaces/ValueInput.html":{}}}],["tri",{"_index":156,"title":{},"body":{"classes/DecodeResultBase.html":{},"miscellaneous/enumerations.html":{}}}],["true",{"_index":123,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["tupletounion",{"_index":827,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["tuplevalu",{"_index":439,"title":{},"body":{"coverage.html":{}}}],["two",{"_index":53,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["twp",{"_index":276,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["type",{"_index":8,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":819,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["u",{"_index":834,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["undefineablevalu",{"_index":440,"title":{},"body":{"coverage.html":{}}}],["undefinedvalu",{"_index":441,"title":{},"body":{"coverage.html":{}}}],["under",{"_index":605,"title":{},"body":{"license.html":{}}}],["unexpect",{"_index":309,"title":{},"body":{"classes/UnexpectedEoi.html":{}}}],["unexpectedeoi",{"_index":307,"title":{"classes/UnexpectedEoi.html":{}},"body":{"classes/UnexpectedEoi.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["union",{"_index":52,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["unless",{"_index":119,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["unwrap",{"_index":115,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["uppercase_lett",{"_index":450,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["uppercaselett",{"_index":415,"title":{},"body":{"coverage.html":{}}}],["us",{"_index":59,"title":{},"body":{"classes/DecodeResultBase.html":{},"contributing.html":{},"index.html":{},"license.html":{}}}],["usag",{"_index":837,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["util",{"_index":217,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"index.html":{}}}],["v",{"_index":575,"title":{},"body":{"index.html":{}}}],["v.",{"_index":583,"title":{},"body":{"index.html":{}}}],["v.l",{"_index":584,"title":{},"body":{"index.html":{}}}],["v[1",{"_index":534,"title":{},"body":{"index.html":{}}}],["v[2",{"_index":535,"title":{},"body":{"index.html":{}}}],["valid",{"_index":184,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{}}}],["valu",{"_index":35,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["valuedecod",{"_index":828,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["valueinput",{"_index":313,"title":{"interfaces/ValueInput.html":{}},"body":{"interfaces/ValueInput.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["values.length",{"_index":225,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["variabl",{"_index":382,"title":{},"body":{"coverage.html":{}}}],["verbal",{"_index":657,"title":{},"body":{"license.html":{}}}],["version",{"_index":587,"title":{},"body":{"license.html":{}}}],["void",{"_index":99,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["want",{"_index":458,"title":{},"body":{"index.html":{}}}],["warranti",{"_index":746,"title":{},"body":{"license.html":{}}}],["wasn't",{"_index":287,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["we'd",{"_index":325,"title":{},"body":{"contributing.html":{}}}],["wherev",{"_index":724,"title":{},"body":{"license.html":{}}}],["whether",{"_index":612,"title":{},"body":{"license.html":{}}}],["whitespac",{"_index":416,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["whole",{"_index":649,"title":{},"body":{"license.html":{}}}],["within",{"_index":281,"title":{},"body":{"classes/ExpectedWithinRange.html":{},"index.html":{},"license.html":{}}}],["without",{"_index":711,"title":{},"body":{"license.html":{}}}],["withposit",{"_index":417,"title":{},"body":{"coverage.html":{}}}],["work",{"_index":634,"title":{},"body":{"license.html":{}}}],["worldwid",{"_index":676,"title":{},"body":{"license.html":{}}}],["wrap",{"_index":543,"title":{},"body":{"index.html":{}}}],["write",{"_index":489,"title":{},"body":{"index.html":{},"license.html":{}}}],["written",{"_index":658,"title":{},"body":{"license.html":{}}}],["y",{"_index":493,"title":{},"body":{"index.html":{}}}],["you'v",{"_index":353,"title":{},"body":{"contributing.html":{}}}],["yyyi",{"_index":809,"title":{},"body":{"license.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/CustomError.html":{"url":"classes/CustomError.html","title":"class - CustomError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/custom_error.ts\n        \n\n            \n                Description\n            \n            \n                Error type that allows for a customized message.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/custom_error.ts:24\n                            \n                        \n\n                \n                    \n                            Construct an instance of CustomerError.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The human readable message that justifies the failure.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'custom-error'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/custom_error.ts:24\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/custom_error.ts:35\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class CustomError {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'custom-error' = 'custom-error'\n\n  /**\n   * Construct an instance of `CustomerError`.\n   * @param message The human readable message that justifies the failure.\n   */\n  constructor(readonly message: string) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return this.message\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DecodeResultBase.html":{"url":"classes/DecodeResultBase.html","title":"class - DecodeResultBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DecodeResultBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/result.ts\n        \n\n            \n                Description\n            \n            \n                DecodeResult is a union type that has two possible constructors\nDecodeSuccess and DecodeFailure.\nDecodeResultBase is abstract and should never be used directly. It is\ndefined to provide a common signature to the only two possible constructors\nDecodeSuccess and DecodeFailure.\nSee DecodeResult.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                _E\n                            \n                            \n                                    Readonly\n                                _I\n                            \n                            \n                                    Readonly\n                                _O\n                            \n                            \n                                    Abstract\n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                flatMap\n                            \n                            \n                                    Abstract\n                                flatMapError\n                            \n                            \n                                    Abstract\n                                getUnsafeFailures\n                            \n                            \n                                    Abstract\n                                getUnsafeSuccess\n                            \n                            \n                                    Abstract\n                                isFailure\n                            \n                            \n                                    Abstract\n                                isSuccess\n                            \n                            \n                                    Abstract\n                                map\n                            \n                            \n                                    Abstract\n                                mapError\n                            \n                            \n                                    Abstract\n                                mapInput\n                            \n                            \n                                    Abstract\n                                match\n                            \n                            \n                                    Abstract\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(input: In)\n                    \n                \n                        \n                            \n                                Defined in src/core/result.ts:46\n                            \n                        \n\n                \n                    \n                            Construct an instance of DecodeResult. The only field that is shared\nbetween DecodeSuccess and DecodeFailure is input: In.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        input\n                                                  \n                                                        \n                                                                    In\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            _E\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _E:     Err\n\n                    \n                \n                    \n                        \n                            Type :     Err\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/result.ts:34\n                            \n                        \n\n                \n                    \n                        These placeholder (_I, _O, _E) types are not expected to bring any\nvalue. They exist to allow inspecting the main types of a DecodeResult at\ncompile time.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            _I\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _I:     In\n\n                    \n                \n                    \n                        \n                            Type :     In\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/result.ts:38\n                            \n                        \n\n                \n                    \n                        See _E.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            _O\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _O:     Out\n\n                    \n                \n                    \n                        \n                            Type :     Out\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/result.ts:42\n                            \n                        \n\n                \n                    \n                        See _E.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \"decode-success\" | \"decode-failure\"\n\n                    \n                \n                    \n                        \n                            Type :     \"decode-success\" | \"decode-failure\"\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/result.ts:46\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            flatMap\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        flatMap(f: (r: Out) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:71\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        Out2\n                                \n                            \n                        \n\n                \n                    \n                            Transfom the result of a DecodeSuccess into a new DecodeResult by applying\nthe function f to it.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            flatMapError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        flatMapError(f: (r: Err[]) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:76\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        Err2\n                                \n                            \n                        \n\n                \n                    \n                            Transfom the result of a DecodeFailure into a new DecodeResult by applying\nthe function f to it. This operation allows to recover form a failed result.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            getUnsafeFailures\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getUnsafeFailures()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:122\n                            \n                        \n\n\n                \n                    \n                            Unwrap the result value of a DecodeFailure. If the current instance is of\ntype DecodeSuccess then this function will throw an exception.\nDo not use unless you are protecting from exceptions.\n\n\n                            \n                                Returns :     Err[]\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            getUnsafeSuccess\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getUnsafeSuccess()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:115\n                            \n                        \n\n\n                \n                    \n                            Unwrap the result value of a DecodeSuccess. If the current instance is of\ntype DecodeFailure then this function will throw an exception.\nDo not use unless you are protecting from exceptions.\n\n\n                            \n                                Returns :     Out\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            isFailure\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        isFailure()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:108\n                            \n                        \n\n\n                \n                    \n                            Return true if the current instance is of type DecodeFailure. It also\nprovide a guard value so that properties of DecodeFailure can be used\nin the right conditional scope.\n\n\n                            \n                                Returns :     DecodeFailure\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            isSuccess\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        isSuccess()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:101\n                            \n                        \n\n\n                \n                    \n                            Return true if the current instance is of type DecodeSuccess. It also\nprovide a guard value so that properties of DecodeSuccess can be used\nin the right conditional scope.\n\n\n                            \n                                Returns :     DecodeSuccess\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            map\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        map(f: (r: Out) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:82\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        Out2\n                                \n                            \n                        \n\n                \n                    \n                            Transfom the result of a DecodeSuccess into a new value of type Out2 by\napplying the function f to the original Out value.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            mapError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        mapError(f: (r: Err) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:88\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        Err2\n                                \n                            \n                        \n\n                \n                    \n                            Transfom the result of a DecodeFailure into a new value of type Err2 by\napplying the function f to the original Err value.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            mapInput\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        mapInput(f: (i: In) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:94\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        In2\n                                \n                            \n                        \n\n                \n                    \n                            Transform the input value associated with the current DecodeResult into\na new input of type In2.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            match\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        match(o: literal type)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:62\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        O\n                                \n                            \n                        \n\n                \n                    \n                            Transform an instance of DecodeResult into any type O.\nTo perform the transformation an object is passed with 2 fields success\nand failure. Both fields must be populated with a function.\n\nsuccess will take a function DecodeSuccess -> O\nfailure will take a function DecodeFailure -> O\n\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        o\n                                                        \n                                                                    literal type\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     O\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:127\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        abstract class DecodeResultBase {\n  /**\n   * These placeholder (`_I`, `_O`, `_E`) types are not expected to bring any\n   * value. They exist to allow inspecting the main types of a DecodeResult at\n   * compile time.\n   */\n  readonly _E!: Err\n  /**\n   * See {@link _E}.\n   */\n  readonly _I!: In\n  /**\n   * See {@link _E}.\n   */\n  readonly _O!: Out\n  /**\n   * Type discriminator\n   */\n  abstract readonly kind: 'decode-success' | 'decode-failure'\n\n  /**\n   * Construct an instance of `{@link DecodeResult}`. The only field that is shared\n   * between `{@link DecodeSuccess}` and `{@link DecodeFailure}` is `input: In`.\n   */\n  constructor(readonly input: In) {}\n\n  /**\n   * Transform an instance of `{@link DecodeResult}` into any type `O`.\n   * To perform the transformation an object is passed with 2 fields `success`\n   * and `failure`. Both fields must be populated with a function.\n   *\n   * * `success` will take a function `DecodeSuccess -> O`\n   * * `failure` will take a function `DecodeFailure -> O`\n   */\n  abstract match(o: {\n    success: (s: DecodeSuccess) => O\n    failure: (f: DecodeFailure) => O\n  }): O\n\n  /**\n   * Transfom the result of a `DecodeSuccess` into a new `DecodeResult` by applying\n   * the function `f` to it.\n   */\n  abstract flatMap(f: (r: Out) => DecodeResult): DecodeResult\n  /**\n   * Transfom the result of a `DecodeFailure` into a new `DecodeResult` by applying\n   * the function `f` to it. This operation allows to recover form a failed result.\n   */\n  abstract flatMapError(f: (r: Err[]) => DecodeResult): DecodeResult\n\n  /**\n   * Transfom the result of a `DecodeSuccess` into a new value of type `Out2` by\n   * applying the function `f` to the original `Out` value.\n   */\n  abstract map(f: (r: Out) => Out2): DecodeResult\n\n  /**\n   * Transfom the result of a `DecodeFailure` into a new value of type `Err2` by\n   * applying the function `f` to the original `Err` value.\n   */\n  abstract mapError(f: (r: Err) => Err2): DecodeResult\n\n  /**\n   * Transform the input value associated with the current `DecodeResult` into\n   * a new input of type `In2`.\n   */\n  abstract mapInput(f: (i: In) => In2): DecodeResult\n\n  /**\n   * Return true if the current instance is of type `DecodeSuccess`. It also\n   * provide a guard value so that properties of `DecodeSuccess` can be used\n   * in the right conditional scope.\n   */\n  abstract isSuccess(): this is DecodeSuccess\n\n  /**\n   * Return true if the current instance is of type `DecodeFailure`. It also\n   * provide a guard value so that properties of `DecodeFailure` can be used\n   * in the right conditional scope.\n   */\n  abstract isFailure(): this is DecodeFailure\n\n  /**\n   * Unwrap the result value of a `DecodeSuccess`. If the current instance is of\n   * type `DecodeFailure` then this function will throw an exception.\n   * Do not use unless you are protecting from exceptions.\n   */\n  abstract getUnsafeSuccess(): Out\n\n  /**\n   * Unwrap the result value of a `DecodeFailure`. If the current instance is of\n   * type `DecodeSuccess` then this function will throw an exception.\n   * Do not use unless you are protecting from exceptions.\n   */\n  abstract getUnsafeFailures(): Err[]\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  abstract toString(): string\n}\n\nexport class DecodeSuccess extends DecodeResultBase {\n  /**\n   * Type discriminator\n   */\n  readonly kind = 'decode-success'\n\n  /**\n   * Contruct an instance of `DecodeSuccess`.\n   * @param input The input value that the next decoder should try to consume.\n   * @param value The value generated from the decoding operation.\n   */\n  constructor(input: In, readonly value: Out) {\n    super(input)\n  }\n\n  /**\n   * See {@link DecodeResultBase.match}\n   */\n  match(o: { success: (s: DecodeSuccess) => O; failure: (f: DecodeFailure) => O }): O {\n    return o.success(this)\n  }\n\n  /**\n   * See {@link DecodeResultBase.flatMap}\n   */\n  flatMap(f: (r: Out) => DecodeResult): DecodeResult {\n    return f(this.value)\n  }\n\n  /**\n   * See {@link DecodeResultBase.map}\n   */\n  map(f: (r: Out) => Out2): DecodeResult {\n    return this.flatMap(v => new DecodeSuccess(this.input, f(v)))\n  }\n\n  /**\n   * See {@link DecodeResultBase.flatMapError}\n   */\n  flatMapError(f: (r: Err[]) => DecodeResult): DecodeResult {\n    return new DecodeSuccess(this.input, this.value)\n  }\n\n  /**\n   * See {@link DecodeResultBase.mapError}\n   */\n  mapError(f: (r: Err) => Err2): DecodeResult {\n    return new DecodeSuccess(this.input, this.value)\n  }\n\n  /**\n   * See {@link DecodeResultBase.mapInput}\n   */\n  mapInput(f: (i: In) => In2): DecodeResult {\n    return new DecodeSuccess(f(this.input), this.value)\n  }\n\n  /**\n   * See {@link DecodeResultBase.isSuccess}\n   */\n  isSuccess(): this is DecodeSuccess {\n    return true\n  }\n\n  /**\n   * See {@link DecodeResultBase.isFailure}\n   */\n  isFailure(): this is DecodeFailure {\n    return false\n  }\n\n  /**\n   * See {@link DecodeResultBase.getUnsafeSuccess}\n   */\n  getUnsafeSuccess(): Out {\n    return this.value\n  }\n\n  /**\n   * See {@link DecodeResultBase.getUnsafeFailures}\n   */\n  getUnsafeFailures(): Err[] {\n    throw new Error(\"can't get failure from success\")\n  }\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString(): string {\n    return `DecodeSuccess: ${JSON.stringify(this.input)}`\n  }\n}\n\nexport class DecodeFailure extends DecodeResultBase {\n  /**\n   * Type discriminator\n   */\n  readonly kind = 'decode-failure'\n\n  /**\n   * Contains all the possible reasons of why a decoder failed.\n   */\n  readonly failures: Err[]\n\n  /**\n   * Contruct an instance of `DecodeFailure`.\n   * @param input The input value that corresponds to the place where the decoder\n   * failed to generate a valid result.\n   * @param failures The error messages associated with the reason why the decoder\n   * failed.\n   */\n  constructor(input: In, ...failures: Err[]) {\n    super(input)\n    this.failures = failures\n  }\n\n  /**\n   * See {@link DecodeResultBase.match}\n   */\n  match(o: {\n    success: (succ: DecodeSuccess) => O\n    failure: (fail: DecodeFailure) => O\n  }): O {\n    return o.failure(this)\n  }\n\n  /**\n   * See {@link DecodeResultBase.flatMap}\n   */\n  flatMap(f: (r: Out) => DecodeResult): DecodeResult {\n    return new DecodeFailure(this.input, ...this.failures)\n  }\n\n  /**\n   * See {@link DecodeResultBase.map}\n   */\n  map(f: (r: Out) => Out2): DecodeResult {\n    return new DecodeFailure(this.input, ...this.failures)\n  }\n\n  /**\n   * See {@link DecodeResultBase.flatMapError}\n   */\n  flatMapError(f: (r: Err[]) => DecodeResult): DecodeResult {\n    return f(this.failures)\n  }\n\n  /**\n   * See {@link DecodeResultBase.mapError}\n   */\n  mapError(f: (r: Err) => Err2): DecodeResult {\n    return failure(this.input, ...this.failures.map(f))\n  }\n\n  /**\n   * See {@link DecodeResultBase.mapInput}\n   */\n  mapInput(f: (i: In) => In2): DecodeResult {\n    return failure(f(this.input), ...this.failures)\n  }\n\n  /**\n   * See {@link DecodeResultBase.isSuccess}\n   */\n  isSuccess(): this is DecodeSuccess {\n    return false\n  }\n\n  /**\n   * See {@link DecodeResultBase.isFailure}\n   */\n  isFailure(): this is DecodeFailure {\n    return true\n  }\n\n  /**\n   * See {@link DecodeResultBase.getUnsafeSuccess}\n   */\n  getUnsafeSuccess(): Out {\n    throw new Error(\"can't get success from failure\")\n  }\n\n  /**\n   * See {@link DecodeResultBase.getUnsafeFailure}\n   */\n  getUnsafeFailures(): Err[] {\n    return this.failures\n  }\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString(): string {\n    return `DecodeFailure: ${JSON.stringify(this.input)}`\n  }\n}\n\n/**\n * `DecodeResult` it's an either type, aunion type of two possible constructors.\n * It can either be:\n *\n * * `DecodeSuccess`: a decoder was able to successfully decode a value\n * * `DecodeFailure`: a decoder failed to decode a value\n *\n * A `DecodeResult` brings three type parameters like in `{@link Decoder}`:\n *\n * * `In`: The input stream for a decoder.\n * * `Out`: The expected result from a decoder.\n * * `Err`: The type that contains information on why a decoder failed.\n */\nexport type DecodeResult = DecodeSuccess | DecodeFailure\n\n/**\n * Helper function to create an instance of `DecodeResult` from a succeeded decoding.\n */\nexport const success = (input: In, result: Out): DecodeResult =>\n  new DecodeSuccess(input, result)\n\n/**\n * Helper function to create an instance of `DecodeResult` from a failed decoding.\n */\nexport const failure = (input: In, ...failures: Err[]): DecodeResult =>\n  new DecodeFailure(input, ...failures)\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedAnyOf.html":{"url":"classes/ExpectedAnyOf.html","title":"class - ExpectedAnyOf","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedAnyOf\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_any_of.ts\n        \n\n            \n                Description\n            \n            \n                Error for any Entity that should match at least one of the conditions\ndescribed in the descriptions array.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entity: Entity, descriptions: string[])\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_any_of.ts:44\n                            \n                        \n\n                \n                    \n                            Construct an instance of ExpectedAnyOf\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                    Entity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        descriptions\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Human readable descriptions of all the missed matches.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-any-of'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_any_of.ts:44\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_any_of.ts:56\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, entityToString } from './entity'\n\n/**\n * Utility function to generate a comma separate list of values where the last\n * one is concatenated by `or`.\n */\nexport const concatOr = (values: string[]) => {\n  const length = values.length\n  if (length === 0) {\n    return ''\n  } else if (length \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedAtLeast.html":{"url":"classes/ExpectedAtLeast.html","title":"class - ExpectedAtLeast","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedAtLeast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_at_least.ts\n        \n\n            \n                Description\n            \n            \n                Error for an Entity that was not repeated at least min times.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(min: number, entity: Entity)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_at_least.ts:26\n                            \n                        \n\n                \n                    \n                            Construct an instance of ExpectedAtLeast\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        min\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                minimum (inclusive) number of expected repetitions\n\n                                                        \n                                                \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                    Entity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-at-least'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_at_least.ts:26\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_at_least.ts:38\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, entityToString } from './entity'\n\n/**\n * Error for an {@link Entity} that was not repeated at least `min` times.\n */\nexport class ExpectedAtLeast {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-at-least' = 'expected-at-least'\n\n  /**\n   * Construct an instance of `ExpectedAtLeast`\n   * @param min minimum (inclusive) number of expected repetitions\n   * @param entity\n   */\n  constructor(readonly min: number, readonly entity: Entity) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `at least ${this.min} ${entityToString(this.entity, this.min)}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedEoi.html":{"url":"classes/ExpectedEoi.html","title":"class - ExpectedEoi","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedEoi\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_eoi.ts\n        \n\n            \n                Description\n            \n            \n                Error for expected end of input.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-eot'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_eoi.ts:24\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_eoi.ts:29\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class ExpectedEoi {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-eot' = 'expected-eot'\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `end of input`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedField.html":{"url":"classes/ExpectedField.html","title":"class - ExpectedField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_field.ts\n        \n\n            \n                Description\n            \n            \n                Error for missing fieeld.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_field.ts:24\n                            \n                        \n\n                \n                    \n                            Construct an instance of ExpectedField\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                name of the missing field in a record/object.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-field'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_field.ts:24\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_field.ts:35\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class ExpectedField {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-field' = 'expected-field'\n\n  /**\n   * Construct an instance of `ExpectedField`\n   * @param field name of the missing field in a record/object.\n   */\n  constructor(readonly field: string) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `field \"${this.field}\"`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedMatch.html":{"url":"classes/ExpectedMatch.html","title":"class - ExpectedMatch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedMatch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_match.ts\n        \n\n            \n                Description\n            \n            \n                Error for an exact match that failed. The expectation is described as a\nstring.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_match.ts:25\n                            \n                        \n\n                \n                    \n                            Construct an instance of ExpectedMatch\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Human readable description of the missed match.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-match'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_match.ts:25\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_match.ts:36\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class ExpectedMatch {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-match' = 'expected-match'\n\n  /**\n   * Construct an instance of `ExpectedMatch`\n   * @param value Human readable description of the missed match.\n   */\n  constructor(readonly value: string) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `${this.value}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedNoneOf.html":{"url":"classes/ExpectedNoneOf.html","title":"class - ExpectedNoneOf","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedNoneOf\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_none_of.ts\n        \n\n            \n                Description\n            \n            \n                Error for a decoder that is expected to fail decoding an Entity for\nany of the values as they are described in the descriptions array.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entity: Entity, descriptions: string[])\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_none_of.ts:28\n                            \n                        \n\n                \n                    \n                            Construct an instance of ExpectedNoneOf\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                    Entity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        descriptions\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Human readable descriptions of the conditions that should\nnot have been matched.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'none-of-error'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_none_of.ts:28\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_none_of.ts:41\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, entityToString } from './entity'\nimport { concatOr } from './expected_any_of'\n\n/**\n * Error for a decoder that is expected to fail decoding an {@link Entity} for\n * any of the values as they are described in the `descriptions` array.\n */\nexport class ExpectedNoneOf {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'none-of-error' = 'none-of-error'\n\n  /**\n   * Construct an instance of `ExpectedNoneOf`\n   * @param entity\n   * @param descriptions Human readable descriptions of the conditions that should\n   * not have been matched.\n   */\n  constructor(readonly entity: Entity, readonly descriptions: string[]) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `no ${entityToString(this.entity, 1)} like ${concatOr(this.descriptions)}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedOnce.html":{"url":"classes/ExpectedOnce.html","title":"class - ExpectedOnce","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedOnce\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_once.ts\n        \n\n            \n                Description\n            \n            \n                Error for an Entity that was expected to be captured once by a\ndecoder.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entity: Entity)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_once.ts:27\n                            \n                        \n\n                \n                    \n                            Construct an instance of ExpectedOnce.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                    Entity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-once'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_once.ts:27\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_once.ts:37\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, entityToString } from './entity'\n\n/**\n * Error for an {@link Entity} that was expected to be captured once by a\n * decoder.\n */\nexport class ExpectedOnce {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-once' = 'expected-once'\n\n  /**\n   * Construct an instance of `ExpectedOnce`.\n   */\n  constructor(readonly entity: Entity) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `a ${entityToString(this.entity, 1)}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedWithinRange.html":{"url":"classes/ExpectedWithinRange.html","title":"class - ExpectedWithinRange","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedWithinRange\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_within_range.ts\n        \n\n            \n                Description\n            \n            \n                Error for a decoder that should have captured a value between twp values\nas described in min and max.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(min: string, max: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_within_range.ts:25\n                            \n                        \n\n                \n                    \n                            Construct an instance of ExpectedWithinRange.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        min\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                minimum number of occurrances expected (inclusive).\n\n                                                        \n                                                \n                                                \n                                                        max\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                maximum number of occurrances expected (inclusive).\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-within-range'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_within_range.ts:25\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_within_range.ts:37\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class ExpectedWithinRange {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-within-range' = 'expected-within-range'\n\n  /**\n   * Construct an instance of `ExpectedWithinRange`.\n   * @param min minimum number of occurrances expected (inclusive).\n   * @param max maximum number of occurrances expected (inclusive).\n   */\n  constructor(readonly min: string, readonly max: string) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `between ${this.min} and ${this.max}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatternMismatch.html":{"url":"classes/PatternMismatch.html","title":"class - PatternMismatch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatternMismatch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/pattern_mismatch.ts\n        \n\n            \n                Description\n            \n            \n                Expected error for a decoder that wasn't able to match pattern.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pattern: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/pattern_mismatch.ts:24\n                            \n                        \n\n                \n                    \n                            Construct an instance of PatternMismatch.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        pattern\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Human readeable description of the pattern that wasn't matched.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'pattern-mismatch'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/pattern_mismatch.ts:24\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/pattern_mismatch.ts:35\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class PatternMismatch {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'pattern-mismatch' = 'pattern-mismatch'\n\n  /**\n   * Construct an instance of `PatternMismatch`.\n   * @param pattern Human readeable description of the pattern that wasn't matched.\n   */\n  constructor(readonly pattern: string) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `to match pattern ${this.pattern}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TextInput.html":{"url":"interfaces/TextInput.html","title":"interface - TextInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TextInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/text/input.ts\n        \n\n            \n                Description\n            \n            \n                TextInput stores the entire input value as a string and contains\nan index as the current character position inside the stream.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        index\n                                \n                                \n                                        input\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        index\n                                    \n                                \n                                \n                                    \n                                        index:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The current position reached by a decoder.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        input\n                                    \n                                \n                                \n                                    \n                                        input:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The string input. Its value is never modified by the decoders at any point\nin the chain.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface TextInput {\n  /**\n   * The string input. Its value is never modified by the decoders at any point\n   * in the chain.\n   */\n  readonly input: string\n\n  /**\n   * The current position reached by a decoder.\n   */\n  readonly index: number\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnexpectedEoi.html":{"url":"classes/UnexpectedEoi.html","title":"class - UnexpectedEoi","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnexpectedEoi\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/unexpected_eoi.ts\n        \n\n            \n                Description\n            \n            \n                Error for a decoder that is not expecting an end of input.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'unexpected-eoi'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/unexpected_eoi.ts:24\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/unexpected_eoi.ts:29\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class UnexpectedEoi {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'unexpected-eoi' = 'unexpected-eoi'\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `NOT end of input`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValueInput.html":{"url":"interfaces/ValueInput.html","title":"interface - ValueInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ValueInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/value/input.ts\n        \n\n            \n                Description\n            \n            \n                ValueInput stores the current input value as a any (any JS value) and\ncontains a path value to identify the position in the current context.\npath is an array of either string values (field names of an object) or\nnumber values (index inside an array).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        input\n                                \n                                \n                                        path\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        input\n                                    \n                                \n                                \n                                    \n                                        input:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The input JavaScript value. It can be any value of any type.\nWhen decoders traverse an array or object value, they will pass only the\ncurrently inspected element to the next decoder and not the source value.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:     (string | number)[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     (string | number)[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The current path for this value input.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ValueInput {\n  /**\n   * The input JavaScript value. It can be any value of any type.\n   *\n   * When decoders traverse an array or object value, they will pass only the\n   * currently inspected element to the next decoder and not the source value.\n   */\n  readonly input: any\n\n  /**\n   * The current path for this value input.\n   */\n  readonly path: (string | number)[]\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nHow to Contribute\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\nContributor License Agreement\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to https://cla.developers.google.com/ to see\nyour current agreements on file or to sign a new one.\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\nCode reviews\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\nGitHub Help for more\ninformation on using pull requests.\nCommunity Guidelines\nThis project follows\nGoogle's Open Source Community Guidelines.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                class\n            \n            \n                Decoder\n            \n            \n                96 %\n                (25/26)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                fail\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                lazy\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                oneOf\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                sequence\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                succeed\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                class\n            \n            \n                DecodeFailure\n            \n            \n                96 %\n                (29/30)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                class\n            \n            \n                DecodeResultBase\n            \n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                class\n            \n            \n                DecodeSuccess\n            \n            \n                96 %\n                (28/29)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                variable\n            \n            \n                failure\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                variable\n            \n            \n                success\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/error/custom_error.ts\n            \n            \n                class\n            \n            \n                CustomError\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/entity.ts\n            \n            \n                variable\n            \n            \n                entityToString\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/error/expected_any_of.ts\n            \n            \n                class\n            \n            \n                ExpectedAnyOf\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/expected_any_of.ts\n            \n            \n                variable\n            \n            \n                concatOr\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/error/expected_at_least.ts\n            \n            \n                class\n            \n            \n                ExpectedAtLeast\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/expected_eoi.ts\n            \n            \n                class\n            \n            \n                ExpectedEoi\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/error/expected_field.ts\n            \n            \n                class\n            \n            \n                ExpectedField\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/expected_match.ts\n            \n            \n                class\n            \n            \n                ExpectedMatch\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/expected_none_of.ts\n            \n            \n                class\n            \n            \n                ExpectedNoneOf\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/expected_once.ts\n            \n            \n                class\n            \n            \n                ExpectedOnce\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/expected_within_range.ts\n            \n            \n                class\n            \n            \n                ExpectedWithinRange\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/index.ts\n            \n            \n                variable\n            \n            \n                DecodeError\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/error/pattern_mismatch.ts\n            \n            \n                class\n            \n            \n                PatternMismatch\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/unexpected_eoi.ts\n            \n            \n                class\n            \n            \n                UnexpectedEoi\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                char\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                decodeText\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                digit\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                digits\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                eoi\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                failureToString\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                letter\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                letters\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                lowerCaseLetter\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                lowerCaseLetters\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                make\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                match\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                matchAnyCharOf\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                matchInsensitive\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                matchNoCharOf\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                optionalWhitespace\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                regexp\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                rest\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                \n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                takeCharBetween\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                takeCharWhile\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                testChar\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                upperCaseLetter\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                upperCaseLetters\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                whitespace\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                withPosition\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/input.ts\n            \n            \n                interface\n            \n            \n                TextInput\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                anyArrayValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                anyValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                arrayValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                booleanValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                decodeValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                failureToString\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                finiteNumberValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                integerValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                isToken\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                literalValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                make\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                nullableValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                nullValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                numberValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                objectValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                optionalValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                pathToString\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                safeIntegerValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                stringValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                testObject\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                testType\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                testValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                tupleValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                undefineableValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                undefinedValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/input.ts\n            \n            \n                interface\n            \n            \n                ValueInput\n            \n            \n                100 %\n                (3/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Entity   (src/.../entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/error/entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Entity\n                    \n                \n                    \n                        \n                            Enumeration that tries to capture different kind of entities that are\nnormally found has decoder inputs.\n\n                        \n                    \n                        \n                            \n                                 CHARACTER\n                            \n                        \n                        \n                            \n                                 PREDICATE\n                            \n                        \n                        \n                            \n                                 LETTER\n                            \n                        \n                        \n                            \n                                 UPPERCASE_LETTER\n                            \n                        \n                        \n                            \n                                 LOWER_CASE_LETTER\n                            \n                        \n                        \n                            \n                                 DIGIT\n                            \n                        \n                        \n                            \n                                 WHITESPACE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nParTSing\nParTSing is a decoder combinator library. You can use it to build parsers/decoders from string or really any input values.\nIf you want full control over what to decode your should start from partsing/core/decoder. It provides 3 types parameters\n\nIn for the input. Remember that you will need to decode one portion of your input at the time and your input probably needs to track somehow the current position.\nOut it's the type of the value if successfully decoded.\nErr it's the type of the failure returned when the parser fails.\n\nThe library provides two additional set of utility functions to decode string values (partsing/text) and native JS values (partsing/value).\nDecoder Error\nIf you adopt the generic Decoder directly, you can define the shape of your error. The library provides a DecoderError type that should fit most decoding needs. The type of errors available are defined in partsing/error.\nDecoderError provides a simple method to debug the result of the decoding (toString) but still leaves the flexibility to give granular control on the representation of the error.\nBoth [Text Decoding] and [Value Decoding] use DecodeError.\nText Decoding\nTo be able to keep track of the position of the decoding within a string, Text Decoding uses TextInput to track both the entire text input and the current index.\nThe decodeText function simplifies the inputs and outputs of decoding text. It takes a text decoder (Decoder) and return a function that takes a string input and returns a DecodeResult (where input and error are of type string).\nIf you intend to write your own regular expressions decoder functions, consider using the y (sticky) flag. When used, there is no need to reallocate slices of the input string saving memory and CPU cycles. The sticky flag is not available for all implementations of JS.\nValue Decoding\nTo be able to keep track of the position of the decoding within any value, Value Decoding uses ValueInput to track both the input value and the current position within it using a path. path is an array of either string (object field name) or number (array/tuple index position).\nThe decodeValue function simplifies the inputs and outputs of decoding values. It takes a value decoder (Decoder) and return a function that takes any and returns a DecodeResult (where input is of type any and error is of type string).\nExample\nA simple decoder combinator to parse color values from strings into class instances.\nclass RGB {\n  constructor(readonly rgb: number) {}\n}\n\nclass Grey {\n  constructor(readonly value: number) {}\n}\n\nclass HSL {\n  constructor(readonly hue: number, readonly saturation: number, readonly lightness: number) {}\n}\n\ntype Color = RGB | Grey | HSL\n\nconst ratioDecoder = regexp(/0[.]\\d+/y).map(Number)\nconst rgbDecoder   = regexp(/[#]([0-9a-f]{6})/iy, 1)\n                       .map(v => parseInt(v, 16))\n                       .map(v => new RGB(v))\nconst greyDecoder  = matchInsensitive('grey').or(DecodeError.combine, matchInsensitive('gray'))\n                       .skipNext(optionalWhitespace)\n                       .pickNext(ratioDecoder)\n                       .map(v => new Grey(v))\nconst hslDecoder   = matchInsensitive('hsl(')\n                       .pickNext(\n                         ratioDecoder\n                           .separatedByTimes(match(','), 3)\n                           .map(v => new HSL(v[0], v[1], v[2]))\n                       )\n                       .skipNext(match(')'))\n\nconst colorTextDecoder = decodeText(\n    oneOf(\n      DecodeError.combine,\n      rgbDecoder,\n      greyDecoder,\n      hslDecoder\n    ).skipNext(eoi) // make sure that there is nothing left to decode\n  )\n\n// all results are wrapped in a DecodeSuccess\n// colorTextDecoder('#003355')          == new RGB(0x003355)\n// colorTextDecoder('gray 0.3')         == new Grey(0.3)\n// colorTextDecoder('gray0.2')          == new Grey(0.2)\n// colorTextDecoder('HSL(0.1,0.2,0.3)') == new HSL(0.1,0.2,0.3)Another scenario where decoding comes in handy is to validate, type and transform payloads from JSON requests. You can decode a value (after being parsed by JSON.parse) into one of the Color types described above.\nA few examples of valid JSON payloads:\n\"#003366\"{ \"grey\": 0.5 }{ \"kind\": \"hsl\", \"h\": 0.2, \"s\": 0.5, \"l\": 0.8 }Here is a colorValueDecoder definition that can deal with those cases:\nconst ratioValue = numberValue.test(v => v >= 0 && v  ({ input, index: 0 }), v => v)\n\n// example: { \"grey\": 0.5 }\nconst greyValue = objectValue(\n    { grey: ratioValue },\n    [] // the empty array means that no fields are optional\n  ).map(v => new Grey(v.grey))\n\n// example: { \"kind\": \"hsl\", \"h\": 0.2, \"s\": 0.5, \"l\": 0.8 }\nconst hslValue = objectValue(\n    {\n      kind: literalValue('hsl'),\n      h: ratioValue,\n      s: ratioValue,\n      l: ratioValue\n    },\n    []\n  ).map(v => new HSL(v.h, v.s, v.l))\n\nconst colorValueDecoder = decodeValue(\n    oneOf(\n      DecodeError.combine,\n      rgbValue,\n      greyValue,\n      hslValue\n    )\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\n                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.You may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nAPPENDIX: How to apply the Apache License to your work.\nTo apply the Apache License to your work, attach the following\nboilerplate notice, with the fields enclosed by brackets \"[]\"\nreplaced with your own identifying information. (Don't include\nthe brackets!)  The text should be enclosed in the appropriate\ncomment syntax for the file format. We also recommend that a\nfile or class name and description of purpose be included on the\nsame \"printed page\" as the copyright notice for easier\nidentification within third-party archives.\nCopyright [yyyy] [name of copyright owner]\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DecodeError   (src/.../index.ts)\n                        \n                        \n                            DecodeResult   (src/.../result.ts)\n                        \n                        \n                            Decoding   (src/.../decoder.ts)\n                        \n                        \n                            Error   (src/.../type_level.ts)\n                        \n                        \n                            Input   (src/.../type_level.ts)\n                        \n                        \n                            MarkOptionalFields   (src/.../type_level.ts)\n                        \n                        \n                            Output   (src/.../type_level.ts)\n                        \n                        \n                            TextDecoder   (src/.../index.ts)\n                        \n                        \n                            TupleToUnion   (src/.../type_level.ts)\n                        \n                        \n                            ValueDecoder   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/error/index.ts\n    \n        \n            \n                \n                    \n                        \n                        DecodeError\n                    \n                \n                    \n                        \n                            Union type of all possible decoding errors.\n\n                        \n                    \n                \n                    \n                        DecodeError:     CustomError | ExpectedAnyOf | ExpectedAtLeast | ExpectedEoi | ExpectedField | ExpectedMatch | ExpectedNoneOf | ExpectedOnce | ExpectedWithinRange | PatternMismatch | UnexpectedEoi\n\n                    \n                \n            \n        \n\n    src/core/result.ts\n    \n        \n            \n                \n                    \n                        \n                        DecodeResult\n                    \n                \n                    \n                        \n                            DecodeResult it's an either type, aunion type of two possible constructors.\nIt can either be:\n\nDecodeSuccess: a decoder was able to successfully decode a value\nDecodeFailure: a decoder failed to decode a value\n\nA DecodeResult brings three type parameters like in Decoder:\n\nIn: The input stream for a decoder.\nOut: The expected result from a decoder.\nErr: The type that contains information on why a decoder failed.\n\n\n                        \n                    \n                \n                    \n                        DecodeResult:     DecodeSuccess | DecodeFailure\n\n                    \n                \n            \n        \n\n    src/core/decoder.ts\n    \n        \n            \n                \n                    \n                        \n                        Decoding\n                    \n                \n                    \n                        \n                            Type signature for a function that takes an input and decodes it into a\nresult object.\n\n                        \n                    \n                \n                    \n                        Decoding:     function\n\n                    \n                \n            \n        \n\n    src/core/type_level.ts\n    \n        \n            \n                \n                    \n                        \n                        Error\n                    \n                \n                    \n                        \n                            Extracts the Err type from a Decoder type.\n\n                        \n                    \n                \n                    \n                        Error:     \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        Input\n                    \n                \n                    \n                        \n                            Extracts the Int type from a Decoder type.\n\n                        \n                    \n                \n                    \n                        Input:     \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        MarkOptionalFields\n                    \n                \n                    \n                        \n                            Given a type for an object T and an array U of field names from U,\nreturn a new object type with the specified fields U marked as optional.\n\n                        \n                    \n                \n                    \n                        MarkOptionalFields:     \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        Output\n                    \n                \n                    \n                        \n                            Extracts the Out type from a Decoder type.\n\n                        \n                    \n                \n                    \n                        Output:     \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        TupleToUnion\n                    \n                \n                    \n                        \n                            This module contains type-level functions for compile-time usage.\n\n                        \n                    \n                \n                    \n                        TupleToUnion:      | never\n\n                    \n                \n            \n        \n\n    src/text/index.ts\n    \n        \n            \n                \n                    \n                        \n                        TextDecoder\n                    \n                \n                    \n                        \n                            Type alias for a decoder specialized in consuming values of type TextInput\nand generate errors of type DecodeError.\n\n                        \n                    \n                \n                    \n                        TextDecoder:     Decoder\n\n                    \n                \n            \n        \n\n    src/value/index.ts\n    \n        \n            \n                \n                    \n                        \n                        ValueDecoder\n                    \n                \n                    \n                        \n                            Type alias for a decoder specialized in consuming values of type ValueInput\nand generate errors of type DecodeError.\n\n                        \n                    \n                \n                    \n                        ValueDecoder:     Decoder\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
