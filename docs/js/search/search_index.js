var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/CustomError.html",[0,0.184,1,1.702]],["body/classes/CustomError.html",[0,0.28,1,2.588,2,0.572,3,0.412,4,0.339,5,2.753,6,0.626,7,0.85,8,0.401,9,2.753,10,5.033,11,4.325,12,0.27,13,0.732,14,0.69,15,0.728,16,0.845,17,0.982,18,0.86,19,3.386,20,0.728,21,0.807,22,4.331,23,1.244,24,1.1,25,4.331,26,0.756,27,0.047,28,0.572,29,0.756,30,1.124,31,0.982,32,4.331,33,2.27,34,0.86,35,0.581,36,0.967,37,3.386,38,0.732,39,0.845,40,0.967,41,0.845,42,0.732,43,0.572,44,1.235,45,0.973,46,3.386,47,0.035,48,0.035]],["title/classes/DecodeResultBase.html",[0,0.184,49,1.965]],["body/classes/DecodeResultBase.html",[0,0.16,2,0.151,3,0.109,4,0.089,6,0.129,7,0.151,8,0.429,9,2.007,11,0.726,12,0.071,13,0.519,14,0.639,15,0.444,16,0.303,17,0.6,18,0.627,20,0.357,21,0.759,23,0.446,24,1.123,26,0.952,27,0.047,28,0.558,29,0.738,30,0.552,31,0.482,33,2.447,35,0.617,36,0.552,38,0.62,39,0.482,40,0.552,41,0.482,42,0.872,43,0.473,44,0.9,45,0.256,47,0.038,48,0.02,49,1.93,50,0.616,51,3.692,52,0.616,53,1.424,54,1.703,55,3.014,56,3.478,57,5.219,58,0.726,59,2.193,60,0.726,61,0.726,62,0.726,63,3.37,64,3.819,65,3.073,66,3.073,67,1.554,68,1.554,69,3.073,70,3.073,71,3.073,72,3.073,73,1.554,74,1.554,75,1.554,76,2.064,77,1.554,78,1.422,79,1.263,80,1.263,81,1.585,82,3.254,83,0.893,84,1.554,85,0.461,86,1.678,87,1.554,88,1.554,89,1.554,90,1.072,91,0.929,92,0.893,93,2.79,94,0.893,95,1.381,96,3.465,97,2.47,98,4.423,99,2.799,100,0.893,101,3.303,102,3.5,103,2.447,104,2.845,105,2.92,106,4.346,107,2.47,108,0.893,109,3.303,110,2.064,111,1.554,112,1.263,113,1.699,114,0.893,115,2.47,116,2.001,117,3.073,118,2.845,119,2.007,120,2.47,121,0.893,122,0.893,123,3.073,124,2.47,125,2.007,126,1.476,127,2.47,128,0.893,129,2.47,130,0.893,131,2.007,132,2.47,133,0.893,134,2.47,135,0.893,136,3.073,137,2.119,138,1.678,139,2.47,140,1.554,141,0.893,142,4.556,143,1.263,144,0.815,145,1.554,146,1.263,147,1.263,148,1.554,149,1.703,150,0.893,151,2.597,152,1.263,153,1.554,154,1.554,155,0.893,156,0.726,157,0.726,158,0.719,159,1.554,160,1.554,161,0.893,162,1.554,163,0.893,164,1.554,165,0.893,166,2.064,167,0.893,168,1.554,169,2.007,170,1.554,171,1.554,172,0.893,173,1.554,174,1.554,175,1.554,176,1.554,177,1.554,178,1.554,179,1.554,180,0.815,181,1.263,182,0.893,183,0.726,184,0.726,185,2.799,186,0.893,187,0.893,188,1.554,189,0.893,190,0.893,191,0.893,192,0.893,193,0.616,194,0.726,195,0.616,196,0.726,197,0.616,198,0.533,199,1.554,200,1.554,201,0.893,202,1.072,203,0.893,204,0.893]],["title/classes/ExpectedAnyOf.html",[0,0.184,205,1.702]],["body/classes/ExpectedAnyOf.html",[0,0.221,2,0.577,3,0.416,4,0.342,6,0.771,7,0.577,8,0.347,12,0.272,13,0.736,14,0.63,15,0.693,16,0.85,17,0.936,18,0.867,20,0.73,21,0.81,23,0.981,24,0.867,26,0.763,27,0.046,28,0.577,29,0.763,30,0.973,31,0.85,34,0.867,35,0.614,36,0.763,38,0.577,39,0.667,40,0.763,41,0.667,42,0.736,43,0.577,47,0.035,48,0.041,85,0.763,105,2.041,126,2.041,158,1.581,202,3.003,205,2.603,206,2.777,207,2.468,208,2.603,209,1.581,210,1.79,211,2.356,212,4.355,213,2.356,214,3.416,215,1.79,216,1.79,217,2.777,218,3.416,219,2.777,220,2.777,221,3.416,222,3.416,223,2.356,224,4.794,225,3.416,226,2.356]],["title/classes/ExpectedAtLeast.html",[0,0.184,227,1.702]],["body/classes/ExpectedAtLeast.html",[0,0.271,2,0.544,3,0.392,4,0.322,6,0.606,7,0.708,8,0.372,12,0.257,13,0.708,14,0.714,15,0.714,16,0.818,17,0.964,18,0.817,20,0.465,21,0.788,23,1.204,24,1.064,26,0.719,27,0.047,28,0.544,29,0.719,30,0.936,31,0.818,34,0.817,35,0.567,36,0.936,38,0.708,39,0.818,40,0.936,41,0.818,42,0.708,43,0.544,44,1.528,45,0.925,47,0.034,48,0.034,85,1.143,91,2.505,151,1.687,207,2.577,215,1.687,216,1.687,227,2.95,228,2.617,229,4.191,230,4.162,231,2.617,232,2.683,233,4.191,234,3.407,235,2.891,236,4.191,237,3.219,238,3.407,239,2.22]],["title/classes/ExpectedEoi.html",[0,0.184,240,1.702]],["body/classes/ExpectedEoi.html",[0,0.296,2,0.625,3,0.45,4,0.37,6,0.535,7,0.625,8,0.365,12,0.295,13,0.774,14,0.719,15,0.751,16,0.894,17,1.014,20,0.535,21,0.774,27,0.046,30,1.023,31,0.894,34,0.939,35,0.605,36,1.023,38,0.774,39,0.894,40,1.023,41,0.894,42,0.774,43,0.625,47,0.037,48,0.037,81,1.67,85,1.161,240,2.736,241,3.007,242,3.158,243,4.973,244,3.7,245,3.7]],["title/classes/ExpectedField.html",[0,0.184,246,1.702]],["body/classes/ExpectedField.html",[0,0.281,2,0.576,3,0.415,4,0.341,6,0.629,7,0.576,8,0.382,12,0.272,13,0.735,14,0.692,15,0.729,16,0.849,17,0.985,18,0.865,20,0.729,21,0.809,23,1.249,24,1.104,26,0.761,27,0.047,28,0.809,29,0.761,30,0.971,31,0.849,34,0.865,35,0.583,36,0.971,38,0.735,39,0.849,40,0.971,41,0.849,42,0.735,43,0.576,44,1.243,45,0.979,47,0.035,48,0.035,78,2.563,85,1.07,213,3.303,246,3.015,247,2.771,248,3.409,249,3.409,250,4.349,251,4.349,252,3.409,253,3.409]],["title/classes/ExpectedMatch.html",[0,0.184,254,1.702]],["body/classes/ExpectedMatch.html",[0,0.279,2,0.57,3,0.41,4,0.338,6,0.726,7,0.57,8,0.38,12,0.269,13,0.73,14,0.689,15,0.726,16,0.843,17,0.981,18,0.856,20,0.751,21,0.805,23,1.24,24,1.097,26,0.753,27,0.047,28,0.57,29,0.753,30,1.122,31,0.981,34,0.856,35,0.647,36,0.965,38,0.73,39,0.843,40,0.965,41,0.843,42,0.73,43,0.57,44,1.229,45,0.968,47,0.035,48,0.044,85,1.122,113,1.561,169,2.741,209,1.561,213,2.979,254,3.003,255,2.741,256,3.372,257,3.372,258,4.319,259,3.372]],["title/classes/ExpectedNoneOf.html",[0,0.184,260,1.702]],["body/classes/ExpectedNoneOf.html",[0,0.264,2,0.522,3,0.376,4,0.309,6,0.793,7,0.854,8,0.364,12,0.247,13,0.69,14,0.703,15,0.703,16,0.797,17,0.949,18,0.785,20,0.703,21,0.772,23,1.172,24,1.036,26,0.69,27,0.047,28,0.522,29,0.69,30,1.086,31,0.949,34,0.785,35,0.615,36,0.912,38,0.69,39,0.797,40,0.912,41,0.797,42,0.69,43,0.522,44,1.488,45,0.888,47,0.033,48,0.039,85,0.912,95,1.396,113,1.889,126,2.439,151,1.62,207,2.541,209,1.889,210,2.139,211,2.132,215,2.139,216,1.62,223,2.132,239,2.132,260,2.904,261,2.513,262,4.082,263,4.57,264,3.091,265,3.091,266,1.847,267,3.091]],["title/classes/ExpectedOnce.html",[0,0.184,268,1.702]],["body/classes/ExpectedOnce.html",[0,0.278,2,0.566,3,0.408,4,0.335,6,0.484,7,0.727,8,0.379,12,0.267,13,0.727,14,0.687,15,0.725,16,0.839,17,0.978,18,0.851,20,0.484,21,0.803,23,1.235,24,1.092,26,0.748,27,0.047,28,0.566,29,0.748,30,0.961,31,0.839,34,0.851,35,0.578,36,0.961,38,0.727,39,0.839,40,0.961,41,0.839,42,0.727,43,0.566,45,0.962,47,0.035,48,0.035,85,1.158,95,1.235,151,1.756,207,2.555,211,2.31,215,1.756,216,1.756,239,2.31,266,2.002,268,2.995,269,2.723,270,2.966,271,4.214,272,4.301,273,3.35]],["title/classes/ExpectedWithinRange.html",[0,0.184,274,1.702]],["body/classes/ExpectedWithinRange.html",[0,0.269,2,0.537,3,0.387,4,0.318,6,0.601,7,0.537,8,0.369,12,0.254,13,0.703,14,0.71,15,0.71,16,0.811,17,0.959,18,0.807,20,0.77,21,0.783,23,1.194,24,1.056,26,0.71,27,0.046,28,0.537,29,0.71,30,0.929,31,0.811,34,0.807,35,0.62,36,0.929,38,0.703,39,0.811,40,0.929,41,0.811,42,0.703,43,0.537,44,1.516,45,0.913,47,0.033,48,0.033,80,3.38,85,1.19,95,0.913,209,1.472,230,3.994,231,2.585,232,2.575,234,3.38,235,3.389,238,2.585,270,2.193,274,2.936,275,2.585,276,3.179,277,5.099,278,4.158,279,4.914,280,4.158,281,3.195,282,4.633,283,3.179,284,3.179]],["title/classes/PatternMismatch.html",[0,0.184,285,1.702]],["body/classes/PatternMismatch.html",[0,0.278,2,0.566,3,0.408,4,0.335,6,0.725,7,0.566,8,0.379,12,0.267,13,0.727,14,0.687,15,0.725,16,0.839,17,0.978,18,0.851,20,0.725,21,0.803,23,1.235,24,1.092,26,0.748,27,0.047,28,0.566,29,0.748,30,1.12,31,0.839,34,0.851,35,0.578,36,0.961,38,0.727,39,0.839,40,0.961,41,0.839,42,0.727,43,0.566,44,1.222,45,0.962,47,0.035,48,0.043,85,0.748,95,0.962,285,2.995,286,2.723,287,4.751,288,5.565,289,3.35,290,4.301,291,4.301,292,4.751,293,3.35,294,3.35]],["title/interfaces/TextInput.html",[295,1.169,296,1.493]],["body/interfaces/TextInput.html",[2,0.673,3,0.485,4,0.399,6,0.576,8,0.382,12,0.442,13,0.809,14,0.692,20,0.77,27,0.045,35,0.485,43,0.673,47,0.039,48,0.039,81,1.988,116,2.087,180,2.087,197,2.747,232,2.692,295,1.966,296,2.692,297,3.238,298,3.238,299,3.238,300,2.747,301,2.747,302,3.238]],["title/classes/UnexpectedEoi.html",[0,0.184,303,1.702]],["body/classes/UnexpectedEoi.html",[0,0.296,2,0.624,3,0.449,4,0.369,6,0.534,7,0.624,8,0.365,12,0.294,13,0.773,14,0.718,15,0.751,16,0.892,17,1.013,20,0.534,21,0.773,27,0.046,30,1.021,31,0.892,34,0.937,35,0.604,36,1.021,38,0.773,39,0.892,40,1.021,41,0.892,42,0.773,43,0.624,47,0.037,48,0.037,81,1.667,85,0.824,95,1.06,242,3.153,303,2.732,304,3,305,4.967,306,4.038,307,3.691,308,3.691]],["title/interfaces/ValueInput.html",[295,1.169,309,1.493]],["body/interfaces/ValueInput.html",[2,0.647,3,0.466,4,0.383,6,0.553,8,0.373,12,0.373,13,0.79,14,0.676,20,0.76,27,0.045,28,0.647,35,0.656,43,0.647,47,0.038,48,0.038,78,1.771,81,1.966,116,2.45,144,2.006,180,2.006,210,2.45,232,2.755,295,1.919,298,3.111,301,2.639,302,3.111,309,2.645,310,3.111,311,3.111,312,4.459,313,2.639,314,3.827]],["title/contributing.html",[315,1.649,316,1.429,317,1.649]],["body/contributing.html",[3,0.438,4,0.36,27,0.036,47,0.036,48,0.036,59,2.934,63,2.481,103,1.885,116,1.885,158,1.665,198,2.15,208,2.689,271,2.924,317,3.653,318,3.597,319,3.597,320,2.924,321,3.597,322,5.403,323,2.924,324,3.597,325,4.91,326,3.991,327,3.658,328,3.658,329,3.103,330,3.991,331,3.597,332,3.597,333,2.924,334,2.924,335,3.597,336,2.481,337,2.924,338,2.924,339,2.924,340,3.597,341,2.924,342,3.597,343,3.597,344,3.658,345,3.597,346,3.597,347,3.597,348,2.924,349,2.481,350,2.924,351,2.924,352,3.597,353,2.924,354,4.5,355,3.658,356,2.924,357,3.597,358,2.924,359,4.5,360,4.5,361,3.658,362,2.924,363,3.597,364,3.597,365,2.924,366,3.658,367,3.597,368,3.597]],["title/coverage.html",[369,3.142]],["body/coverage.html",[0,0.339,1,1.137,4,0.191,5,1.547,8,0.152,27,0.047,33,0.997,47,0.023,48,0.028,49,1.313,50,2.894,55,1.137,56,1.313,95,0.547,96,1.547,103,0.997,113,0.881,205,1.137,206,2.35,216,0.997,223,1.313,226,1.993,227,1.137,228,1.547,240,1.137,241,1.547,246,1.137,247,1.547,254,1.137,255,1.547,260,1.137,261,1.547,268,1.137,269,1.547,274,1.137,275,1.547,285,1.137,286,1.547,295,1.186,296,0.997,297,1.547,303,1.137,304,1.547,306,1.547,309,0.997,310,1.547,313,1.313,369,1.547,370,1.547,371,1.547,372,3.592,373,3.495,374,1.903,375,5.801,376,5.829,377,5.794,378,1.903,379,1.547,380,1.903,381,1.903,382,1.903,383,1.903,384,1.903,385,4.845,386,1.547,387,2.891,388,1.547,389,1.313,390,4.508,391,1.903,392,1.547,393,2.35,394,2.891,395,2.35,396,2.891,397,2.891,398,1.993,399,1.903,400,1.903,401,1.903,402,1.903,403,1.903,404,1.903,405,1.903,406,1.903,407,1.903,408,2.891,409,1.547,410,1.903,411,2.891,412,2.891,413,4.495,414,1.903,415,1.903,416,1.903,417,1.903,418,1.547,419,1.903,420,1.903,421,1.903,422,1.903,423,1.903,424,1.903,425,1.903,426,1.547,427,1.903,428,1.903,429,1.903,430,1.903,431,1.903,432,1.903,433,1.903,434,1.903,435,1.903,436,1.903,437,1.903,438,1.903]],["title/miscellaneous/enumerations.html",[439,1.429,440,2.78]],["body/miscellaneous/enumerations.html",[12,0.338,15,0.613,27,0.04,47,0.04,48,0.04,81,1.547,95,1.219,156,3.449,207,2.442,270,2.926,300,2.926,349,2.926,386,3.449,393,3.449,395,3.449,409,3.449,439,2.536,440,4.042,441,4.243,442,3.449,443,4.243,444,4.243,445,4.243,446,4.243]],["title/index.html",[12,0.191,315,1.649,316,1.429]],["body/index.html",[0,0.249,7,0.74,8,0.398,12,0.275,14,0.411,15,0.498,16,0.363,17,0.363,20,0.696,21,0.48,24,0.472,26,0.415,27,0.047,28,0.314,29,0.415,33,0.975,35,0.63,38,0.652,39,0.363,41,0.363,42,0.702,45,0.99,47,0.031,48,0.023,51,1.959,53,1.283,55,1.112,59,2.722,60,1.512,78,1.315,81,1.869,82,1.283,91,1.112,93,1.112,95,1.598,103,2.523,105,2.617,113,0.861,116,1.806,137,1.283,144,0.975,147,2.801,149,2.66,152,2.801,158,0.861,184,2.309,193,1.959,195,1.283,202,3.32,208,1.697,209,0.861,210,1.489,217,1.512,226,1.959,232,2.295,266,1.112,281,2.376,296,0.975,299,1.512,301,2.865,309,0.975,311,2.309,312,2.309,316,1.112,323,1.512,326,3.135,336,1.283,341,1.512,350,1.512,361,1.512,379,2.309,389,1.283,392,2.309,398,1.283,418,2.309,426,2.309,447,2.841,448,2.309,449,3.446,450,1.86,451,1.86,452,1.86,453,1.86,454,1.86,455,2.309,456,1.86,457,2.841,458,1.86,459,1.86,460,3.377,461,1.86,462,1.86,463,1.512,464,1.86,465,1.86,466,1.86,467,1.86,468,1.86,469,1.86,470,2.841,471,1.512,472,2.309,473,1.86,474,2.841,475,1.86,476,1.86,477,1.86,478,1.86,479,3.56,480,2.841,481,2.841,482,2.309,483,1.86,484,1.512,485,1.86,486,1.512,487,1.86,488,1.86,489,2.841,490,2.841,491,1.86,492,1.86,493,1.86,494,1.86,495,1.86,496,1.86,497,1.86,498,1.86,499,3.135,500,2.841,501,3.446,502,3.446,503,4.154,504,3.857,505,1.86,506,1.86,507,1.86,508,2.841,509,1.86,510,2.841,511,1.86,512,1.86,513,1.86,514,4.379,515,1.86,516,1.86,517,1.86,518,2.841,519,1.86,520,1.86,521,1.86,522,1.86,523,1.86,524,2.841,525,1.86,526,1.86,527,1.86,528,1.86,529,1.86,530,1.86,531,1.86,532,1.86,533,2.841,534,1.86,535,1.86,536,1.512,537,1.86,538,1.86,539,1.86,540,1.86,541,1.86,542,1.86,543,1.86,544,1.86,545,1.86,546,1.86,547,1.86,548,1.86,549,1.86,550,1.86,551,2.841,552,2.841,553,1.86,554,1.86,555,1.512,556,1.86,557,3.857,558,3.446,559,2.841,560,3.446,561,2.841,562,1.86,563,2.841,564,1.512,565,1.86,566,1.512,567,1.86,568,4.154,569,1.86,570,3.857,571,2.841,572,1.86,573,1.512,574,1.86,575,2.841,576,1.86,577,1.86,578,1.86,579,1.86,580,1.86]],["title/license.html",[315,1.649,316,1.429,329,1.649]],["body/license.html",[0,0.081,3,0.556,4,0.457,6,0.182,8,0.1,15,0.301,21,0.212,27,0.021,28,0.578,31,0.245,33,0.659,38,0.689,47,0.025,48,0.017,52,0.867,54,0.867,59,2.672,61,1.022,63,0.867,78,0.582,79,1.022,90,0.867,93,0.751,104,2.161,112,3.783,118,2.161,119,2.511,125,1.022,126,2.781,131,2.161,137,0.867,138,1.022,143,1.022,144,1.932,151,0.659,158,0.963,180,0.659,181,1.69,183,1.022,198,1.243,207,2.07,208,0.751,209,0.582,215,0.659,219,1.69,220,1.022,235,1.434,242,0.867,266,0.751,281,2.814,295,0.516,300,0.867,313,0.867,317,2.814,320,2.511,327,2.161,328,3.544,329,3.749,330,1.022,333,1.022,334,3.783,336,0.867,337,2.511,338,2.161,339,2.511,344,2.781,348,1.022,349,0.867,351,1.022,353,2.161,355,1.022,356,3.9,358,2.511,362,3.171,365,1.022,366,2.161,370,2.511,371,1.022,398,1.434,442,1.022,448,1.022,455,2.781,460,1.022,463,2.996,471,1.022,472,1.022,479,2.511,484,2.511,486,1.69,499,1.022,536,1.022,555,1.022,564,2.161,566,2.161,573,3.714,581,3.089,582,2.659,583,2.659,584,1.257,585,1.257,586,1.257,587,4.231,588,3.089,589,4.654,590,4.798,591,2.079,592,1.257,593,1.257,594,4.36,595,3.686,596,2.079,597,4.08,598,3.422,599,2.659,600,4.231,601,1.257,602,3.089,603,2.079,604,2.079,605,2.079,606,4.964,607,3.089,608,2.079,609,3.686,610,1.257,611,2.079,612,1.257,613,1.257,614,1.257,615,1.257,616,1.257,617,1.257,618,2.659,619,2.079,620,1.257,621,3.686,622,3.901,623,2.079,624,1.257,625,1.257,626,1.257,627,1.257,628,1.257,629,5.607,630,2.659,631,2.079,632,1.257,633,4.914,634,2.079,635,2.079,636,1.257,637,5.01,638,1.257,639,1.257,640,1.257,641,1.257,642,1.257,643,2.079,644,2.079,645,1.257,646,1.257,647,1.257,648,3.089,649,2.079,650,3.422,651,2.079,652,1.257,653,1.257,654,1.257,655,1.257,656,2.079,657,1.257,658,1.257,659,1.257,660,2.659,661,1.257,662,1.69,663,1.257,664,1.257,665,1.257,666,2.079,667,2.079,668,3.089,669,2.079,670,2.079,671,2.079,672,2.659,673,2.079,674,2.659,675,2.079,676,2.079,677,2.079,678,2.659,679,1.257,680,2.079,681,2.079,682,1.257,683,3.901,684,3.089,685,2.079,686,2.079,687,1.257,688,2.659,689,1.257,690,2.659,691,2.659,692,1.257,693,1.257,694,2.079,695,2.079,696,1.257,697,1.257,698,1.257,699,1.257,700,1.257,701,1.257,702,1.257,703,1.257,704,3.089,705,1.257,706,3.422,707,1.257,708,1.257,709,1.257,710,3.089,711,1.257,712,1.257,713,1.257,714,1.257,715,2.659,716,3.089,717,2.079,718,1.257,719,1.257,720,1.257,721,2.079,722,2.079,723,1.257,724,2.079,725,2.079,726,1.257,727,1.257,728,1.257,729,1.257,730,1.257,731,1.257,732,1.257,733,1.257,734,1.257,735,1.257,736,1.257,737,1.257,738,1.257,739,1.257,740,1.257,741,1.257,742,3.901,743,2.659,744,2.659,745,3.089,746,2.079,747,2.079,748,1.257,749,1.257,750,1.257,751,2.079,752,2.079,753,1.257,754,2.079,755,1.257,756,1.257,757,3.422,758,1.257,759,1.257,760,1.257,761,2.079,762,1.257,763,1.257,764,1.257,765,3.422,766,1.022,767,1.257,768,1.257,769,1.257,770,1.257,771,2.079,772,1.257,773,1.257,774,1.257,775,1.257,776,1.257,777,1.257,778,1.257,779,1.257,780,1.257,781,1.257,782,2.079,783,1.257,784,1.257,785,1.257,786,1.257,787,1.257,788,1.257,789,1.257,790,1.257,791,1.257,792,2.079,793,2.079,794,1.257,795,1.257,796,1.257,797,1.257,798,1.257,799,1.257,800,1.257,801,1.257,802,1.257,803,1.257,804,1.257,805,1.257,806,1.257,807,1.257,808,1.257,809,1.257,810,1.257,811,1.257]],["title/modules.html",[812,2.665]],["body/modules.html",[27,0.042,47,0.042,48,0.042,812,3.121]],["title/overview.html",[813,3.142]],["body/overview.html",[0,0.289,27,0.041,47,0.041,48,0.041,146,3.637,295,1.837,813,3.637,814,4.474]],["title/miscellaneous/typealiases.html",[439,1.429,815,3.42]],["body/miscellaneous/typealiases.html",[1,1.734,7,0.861,8,0.457,12,0.231,18,0.737,26,0.648,27,0.045,28,0.49,29,0.648,35,0.576,42,0.49,47,0.038,48,0.032,50,2.001,51,3.412,52,2.001,53,2.001,54,2.698,55,2.338,56,2.698,58,2.359,62,2.359,78,1.811,81,1.804,82,2.698,85,0.648,86,2.359,90,2.001,91,1.734,93,2.338,95,1.637,103,1.521,105,2.646,113,1.811,144,2.32,149,2.001,157,3.181,158,1.811,180,2.051,193,2.001,194,2.359,195,2.001,196,2.359,197,2.001,198,1.734,205,1.734,210,1.521,227,1.734,240,1.734,246,1.734,254,1.734,260,1.734,268,1.734,274,1.734,285,1.734,296,1.521,303,1.734,309,1.521,372,2.359,388,2.359,389,3.412,390,2.359,413,2.359,439,1.734,482,3.599,662,2.359,766,3.181,812,2.001,816,2.902,817,4.427,818,2.902,819,2.902,820,4.947,821,4.427,822,4.427,823,4.427,824,4.427,825,2.902,826,4.427,827,2.902,828,2.902,829,2.902,830,4.427,831,2.902,832,2.902,833,2.902,834,3.913]]],"invertedIndex":[["",{"_index":27,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":226,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"coverage.html":{},"index.html":{}}}],["0.2",{"_index":559,"title":{},"body":{"index.html":{}}}],["0.3",{"_index":542,"title":{},"body":{"index.html":{}}}],["0.5",{"_index":557,"title":{},"body":{"index.html":{}}}],["0.8",{"_index":561,"title":{},"body":{"index.html":{}}}],["0/1",{"_index":397,"title":{},"body":{"coverage.html":{}}}],["003366",{"_index":556,"title":{},"body":{"index.html":{}}}],["1",{"_index":266,"title":{},"body":{"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"index.html":{},"license.html":{}}}],["1/1",{"_index":377,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":412,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":376,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":814,"title":{},"body":{"overview.html":{}}}],["16",{"_index":516,"title":{},"body":{"index.html":{}}}],["17/17",{"_index":383,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":146,"title":{},"body":{"classes/DecodeResultBase.html":{},"overview.html":{}}}],["2.0",{"_index":583,"title":{},"body":{"license.html":{}}}],["2004",{"_index":585,"title":{},"body":{"license.html":{}}}],["25/26",{"_index":374,"title":{},"body":{"coverage.html":{}}}],["28/29",{"_index":384,"title":{},"body":{"coverage.html":{}}}],["29/30",{"_index":382,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":457,"title":{},"body":{"index.html":{}}}],["3/3",{"_index":387,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":411,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":385,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":614,"title":{},"body":{"license.html":{}}}],["9",{"_index":593,"title":{},"body":{"license.html":{}}}],["96",{"_index":373,"title":{},"body":{"coverage.html":{}}}],["9a",{"_index":512,"title":{},"body":{"index.html":{}}}],["_e",{"_index":64,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["_i",{"_index":65,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["_o",{"_index":66,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["abov",{"_index":555,"title":{},"body":{"index.html":{},"license.html":{}}}],["abstract",{"_index":57,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["accept",{"_index":320,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["accompani",{"_index":331,"title":{},"body":{"contributing.html":{}}}],["act",{"_index":599,"title":{},"body":{"license.html":{}}}],["add",{"_index":725,"title":{},"body":{"license.html":{}}}],["addendum",{"_index":727,"title":{},"body":{"license.html":{}}}],["addit",{"_index":463,"title":{},"body":{"index.html":{},"license.html":{}}}],["adopt",{"_index":468,"title":{},"body":{"index.html":{}}}],["advis",{"_index":777,"title":{},"body":{"license.html":{}}}],["again",{"_index":352,"title":{},"body":{"contributing.html":{}}}],["against",{"_index":695,"title":{},"body":{"license.html":{}}}],["agre",{"_index":745,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":330,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["alia",{"_index":834,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alias",{"_index":816,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alleg",{"_index":699,"title":{},"body":{"license.html":{}}}],["allow",{"_index":9,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{}}}],["alon",{"_index":692,"title":{},"body":{"license.html":{}}}],["along",{"_index":719,"title":{},"body":{"license.html":{}}}],["alongsid",{"_index":726,"title":{},"body":{"license.html":{}}}],["alreadi",{"_index":347,"title":{},"body":{"contributing.html":{}}}],["and(b",{"_index":709,"title":{},"body":{"license.html":{}}}],["and(c",{"_index":714,"title":{},"body":{"license.html":{}}}],["and(d",{"_index":718,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":783,"title":{},"body":{"license.html":{}}}],["annot",{"_index":641,"title":{},"body":{"license.html":{}}}],["anyarrayvalu",{"_index":414,"title":{},"body":{"coverage.html":{}}}],["anyvalu",{"_index":415,"title":{},"body":{"coverage.html":{}}}],["apach",{"_index":581,"title":{},"body":{"license.html":{}}}],["appear",{"_index":723,"title":{},"body":{"license.html":{}}}],["appendix",{"_index":635,"title":{},"body":{"license.html":{}}}],["appli",{"_index":104,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["applic",{"_index":743,"title":{},"body":{"license.html":{}}}],["appropri",{"_index":754,"title":{},"body":{"license.html":{}}}],["archiv",{"_index":804,"title":{},"body":{"license.html":{}}}],["aris",{"_index":769,"title":{},"body":{"license.html":{}}}],["array",{"_index":210,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedNoneOf.html":{},"interfaces/ValueInput.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["array/tupl",{"_index":498,"title":{},"body":{"index.html":{}}}],["arrayvalu",{"_index":416,"title":{},"body":{"coverage.html":{}}}],["assert",{"_index":790,"title":{},"body":{"license.html":{}}}],["associ",{"_index":138,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["assum",{"_index":755,"title":{},"body":{"license.html":{}}}],["attach",{"_index":634,"title":{},"body":{"license.html":{}}}],["attribut",{"_index":716,"title":{},"body":{"license.html":{}}}],["aunion",{"_index":194,"title":{},"body":{"classes/DecodeResultBase.html":{},"miscellaneous/typealiases.html":{}}}],["author",{"_index":596,"title":{},"body":{"license.html":{}}}],["authorship",{"_index":630,"title":{},"body":{"license.html":{}}}],["avail",{"_index":472,"title":{},"body":{"index.html":{},"license.html":{}}}],["base",{"_index":638,"title":{},"body":{"license.html":{}}}],["basi",{"_index":746,"title":{},"body":{"license.html":{}}}],["be",{"_index":553,"title":{},"body":{"index.html":{}}}],["behalf",{"_index":650,"title":{},"body":{"license.html":{}}}],["below",{"_index":636,"title":{},"body":{"license.html":{}}}],["benefici",{"_index":617,"title":{},"body":{"license.html":{}}}],["between",{"_index":80,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedWithinRange.html":{}}}],["bind",{"_index":647,"title":{},"body":{"license.html":{}}}],["boilerpl",{"_index":791,"title":{},"body":{"license.html":{}}}],["booleanvalu",{"_index":417,"title":{},"body":{"coverage.html":{}}}],["both",{"_index":147,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{}}}],["bracket",{"_index":793,"title":{},"body":{"license.html":{}}}],["bring",{"_index":86,"title":{},"body":{"classes/DecodeResultBase.html":{},"miscellaneous/typealiases.html":{}}}],["build",{"_index":450,"title":{},"body":{"index.html":{}}}],["captur",{"_index":270,"title":{},"body":{"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"miscellaneous/enumerations.html":{}}}],["carri",{"_index":711,"title":{},"body":{"license.html":{}}}],["case",{"_index":567,"title":{},"body":{"index.html":{}}}],["caus",{"_index":604,"title":{},"body":{"license.html":{}}}],["chang",{"_index":713,"title":{},"body":{"license.html":{}}}],["char",{"_index":391,"title":{},"body":{"coverage.html":{}}}],["charact",{"_index":300,"title":{},"body":{"interfaces/TextInput.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["charg",{"_index":674,"title":{},"body":{"license.html":{}}}],["choos",{"_index":778,"title":{},"body":{"license.html":{}}}],["cla",{"_index":345,"title":{},"body":{"contributing.html":{}}}],["claim",{"_index":688,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"coverage.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["code",{"_index":353,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["color",{"_index":501,"title":{},"body":{"index.html":{}}}],["colortextdecod",{"_index":532,"title":{},"body":{"index.html":{}}}],["colortextdecoder('#003355",{"_index":539,"title":{},"body":{"index.html":{}}}],["colortextdecoder('gray",{"_index":541,"title":{},"body":{"index.html":{}}}],["colortextdecoder('gray0.2",{"_index":544,"title":{},"body":{"index.html":{}}}],["colortextdecoder('hsl(0.1,0.2,0.3",{"_index":546,"title":{},"body":{"index.html":{}}}],["colorvaluedecod",{"_index":563,"title":{},"body":{"index.html":{}}}],["combin",{"_index":448,"title":{},"body":{"index.html":{},"license.html":{}}}],["come",{"_index":549,"title":{},"body":{"index.html":{}}}],["comma",{"_index":218,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["comment",{"_index":795,"title":{},"body":{"license.html":{}}}],["commerci",{"_index":776,"title":{},"body":{"license.html":{}}}],["common",{"_index":61,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["commun",{"_index":366,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["compil",{"_index":90,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["compli",{"_index":730,"title":{},"body":{"license.html":{}}}],["complianc",{"_index":806,"title":{},"body":{"license.html":{}}}],["comput",{"_index":774,"title":{},"body":{"license.html":{}}}],["concat",{"_index":223,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedNoneOf.html":{},"coverage.html":{}}}],["concaten",{"_index":222,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["concator(this.descript",{"_index":267,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["condit",{"_index":126,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedNoneOf.html":{},"license.html":{}}}],["configur",{"_index":624,"title":{},"body":{"license.html":{}}}],["consequenti",{"_index":768,"title":{},"body":{"license.html":{}}}],["consid",{"_index":487,"title":{},"body":{"index.html":{}}}],["consist",{"_index":784,"title":{},"body":{"license.html":{}}}],["conspicu",{"_index":661,"title":{},"body":{"license.html":{}}}],["const",{"_index":202,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"index.html":{}}}],["constitut",{"_index":700,"title":{},"body":{"license.html":{}}}],["constru",{"_index":728,"title":{},"body":{"license.html":{}}}],["construct",{"_index":23,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{}}}],["constructor",{"_index":18,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"miscellaneous/typealiases.html":{}}}],["constructor(ent",{"_index":211,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{}}}],["constructor(field",{"_index":249,"title":{},"body":{"classes/ExpectedField.html":{}}}],["constructor(input",{"_index":76,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["constructor(messag",{"_index":19,"title":{},"body":{"classes/CustomError.html":{}}}],["constructor(min",{"_index":231,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{}}}],["constructor(pattern",{"_index":289,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["constructor(readonli",{"_index":45,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"index.html":{}}}],["constructor(valu",{"_index":257,"title":{},"body":{"classes/ExpectedMatch.html":{}}}],["consult",{"_index":363,"title":{},"body":{"contributing.html":{}}}],["consum",{"_index":157,"title":{},"body":{"classes/DecodeResultBase.html":{},"miscellaneous/typealiases.html":{}}}],["contain",{"_index":180,"title":{},"body":{"classes/DecodeResultBase.html":{},"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["content",{"_index":724,"title":{},"body":{"license.html":{}}}],["context",{"_index":314,"title":{},"body":{"interfaces/ValueInput.html":{}}}],["contract",{"_index":608,"title":{},"body":{"license.html":{}}}],["contribut",{"_index":317,"title":{"contributing.html":{}},"body":{"contributing.html":{},"license.html":{}}}],["contribution(",{"_index":691,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":328,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["contributori",{"_index":701,"title":{},"body":{"license.html":{}}}],["control",{"_index":455,"title":{},"body":{"index.html":{},"license.html":{}}}],["contruct",{"_index":154,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["convers",{"_index":627,"title":{},"body":{"license.html":{}}}],["copi",{"_index":704,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":334,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["correspond",{"_index":182,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["counterclaim",{"_index":697,"title":{},"body":{"license.html":{}}}],["coverag",{"_index":369,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cpu",{"_index":495,"title":{},"body":{"index.html":{}}}],["creat",{"_index":200,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["cross",{"_index":696,"title":{},"body":{"license.html":{}}}],["current",{"_index":116,"title":{},"body":{"classes/DecodeResultBase.html":{},"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"index.html":{}}}],["custom",{"_index":10,"title":{},"body":{"classes/CustomError.html":{}}}],["customari",{"_index":740,"title":{},"body":{"license.html":{}}}],["customererror",{"_index":25,"title":{},"body":{"classes/CustomError.html":{}}}],["customerror",{"_index":1,"title":{"classes/CustomError.html":{}},"body":{"classes/CustomError.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["cycl",{"_index":496,"title":{},"body":{"index.html":{}}}],["damag",{"_index":765,"title":{},"body":{"license.html":{}}}],["date",{"_index":703,"title":{},"body":{"license.html":{}}}],["deal",{"_index":565,"title":{},"body":{"index.html":{}}}],["debug",{"_index":41,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{}}}],["decod",{"_index":95,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["decodeerror",{"_index":389,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["decodeerror.combin",{"_index":533,"title":{},"body":{"index.html":{}}}],["decodefailur",{"_index":56,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["decodefailure(input",{"_index":204,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodefailure(this.input",{"_index":188,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodererror",{"_index":470,"title":{},"body":{"index.html":{}}}],["decoderesult",{"_index":51,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["decoderesultbas",{"_index":49,"title":{"classes/DecodeResultBase.html":{}},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{}}}],["decoderesultbase.flatmap",{"_index":162,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.flatmaperror",{"_index":168,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.getunsafefailur",{"_index":177,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.getunsafesuccess",{"_index":176,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.isfailur",{"_index":174,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.issuccess",{"_index":173,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.map",{"_index":164,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.maperror",{"_index":170,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.mapinput",{"_index":171,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decoderesultbase.match",{"_index":160,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodesuccess",{"_index":55,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["decodesuccess(f(this.input",{"_index":172,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodesuccess(input",{"_index":203,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodesuccess(this.input",{"_index":166,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["decodetext",{"_index":392,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["decodevalu",{"_index":418,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["default",{"_index":34,"title":{},"body":{"classes/CustomError.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}}}],["defend",{"_index":786,"title":{},"body":{"license.html":{}}}],["defin",{"_index":21,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{},"license.html":{}}}],["definit",{"_index":564,"title":{},"body":{"index.html":{},"license.html":{}}}],["deliber",{"_index":762,"title":{},"body":{"license.html":{}}}],["deriv",{"_index":637,"title":{},"body":{"license.html":{}}}],["describ",{"_index":209,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedWithinRange.html":{},"index.html":{},"license.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"license.html":{}}}],["design",{"_index":663,"title":{},"body":{"license.html":{}}}],["determin",{"_index":753,"title":{},"body":{"license.html":{}}}],["differ",{"_index":349,"title":{},"body":{"contributing.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["digit",{"_index":393,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["direct",{"_index":602,"title":{},"body":{"license.html":{}}}],["directli",{"_index":60,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{}}}],["disclaim",{"_index":741,"title":{},"body":{"license.html":{}}}],["discrimin",{"_index":36,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}}}],["discuss",{"_index":658,"title":{},"body":{"license.html":{}}}],["display",{"_index":681,"title":{},"body":{"license.html":{}}}],["distribut",{"_index":589,"title":{},"body":{"license.html":{}}}],["document",{"_index":370,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["don't",{"_index":351,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["each",{"_index":668,"title":{},"body":{"license.html":{}}}],["easier",{"_index":802,"title":{},"body":{"license.html":{}}}],["editori",{"_index":639,"title":{},"body":{"license.html":{}}}],["elabor",{"_index":642,"title":{},"body":{"license.html":{}}}],["electron",{"_index":651,"title":{},"body":{"license.html":{}}}],["employ",{"_index":332,"title":{},"body":{"contributing.html":{}}}],["empti",{"_index":572,"title":{},"body":{"index.html":{}}}],["enclos",{"_index":792,"title":{},"body":{"license.html":{}}}],["end",{"_index":242,"title":{},"body":{"classes/ExpectedEoi.html":{},"classes/UnexpectedEoi.html":{},"license.html":{}}}],["entir",{"_index":299,"title":{},"body":{"interfaces/TextInput.html":{},"index.html":{}}}],["entiti",{"_index":207,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["entitytostr",{"_index":216,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"coverage.html":{}}}],["entitytostring(this.ent",{"_index":239,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{}}}],["enumer",{"_index":440,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["eoi",{"_index":306,"title":{},"body":{"classes/UnexpectedEoi.html":{},"coverage.html":{}}}],["eot",{"_index":243,"title":{},"body":{"classes/ExpectedEoi.html":{}}}],["err",{"_index":82,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["err2",{"_index":109,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["error",{"_index":7,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["error(\"can't",{"_index":178,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["even",{"_index":348,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["event",{"_index":758,"title":{},"body":{"license.html":{}}}],["exact",{"_index":256,"title":{},"body":{"classes/ExpectedMatch.html":{}}}],["exampl",{"_index":499,"title":{},"body":{"index.html":{},"license.html":{}}}],["except",{"_index":118,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["exclud",{"_index":660,"title":{},"body":{"license.html":{}}}],["exclus",{"_index":673,"title":{},"body":{"license.html":{}}}],["execut",{"_index":735,"title":{},"body":{"license.html":{}}}],["exercis",{"_index":619,"title":{},"body":{"license.html":{}}}],["exist",{"_index":87,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["expect",{"_index":85,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"miscellaneous/typealiases.html":{}}}],["expected_any_of",{"_index":265,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["expectedanyof",{"_index":205,"title":{"classes/ExpectedAnyOf.html":{}},"body":{"classes/ExpectedAnyOf.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedatleast",{"_index":227,"title":{"classes/ExpectedAtLeast.html":{}},"body":{"classes/ExpectedAtLeast.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedeoi",{"_index":240,"title":{"classes/ExpectedEoi.html":{}},"body":{"classes/ExpectedEoi.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedfield",{"_index":246,"title":{"classes/ExpectedField.html":{}},"body":{"classes/ExpectedField.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedmatch",{"_index":254,"title":{"classes/ExpectedMatch.html":{}},"body":{"classes/ExpectedMatch.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectednoneof",{"_index":260,"title":{"classes/ExpectedNoneOf.html":{}},"body":{"classes/ExpectedNoneOf.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedonc",{"_index":268,"title":{"classes/ExpectedOnce.html":{}},"body":{"classes/ExpectedOnce.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedwithinrang",{"_index":274,"title":{"classes/ExpectedWithinRange.html":{}},"body":{"classes/ExpectedWithinRange.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["explicitli",{"_index":731,"title":{},"body":{"license.html":{}}}],["export",{"_index":43,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{}}}],["express",{"_index":486,"title":{},"body":{"index.html":{},"license.html":{}}}],["extend",{"_index":153,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["extract",{"_index":826,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["f",{"_index":106,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["f(this.failur",{"_index":189,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["f(this.valu",{"_index":163,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["f(v",{"_index":167,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["f]{6})/iy",{"_index":513,"title":{},"body":{"index.html":{}}}],["fail",{"_index":113,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["failur",{"_index":33,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["failure(f(this.input",{"_index":192,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["failure(this.input",{"_index":190,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["failuretostr",{"_index":394,"title":{},"body":{"coverage.html":{}}}],["fals",{"_index":175,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["fee",{"_index":779,"title":{},"body":{"license.html":{}}}],["few",{"_index":323,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["fieeld",{"_index":248,"title":{},"body":{"classes/ExpectedField.html":{}}}],["field",{"_index":78,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedField.html":{},"interfaces/ValueInput.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["fifti",{"_index":612,"title":{},"body":{"license.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"coverage.html":{},"license.html":{}}}],["finitenumbervalu",{"_index":419,"title":{},"body":{"coverage.html":{}}}],["fit",{"_index":471,"title":{},"body":{"index.html":{},"license.html":{}}}],["flag",{"_index":490,"title":{},"body":{"index.html":{}}}],["flatmap",{"_index":67,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["flatmap(f",{"_index":97,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["flatmaperror",{"_index":68,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["flatmaperror(f",{"_index":107,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["flexibl",{"_index":477,"title":{},"body":{"index.html":{}}}],["follow",{"_index":327,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["form",{"_index":112,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["format",{"_index":797,"title":{},"body":{"license.html":{}}}],["found",{"_index":443,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["free",{"_index":676,"title":{},"body":{"license.html":{}}}],["full",{"_index":454,"title":{},"body":{"index.html":{}}}],["function",{"_index":105,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["gener",{"_index":158,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"contributing.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["get",{"_index":315,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["getunsafefailur",{"_index":69,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["getunsafesuccess",{"_index":70,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["github",{"_index":359,"title":{},"body":{"contributing.html":{}}}],["give",{"_index":336,"title":{},"body":{"contributing.html":{},"index.html":{},"license.html":{}}}],["given",{"_index":828,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["goodwil",{"_index":772,"title":{},"body":{"license.html":{}}}],["google'",{"_index":367,"title":{},"body":{"contributing.html":{}}}],["govern",{"_index":811,"title":{},"body":{"license.html":{}}}],["grant",{"_index":597,"title":{},"body":{"license.html":{}}}],["granular",{"_index":478,"title":{},"body":{"index.html":{}}}],["grey",{"_index":503,"title":{},"body":{"index.html":{}}}],["grey(0.2",{"_index":545,"title":{},"body":{"index.html":{}}}],["grey(0.3",{"_index":543,"title":{},"body":{"index.html":{}}}],["grey(v",{"_index":523,"title":{},"body":{"index.html":{}}}],["grey(v.grey",{"_index":574,"title":{},"body":{"index.html":{}}}],["greydecod",{"_index":518,"title":{},"body":{"index.html":{}}}],["greyvalu",{"_index":571,"title":{},"body":{"index.html":{}}}],["grossli",{"_index":763,"title":{},"body":{"license.html":{}}}],["guard",{"_index":124,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["guidelin",{"_index":325,"title":{},"body":{"contributing.html":{}}}],["h",{"_index":558,"title":{},"body":{"index.html":{}}}],["handi",{"_index":550,"title":{},"body":{"index.html":{}}}],["harmless",{"_index":788,"title":{},"body":{"license.html":{}}}],["head",{"_index":340,"title":{},"body":{"contributing.html":{}}}],["help",{"_index":364,"title":{},"body":{"contributing.html":{}}}],["helper",{"_index":199,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["here",{"_index":562,"title":{},"body":{"index.html":{}}}],["herebi",{"_index":669,"title":{},"body":{"license.html":{}}}],["herein",{"_index":733,"title":{},"body":{"license.html":{}}}],["hold",{"_index":787,"title":{},"body":{"license.html":{}}}],["hsl",{"_index":504,"title":{},"body":{"index.html":{}}}],["hsl(0.1,0.2,0.3)anoth",{"_index":547,"title":{},"body":{"index.html":{}}}],["hsl(v.h",{"_index":577,"title":{},"body":{"index.html":{}}}],["hsl(v[0",{"_index":528,"title":{},"body":{"index.html":{}}}],["hsldecod",{"_index":524,"title":{},"body":{"index.html":{}}}],["hslvalu",{"_index":575,"title":{},"body":{"index.html":{}}}],["http://www.apache.org/licens",{"_index":586,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/licens",{"_index":808,"title":{},"body":{"license.html":{}}}],["https://cla.developers.google.com",{"_index":342,"title":{},"body":{"contributing.html":{}}}],["hue",{"_index":505,"title":{},"body":{"index.html":{}}}],["human",{"_index":30,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}}}],["identif",{"_index":803,"title":{},"body":{"license.html":{}}}],["identifi",{"_index":313,"title":{},"body":{"interfaces/ValueInput.html":{},"coverage.html":{},"license.html":{}}}],["ii",{"_index":610,"title":{},"body":{"license.html":{}}}],["iii",{"_index":616,"title":{},"body":{"license.html":{}}}],["implement",{"_index":497,"title":{},"body":{"index.html":{}}}],["impli",{"_index":747,"title":{},"body":{"license.html":{}}}],["import",{"_index":215,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"license.html":{}}}],["improv",{"_index":659,"title":{},"body":{"license.html":{}}}],["in2",{"_index":136,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["inabl",{"_index":770,"title":{},"body":{"license.html":{}}}],["incident",{"_index":767,"title":{},"body":{"license.html":{}}}],["includ",{"_index":356,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["inclus",{"_index":235,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{},"license.html":{}}}],["incorpor",{"_index":666,"title":{},"body":{"license.html":{}}}],["incur",{"_index":789,"title":{},"body":{"license.html":{}}}],["indemn",{"_index":781,"title":{},"body":{"license.html":{}}}],["indemnifi",{"_index":785,"title":{},"body":{"license.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["indic",{"_index":632,"title":{},"body":{"license.html":{}}}],["indirect",{"_index":603,"title":{},"body":{"license.html":{}}}],["individu",{"_index":618,"title":{},"body":{"license.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{}}}],["inform",{"_index":198,"title":{},"body":{"classes/DecodeResultBase.html":{},"contributing.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["infring",{"_index":690,"title":{},"body":{"license.html":{}}}],["input",{"_index":81,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedEoi.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["insid",{"_index":302,"title":{},"body":{"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{}}}],["inspect",{"_index":88,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["instanc",{"_index":24,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"index.html":{}}}],["institut",{"_index":693,"title":{},"body":{"license.html":{}}}],["int",{"_index":827,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["integervalu",{"_index":420,"title":{},"body":{"coverage.html":{}}}],["intend",{"_index":483,"title":{},"body":{"index.html":{}}}],["intention",{"_index":649,"title":{},"body":{"license.html":{}}}],["interfac",{"_index":295,"title":{"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{}},"body":{"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{},"coverage.html":{},"license.html":{},"overview.html":{}}}],["irrevoc",{"_index":677,"title":{},"body":{"license.html":{}}}],["isfailur",{"_index":71,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["issu",{"_index":657,"title":{},"body":{"license.html":{}}}],["issuccess",{"_index":72,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["istoken",{"_index":421,"title":{},"body":{"coverage.html":{}}}],["it'",{"_index":193,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["januari",{"_index":584,"title":{},"body":{"license.html":{}}}],["js",{"_index":311,"title":{},"body":{"interfaces/ValueInput.html":{},"index.html":{}}}],["json",{"_index":552,"title":{},"body":{"index.html":{}}}],["json.pars",{"_index":554,"title":{},"body":{"index.html":{}}}],["json.stringify(this.input",{"_index":179,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["justifi",{"_index":32,"title":{},"body":{"classes/CustomError.html":{}}}],["keep",{"_index":480,"title":{},"body":{"index.html":{}}}],["kind",{"_index":15,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{}}}],["l",{"_index":560,"title":{},"body":{"index.html":{}}}],["languag",{"_index":810,"title":{},"body":{"license.html":{}}}],["last",{"_index":221,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["law",{"_index":744,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":698,"title":{},"body":{"license.html":{}}}],["lazi",{"_index":378,"title":{},"body":{"coverage.html":{}}}],["leav",{"_index":476,"title":{},"body":{"index.html":{}}}],["left",{"_index":537,"title":{},"body":{"index.html":{}}}],["legal",{"_index":598,"title":{},"body":{"license.html":{}}}],["length",{"_index":224,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["letter",{"_index":395,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["level",{"_index":832,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["liabil",{"_index":757,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":764,"title":{},"body":{"license.html":{}}}],["librari",{"_index":449,"title":{},"body":{"index.html":{}}}],["licens",{"_index":329,"title":{"license.html":{}},"body":{"contributing.html":{},"license.html":{}}}],["license.y",{"_index":729,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":594,"title":{},"body":{"license.html":{}}}],["light",{"_index":507,"title":{},"body":{"index.html":{}}}],["limit",{"_index":622,"title":{},"body":{"license.html":{}}}],["link",{"_index":151,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"license.html":{}}}],["list",{"_index":220,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"license.html":{}}}],["liter",{"_index":140,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["literalvalu",{"_index":422,"title":{},"body":{"coverage.html":{}}}],["literalvalue('hsl",{"_index":576,"title":{},"body":{"index.html":{}}}],["litig",{"_index":694,"title":{},"body":{"license.html":{}}}],["loss",{"_index":771,"title":{},"body":{"license.html":{}}}],["love",{"_index":319,"title":{},"body":{"contributing.html":{}}}],["lower_case_lett",{"_index":446,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lowercaselett",{"_index":396,"title":{},"body":{"coverage.html":{}}}],["made",{"_index":631,"title":{},"body":{"license.html":{}}}],["mail",{"_index":655,"title":{},"body":{"license.html":{}}}],["main",{"_index":89,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["make",{"_index":398,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["malfunct",{"_index":775,"title":{},"body":{"license.html":{}}}],["manag",{"_index":605,"title":{},"body":{"license.html":{}}}],["map",{"_index":73,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["map(f",{"_index":129,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["map(v",{"_index":514,"title":{},"body":{"index.html":{}}}],["maperror",{"_index":74,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["maperror(f",{"_index":132,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["mapinput",{"_index":75,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["mapinput(f",{"_index":134,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["mark",{"_index":662,"title":{},"body":{"license.html":{},"miscellaneous/typealiases.html":{}}}],["markoptionalfield",{"_index":821,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["match",{"_index":48,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["match(o",{"_index":139,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["matchanycharof",{"_index":399,"title":{},"body":{"coverage.html":{}}}],["matchinsensit",{"_index":400,"title":{},"body":{"coverage.html":{}}}],["matchinsensitive('gray",{"_index":520,"title":{},"body":{"index.html":{}}}],["matchinsensitive('grey').or(decodeerror.combin",{"_index":519,"title":{},"body":{"index.html":{}}}],["matchinsensitive('hsl",{"_index":525,"title":{},"body":{"index.html":{}}}],["matchnocharof",{"_index":401,"title":{},"body":{"coverage.html":{}}}],["max",{"_index":277,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["maximum",{"_index":280,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["mean",{"_index":573,"title":{},"body":{"index.html":{},"license.html":{}}}],["mechan",{"_index":625,"title":{},"body":{"license.html":{}}}],["media",{"_index":628,"title":{},"body":{"license.html":{}}}],["medium",{"_index":705,"title":{},"body":{"license.html":{}}}],["meet",{"_index":707,"title":{},"body":{"license.html":{}}}],["member",{"_index":357,"title":{},"body":{"contributing.html":{}}}],["memori",{"_index":494,"title":{},"body":{"index.html":{}}}],["merchant",{"_index":749,"title":{},"body":{"license.html":{}}}],["mere",{"_index":646,"title":{},"body":{"license.html":{}}}],["messag",{"_index":11,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{}}}],["method",{"_index":16,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{}}}],["min",{"_index":230,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{}}}],["minimum",{"_index":234,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{}}}],["miscellan",{"_index":439,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["mismatch",{"_index":292,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["miss",{"_index":213,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{}}}],["modif",{"_index":621,"title":{},"body":{"license.html":{}}}],["modifi",{"_index":710,"title":{},"body":{"license.html":{}}}],["modul",{"_index":812,"title":{"modules.html":{}},"body":{"modules.html":{},"miscellaneous/typealiases.html":{}}}],["more",{"_index":365,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["mostli",{"_index":40,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{}}}],["name",{"_index":28,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/ValueInput.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["nativ",{"_index":466,"title":{},"body":{"index.html":{}}}],["necessarili",{"_index":689,"title":{},"body":{"license.html":{}}}],["need",{"_index":326,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["neglig",{"_index":761,"title":{},"body":{"license.html":{}}}],["never",{"_index":58,"title":{},"body":{"classes/DecodeResultBase.html":{},"miscellaneous/typealiases.html":{}}}],["new",{"_index":103,"title":{},"body":{"classes/DecodeResultBase.html":{},"contributing.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["next",{"_index":155,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["non",{"_index":672,"title":{},"body":{"license.html":{}}}],["none",{"_index":263,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["normal",{"_index":442,"title":{},"body":{"miscellaneous/enumerations.html":{},"license.html":{}}}],["noth",{"_index":536,"title":{},"body":{"index.html":{},"license.html":{}}}],["notic",{"_index":633,"title":{},"body":{"license.html":{}}}],["notwithstand",{"_index":732,"title":{},"body":{"license.html":{}}}],["nullablevalu",{"_index":423,"title":{},"body":{"coverage.html":{}}}],["nullvalu",{"_index":424,"title":{},"body":{"coverage.html":{}}}],["number",{"_index":232,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{},"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{},"index.html":{}}}],["numbervalu",{"_index":425,"title":{},"body":{"coverage.html":{}}}],["numbervalue.test(v",{"_index":569,"title":{},"body":{"index.html":{}}}],["o",{"_index":142,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["o.failure(thi",{"_index":187,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["o.success(thi",{"_index":161,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["object",{"_index":144,"title":{},"body":{"classes/DecodeResultBase.html":{},"interfaces/ValueInput.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["objectvalu",{"_index":426,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["oblig",{"_index":782,"title":{},"body":{"license.html":{}}}],["obtain",{"_index":807,"title":{},"body":{"license.html":{}}}],["occurr",{"_index":279,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["offer",{"_index":685,"title":{},"body":{"license.html":{}}}],["on",{"_index":208,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"contributing.html":{},"index.html":{},"license.html":{}}}],["onc",{"_index":271,"title":{},"body":{"classes/ExpectedOnce.html":{},"contributing.html":{}}}],["oneof",{"_index":379,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["open",{"_index":368,"title":{},"body":{"contributing.html":{}}}],["oper",{"_index":110,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["option",{"_index":29,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["optionalvalu",{"_index":427,"title":{},"body":{"coverage.html":{}}}],["optionalwhitespac",{"_index":402,"title":{},"body":{"coverage.html":{}}}],["origin",{"_index":131,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["otherwis",{"_index":609,"title":{},"body":{"license.html":{}}}],["out",{"_index":93,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["out2",{"_index":101,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["output",{"_index":482,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["outstand",{"_index":615,"title":{},"body":{"license.html":{}}}],["over",{"_index":341,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["overview",{"_index":813,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":595,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":611,"title":{},"body":{"license.html":{}}}],["page",{"_index":801,"title":{},"body":{"license.html":{}}}],["param",{"_index":44,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{}}}],["paramet",{"_index":26,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["pars",{"_index":500,"title":{},"body":{"index.html":{}}}],["parseint(v",{"_index":515,"title":{},"body":{"index.html":{}}}],["parser",{"_index":462,"title":{},"body":{"index.html":{}}}],["parsers/decod",{"_index":451,"title":{},"body":{"index.html":{}}}],["part",{"_index":339,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["parti",{"_index":722,"title":{},"body":{"license.html":{}}}],["particular",{"_index":750,"title":{},"body":{"license.html":{}}}],["parts",{"_index":447,"title":{},"body":{"index.html":{}}}],["partsing/core/decod",{"_index":456,"title":{},"body":{"index.html":{}}}],["partsing/error",{"_index":473,"title":{},"body":{"index.html":{}}}],["partsing/text",{"_index":465,"title":{},"body":{"index.html":{}}}],["partsing/valu",{"_index":467,"title":{},"body":{"index.html":{}}}],["pass",{"_index":145,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["patch",{"_index":321,"title":{},"body":{"contributing.html":{}}}],["patent",{"_index":683,"title":{},"body":{"license.html":{}}}],["path",{"_index":312,"title":{},"body":{"interfaces/ValueInput.html":{},"index.html":{}}}],["pathtostr",{"_index":428,"title":{},"body":{"coverage.html":{}}}],["pattern",{"_index":288,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["patternmismatch",{"_index":285,"title":{"classes/PatternMismatch.html":{}},"body":{"classes/PatternMismatch.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["payload",{"_index":551,"title":{},"body":{"index.html":{}}}],["percent",{"_index":613,"title":{},"body":{"license.html":{}}}],["perform",{"_index":143,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["permiss",{"_index":337,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["perpetu",{"_index":670,"title":{},"body":{"license.html":{}}}],["pertain",{"_index":717,"title":{},"body":{"license.html":{}}}],["picknext",{"_index":526,"title":{},"body":{"index.html":{}}}],["picknext(ratiodecod",{"_index":522,"title":{},"body":{"index.html":{}}}],["place",{"_index":183,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["placehold",{"_index":84,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["popul",{"_index":148,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["portion",{"_index":459,"title":{},"body":{"index.html":{}}}],["posit",{"_index":301,"title":{},"body":{"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{},"index.html":{}}}],["possibl",{"_index":54,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["power",{"_index":601,"title":{},"body":{"license.html":{}}}],["predic",{"_index":444,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["prefer",{"_index":620,"title":{},"body":{"license.html":{}}}],["prepar",{"_index":679,"title":{},"body":{"license.html":{}}}],["print",{"_index":800,"title":{},"body":{"license.html":{}}}],["probabl",{"_index":350,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["product",{"_index":739,"title":{},"body":{"license.html":{}}}],["project",{"_index":322,"title":{},"body":{"contributing.html":{}}}],["promin",{"_index":712,"title":{},"body":{"license.html":{}}}],["properti",{"_index":13,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{}}}],["protect",{"_index":120,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["provid",{"_index":38,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{},"license.html":{}}}],["publicli",{"_index":680,"title":{},"body":{"license.html":{}}}],["pull",{"_index":360,"title":{},"body":{"contributing.html":{}}}],["purpos",{"_index":362,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["r",{"_index":98,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["rang",{"_index":282,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["ratiodecod",{"_index":508,"title":{},"body":{"index.html":{}}}],["ratiovalu",{"_index":568,"title":{},"body":{"index.html":{}}}],["readabl",{"_index":31,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"license.html":{}}}],["readeabl",{"_index":291,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["readonli",{"_index":14,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"index.html":{}}}],["realli",{"_index":452,"title":{},"body":{"index.html":{}}}],["realloc",{"_index":491,"title":{},"body":{"index.html":{}}}],["reason",{"_index":181,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["receiv",{"_index":664,"title":{},"body":{"license.html":{}}}],["recipi",{"_index":708,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":798,"title":{},"body":{"license.html":{}}}],["record/object",{"_index":251,"title":{},"body":{"classes/ExpectedField.html":{}}}],["recov",{"_index":111,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["redistribut",{"_index":338,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["regard",{"_index":736,"title":{},"body":{"license.html":{}}}],["regexp",{"_index":403,"title":{},"body":{"coverage.html":{}}}],["regexp(/0[.]\\d+/y).map(numb",{"_index":509,"title":{},"body":{"index.html":{}}}],["regexp(/[#]([0",{"_index":511,"title":{},"body":{"index.html":{}}}],["regular",{"_index":485,"title":{},"body":{"index.html":{}}}],["remain",{"_index":645,"title":{},"body":{"license.html":{}}}],["rememb",{"_index":458,"title":{},"body":{"index.html":{}}}],["repeat",{"_index":229,"title":{},"body":{"classes/ExpectedAtLeast.html":{}}}],["repetit",{"_index":236,"title":{},"body":{"classes/ExpectedAtLeast.html":{}}}],["replac",{"_index":794,"title":{},"body":{"license.html":{}}}],["repres",{"_index":643,"title":{},"body":{"license.html":{}}}],["represent",{"_index":39,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{}}}],["reproduc",{"_index":678,"title":{},"body":{"license.html":{}}}],["reproduct",{"_index":588,"title":{},"body":{"license.html":{}}}],["request",{"_index":361,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["requir",{"_index":358,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["respons",{"_index":752,"title":{},"body":{"license.html":{}}}],["rest",{"_index":404,"title":{},"body":{"coverage.html":{}}}],["result",{"_index":47,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["retain",{"_index":333,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["return",{"_index":42,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["review",{"_index":354,"title":{},"body":{"contributing.html":{}}}],["revis",{"_index":640,"title":{},"body":{"license.html":{}}}],["rgb",{"_index":502,"title":{},"body":{"index.html":{}}}],["rgb(0x003355",{"_index":540,"title":{},"body":{"index.html":{}}}],["rgb(v",{"_index":517,"title":{},"body":{"index.html":{}}}],["rgbdecod",{"_index":510,"title":{},"body":{"index.html":{}}}],["rgbvalu",{"_index":580,"title":{},"body":{"index.html":{}}}],["right",{"_index":125,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["risk",{"_index":756,"title":{},"body":{"license.html":{}}}],["royalti",{"_index":675,"title":{},"body":{"license.html":{}}}],["s",{"_index":152,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{}}}],["safeintegervalu",{"_index":429,"title":{},"body":{"coverage.html":{}}}],["same",{"_index":799,"title":{},"body":{"license.html":{}}}],["satur",{"_index":506,"title":{},"body":{"index.html":{}}}],["save",{"_index":493,"title":{},"body":{"index.html":{}}}],["scenario",{"_index":548,"title":{},"body":{"index.html":{}}}],["scope",{"_index":127,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["section",{"_index":591,"title":{},"body":{"license.html":{}}}],["see",{"_index":63,"title":{},"body":{"classes/DecodeResultBase.html":{},"contributing.html":{},"license.html":{}}}],["sell",{"_index":686,"title":{},"body":{"license.html":{}}}],["sent",{"_index":654,"title":{},"body":{"license.html":{}}}],["separ",{"_index":219,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"license.html":{}}}],["separatedbytimes(match",{"_index":527,"title":{},"body":{"index.html":{}}}],["sequenc",{"_index":380,"title":{},"body":{"coverage.html":{}}}],["servic",{"_index":738,"title":{},"body":{"license.html":{}}}],["set",{"_index":464,"title":{},"body":{"index.html":{}}}],["shall",{"_index":590,"title":{},"body":{"license.html":{}}}],["shape",{"_index":469,"title":{},"body":{"index.html":{}}}],["share",{"_index":79,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["sign",{"_index":343,"title":{},"body":{"contributing.html":{}}}],["signatur",{"_index":62,"title":{},"body":{"classes/DecodeResultBase.html":{},"miscellaneous/typealiases.html":{}}}],["simpl",{"_index":474,"title":{},"body":{"index.html":{}}}],["simpli",{"_index":335,"title":{},"body":{"contributing.html":{}}}],["simplifi",{"_index":481,"title":{},"body":{"index.html":{}}}],["skipnext(eoi",{"_index":534,"title":{},"body":{"index.html":{}}}],["skipnext(match",{"_index":531,"title":{},"body":{"index.html":{}}}],["skipnext(optionalwhitespac",{"_index":521,"title":{},"body":{"index.html":{}}}],["slice",{"_index":492,"title":{},"body":{"index.html":{}}}],["small",{"_index":324,"title":{},"body":{"contributing.html":{}}}],["softwar",{"_index":623,"title":{},"body":{"license.html":{}}}],["sole",{"_index":751,"title":{},"body":{"license.html":{}}}],["somehow",{"_index":461,"title":{},"body":{"index.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"contributing.html":{},"license.html":{}}}],["special",{"_index":766,"title":{},"body":{"license.html":{},"miscellaneous/typealiases.html":{}}}],["specif",{"_index":809,"title":{},"body":{"license.html":{}}}],["specifi",{"_index":831,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../decoder.t",{"_index":819,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../entity.t",{"_index":441,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../index.t",{"_index":817,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../result.t",{"_index":818,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../type_level.t",{"_index":820,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/core/decoder.t",{"_index":372,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/result.t",{"_index":50,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/result.ts:101",{"_index":128,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:108",{"_index":122,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:115",{"_index":121,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:122",{"_index":114,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:127",{"_index":150,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:34",{"_index":83,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:38",{"_index":92,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:42",{"_index":94,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:46",{"_index":77,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:62",{"_index":141,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:71",{"_index":100,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:76",{"_index":108,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:82",{"_index":130,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:88",{"_index":133,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/result.ts:94",{"_index":135,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["src/core/type_level.t",{"_index":825,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/error/custom_error.t",{"_index":5,"title":{},"body":{"classes/CustomError.html":{},"coverage.html":{}}}],["src/error/custom_error.ts:24",{"_index":22,"title":{},"body":{"classes/CustomError.html":{}}}],["src/error/custom_error.ts:35",{"_index":37,"title":{},"body":{"classes/CustomError.html":{}}}],["src/error/entity.t",{"_index":386,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/error/expected_any_of.t",{"_index":206,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"coverage.html":{}}}],["src/error/expected_any_of.ts:44",{"_index":212,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["src/error/expected_any_of.ts:56",{"_index":214,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["src/error/expected_at_least.t",{"_index":228,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"coverage.html":{}}}],["src/error/expected_at_least.ts:26",{"_index":233,"title":{},"body":{"classes/ExpectedAtLeast.html":{}}}],["src/error/expected_at_least.ts:38",{"_index":237,"title":{},"body":{"classes/ExpectedAtLeast.html":{}}}],["src/error/expected_eoi.t",{"_index":241,"title":{},"body":{"classes/ExpectedEoi.html":{},"coverage.html":{}}}],["src/error/expected_eoi.ts:24",{"_index":244,"title":{},"body":{"classes/ExpectedEoi.html":{}}}],["src/error/expected_eoi.ts:29",{"_index":245,"title":{},"body":{"classes/ExpectedEoi.html":{}}}],["src/error/expected_field.t",{"_index":247,"title":{},"body":{"classes/ExpectedField.html":{},"coverage.html":{}}}],["src/error/expected_field.ts:24",{"_index":250,"title":{},"body":{"classes/ExpectedField.html":{}}}],["src/error/expected_field.ts:35",{"_index":252,"title":{},"body":{"classes/ExpectedField.html":{}}}],["src/error/expected_match.t",{"_index":255,"title":{},"body":{"classes/ExpectedMatch.html":{},"coverage.html":{}}}],["src/error/expected_match.ts:25",{"_index":258,"title":{},"body":{"classes/ExpectedMatch.html":{}}}],["src/error/expected_match.ts:36",{"_index":259,"title":{},"body":{"classes/ExpectedMatch.html":{}}}],["src/error/expected_none_of.t",{"_index":261,"title":{},"body":{"classes/ExpectedNoneOf.html":{},"coverage.html":{}}}],["src/error/expected_none_of.ts:28",{"_index":262,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["src/error/expected_none_of.ts:41",{"_index":264,"title":{},"body":{"classes/ExpectedNoneOf.html":{}}}],["src/error/expected_once.t",{"_index":269,"title":{},"body":{"classes/ExpectedOnce.html":{},"coverage.html":{}}}],["src/error/expected_once.ts:27",{"_index":272,"title":{},"body":{"classes/ExpectedOnce.html":{}}}],["src/error/expected_once.ts:37",{"_index":273,"title":{},"body":{"classes/ExpectedOnce.html":{}}}],["src/error/expected_within_range.t",{"_index":275,"title":{},"body":{"classes/ExpectedWithinRange.html":{},"coverage.html":{}}}],["src/error/expected_within_range.ts:25",{"_index":278,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["src/error/expected_within_range.ts:37",{"_index":283,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["src/error/index.t",{"_index":388,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/error/pattern_mismatch.t",{"_index":286,"title":{},"body":{"classes/PatternMismatch.html":{},"coverage.html":{}}}],["src/error/pattern_mismatch.ts:24",{"_index":290,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["src/error/pattern_mismatch.ts:35",{"_index":293,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["src/error/unexpected_eoi.t",{"_index":304,"title":{},"body":{"classes/UnexpectedEoi.html":{},"coverage.html":{}}}],["src/error/unexpected_eoi.ts:24",{"_index":307,"title":{},"body":{"classes/UnexpectedEoi.html":{}}}],["src/error/unexpected_eoi.ts:29",{"_index":308,"title":{},"body":{"classes/UnexpectedEoi.html":{}}}],["src/text/index.t",{"_index":390,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/text/input.t",{"_index":297,"title":{},"body":{"interfaces/TextInput.html":{},"coverage.html":{}}}],["src/value/index.t",{"_index":413,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/value/input.t",{"_index":310,"title":{},"body":{"interfaces/ValueInput.html":{},"coverage.html":{}}}],["start",{"_index":316,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["state",{"_index":684,"title":{},"body":{"license.html":{}}}],["statement",{"_index":371,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["sticki",{"_index":489,"title":{},"body":{"index.html":{}}}],["still",{"_index":475,"title":{},"body":{"index.html":{}}}],["stoppag",{"_index":773,"title":{},"body":{"license.html":{}}}],["store",{"_index":298,"title":{},"body":{"interfaces/TextInput.html":{},"interfaces/ValueInput.html":{}}}],["stream",{"_index":197,"title":{},"body":{"classes/DecodeResultBase.html":{},"interfaces/TextInput.html":{},"miscellaneous/typealiases.html":{}}}],["string",{"_index":20,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"index.html":{}}}],["stringvalu",{"_index":430,"title":{},"body":{"coverage.html":{}}}],["subject",{"_index":667,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":682,"title":{},"body":{"license.html":{}}}],["submiss",{"_index":355,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["submit",{"_index":344,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["subsequ",{"_index":665,"title":{},"body":{"license.html":{}}}],["succ",{"_index":186,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["succe",{"_index":381,"title":{},"body":{"coverage.html":{}}}],["succeed",{"_index":201,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["success",{"_index":96,"title":{},"body":{"classes/DecodeResultBase.html":{},"coverage.html":{}}}],["successfulli",{"_index":195,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["such",{"_index":606,"title":{},"body":{"license.html":{}}}],["super(input",{"_index":159,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["supersed",{"_index":734,"title":{},"body":{"license.html":{}}}],["support",{"_index":780,"title":{},"body":{"license.html":{}}}],["sure",{"_index":535,"title":{},"body":{"index.html":{}}}],["syntax",{"_index":796,"title":{},"body":{"license.html":{}}}],["system",{"_index":656,"title":{},"body":{"license.html":{}}}],["t",{"_index":829,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["tabl",{"_index":438,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":437,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":149,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["takecharbetween",{"_index":405,"title":{},"body":{"coverage.html":{}}}],["takecharwhil",{"_index":406,"title":{},"body":{"coverage.html":{}}}],["term",{"_index":587,"title":{},"body":{"license.html":{}}}],["termin",{"_index":702,"title":{},"body":{"license.html":{}}}],["testchar",{"_index":407,"title":{},"body":{"coverage.html":{}}}],["testobject",{"_index":431,"title":{},"body":{"coverage.html":{}}}],["testtyp",{"_index":432,"title":{},"body":{"coverage.html":{}}}],["testvalu",{"_index":433,"title":{},"body":{"coverage.html":{}}}],["text",{"_index":479,"title":{},"body":{"index.html":{},"license.html":{}}}],["textdecod",{"_index":822,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["textinput",{"_index":296,"title":{"interfaces/TextInput.html":{}},"body":{"interfaces/TextInput.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["theori",{"_index":759,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":648,"title":{},"body":{"license.html":{}}}],["third",{"_index":721,"title":{},"body":{"license.html":{}}}],["this.failur",{"_index":185,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["this.failures.map(f",{"_index":191,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["this.field",{"_index":253,"title":{},"body":{"classes/ExpectedField.html":{}}}],["this.flatmap(v",{"_index":165,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["this.max",{"_index":284,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["this.messag",{"_index":46,"title":{},"body":{"classes/CustomError.html":{}}}],["this.min",{"_index":238,"title":{},"body":{"classes/ExpectedAtLeast.html":{},"classes/ExpectedWithinRange.html":{}}}],["this.pattern",{"_index":294,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["this.valu",{"_index":169,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedMatch.html":{}}}],["those",{"_index":566,"title":{},"body":{"index.html":{},"license.html":{}}}],["three",{"_index":196,"title":{},"body":{"classes/DecodeResultBase.html":{},"miscellaneous/typealiases.html":{}}}],["through",{"_index":592,"title":{},"body":{"license.html":{}}}],["throw",{"_index":117,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["time",{"_index":91,"title":{},"body":{"classes/DecodeResultBase.html":{},"classes/ExpectedAtLeast.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["titl",{"_index":748,"title":{},"body":{"license.html":{}}}],["tort",{"_index":760,"title":{},"body":{"license.html":{}}}],["tostr",{"_index":17,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"classes/UnexpectedEoi.html":{},"index.html":{}}}],["track",{"_index":460,"title":{},"body":{"index.html":{},"license.html":{}}}],["trade",{"_index":737,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":715,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":687,"title":{},"body":{"license.html":{}}}],["transfom",{"_index":102,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["transform",{"_index":137,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"license.html":{}}}],["translat",{"_index":626,"title":{},"body":{"license.html":{}}}],["tri",{"_index":156,"title":{},"body":{"classes/DecodeResultBase.html":{},"miscellaneous/enumerations.html":{}}}],["true",{"_index":123,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["tupletounion",{"_index":823,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["tuplevalu",{"_index":434,"title":{},"body":{"coverage.html":{}}}],["two",{"_index":53,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["twp",{"_index":276,"title":{},"body":{"classes/ExpectedWithinRange.html":{}}}],["type",{"_index":8,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":815,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["u",{"_index":830,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["undefineablevalu",{"_index":435,"title":{},"body":{"coverage.html":{}}}],["undefinedvalu",{"_index":436,"title":{},"body":{"coverage.html":{}}}],["under",{"_index":600,"title":{},"body":{"license.html":{}}}],["unexpect",{"_index":305,"title":{},"body":{"classes/UnexpectedEoi.html":{}}}],["unexpectedeoi",{"_index":303,"title":{"classes/UnexpectedEoi.html":{}},"body":{"classes/UnexpectedEoi.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["union",{"_index":52,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["unless",{"_index":119,"title":{},"body":{"classes/DecodeResultBase.html":{},"license.html":{}}}],["unwrap",{"_index":115,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["uppercase_lett",{"_index":445,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["uppercaselett",{"_index":408,"title":{},"body":{"coverage.html":{}}}],["us",{"_index":59,"title":{},"body":{"classes/DecodeResultBase.html":{},"contributing.html":{},"index.html":{},"license.html":{}}}],["usag",{"_index":833,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["util",{"_index":217,"title":{},"body":{"classes/ExpectedAnyOf.html":{},"index.html":{}}}],["v",{"_index":570,"title":{},"body":{"index.html":{}}}],["v.",{"_index":578,"title":{},"body":{"index.html":{}}}],["v.l",{"_index":579,"title":{},"body":{"index.html":{}}}],["v[1",{"_index":529,"title":{},"body":{"index.html":{}}}],["v[2",{"_index":530,"title":{},"body":{"index.html":{}}}],["valid",{"_index":184,"title":{},"body":{"classes/DecodeResultBase.html":{},"index.html":{}}}],["valu",{"_index":35,"title":{},"body":{"classes/CustomError.html":{},"classes/DecodeResultBase.html":{},"classes/ExpectedAnyOf.html":{},"classes/ExpectedAtLeast.html":{},"classes/ExpectedEoi.html":{},"classes/ExpectedField.html":{},"classes/ExpectedMatch.html":{},"classes/ExpectedNoneOf.html":{},"classes/ExpectedOnce.html":{},"classes/ExpectedWithinRange.html":{},"classes/PatternMismatch.html":{},"interfaces/TextInput.html":{},"classes/UnexpectedEoi.html":{},"interfaces/ValueInput.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["valuedecod",{"_index":824,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["valueinput",{"_index":309,"title":{"interfaces/ValueInput.html":{}},"body":{"interfaces/ValueInput.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["values.length",{"_index":225,"title":{},"body":{"classes/ExpectedAnyOf.html":{}}}],["variabl",{"_index":375,"title":{},"body":{"coverage.html":{}}}],["verbal",{"_index":652,"title":{},"body":{"license.html":{}}}],["version",{"_index":582,"title":{},"body":{"license.html":{}}}],["void",{"_index":99,"title":{},"body":{"classes/DecodeResultBase.html":{}}}],["want",{"_index":453,"title":{},"body":{"index.html":{}}}],["warranti",{"_index":742,"title":{},"body":{"license.html":{}}}],["wasn't",{"_index":287,"title":{},"body":{"classes/PatternMismatch.html":{}}}],["we'd",{"_index":318,"title":{},"body":{"contributing.html":{}}}],["wherev",{"_index":720,"title":{},"body":{"license.html":{}}}],["whether",{"_index":607,"title":{},"body":{"license.html":{}}}],["whitespac",{"_index":409,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["whole",{"_index":644,"title":{},"body":{"license.html":{}}}],["within",{"_index":281,"title":{},"body":{"classes/ExpectedWithinRange.html":{},"index.html":{},"license.html":{}}}],["without",{"_index":706,"title":{},"body":{"license.html":{}}}],["withposit",{"_index":410,"title":{},"body":{"coverage.html":{}}}],["work",{"_index":629,"title":{},"body":{"license.html":{}}}],["worldwid",{"_index":671,"title":{},"body":{"license.html":{}}}],["wrap",{"_index":538,"title":{},"body":{"index.html":{}}}],["write",{"_index":484,"title":{},"body":{"index.html":{},"license.html":{}}}],["written",{"_index":653,"title":{},"body":{"license.html":{}}}],["y",{"_index":488,"title":{},"body":{"index.html":{}}}],["you'v",{"_index":346,"title":{},"body":{"contributing.html":{}}}],["yyyi",{"_index":805,"title":{},"body":{"license.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/CustomError.html":{"url":"classes/CustomError.html","title":"class - CustomError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/custom_error.ts\n        \n\n            \n                Description\n            \n            \n                Error type that allows for a customized message.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/custom_error.ts:24\n                            \n                        \n\n                \n                    \n                            Construct an instance of CustomerError.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The human readable message that justifies the failure.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'custom-error'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/custom_error.ts:24\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/custom_error.ts:35\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class CustomError {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'custom-error' = 'custom-error'\n\n  /**\n   * Construct an instance of `CustomerError`.\n   * @param message The human readable message that justifies the failure.\n   */\n  constructor(readonly message: string) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return this.message\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DecodeResultBase.html":{"url":"classes/DecodeResultBase.html","title":"class - DecodeResultBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DecodeResultBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/result.ts\n        \n\n            \n                Description\n            \n            \n                DecodeResult is a union type that has two possible constructors\nDecodeSuccess and DecodeFailure.\nDecodeResultBase is abstract and should never be used directly. It is\ndefined to provide a common signature to the only two possible constructors\nDecodeSuccess and DecodeFailure.\nSee DecodeResult.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                _E\n                            \n                            \n                                    Readonly\n                                _I\n                            \n                            \n                                    Readonly\n                                _O\n                            \n                            \n                                    Abstract\n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                flatMap\n                            \n                            \n                                    Abstract\n                                flatMapError\n                            \n                            \n                                    Abstract\n                                getUnsafeFailures\n                            \n                            \n                                    Abstract\n                                getUnsafeSuccess\n                            \n                            \n                                    Abstract\n                                isFailure\n                            \n                            \n                                    Abstract\n                                isSuccess\n                            \n                            \n                                    Abstract\n                                map\n                            \n                            \n                                    Abstract\n                                mapError\n                            \n                            \n                                    Abstract\n                                mapInput\n                            \n                            \n                                    Abstract\n                                match\n                            \n                            \n                                    Abstract\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(input: In)\n                    \n                \n                        \n                            \n                                Defined in src/core/result.ts:46\n                            \n                        \n\n                \n                    \n                            Construct an instance of DecodeResult. The only field that is shared\nbetween DecodeSuccess and DecodeFailure is input: In.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        input\n                                                  \n                                                        \n                                                                    In\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            _E\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _E:     Err\n\n                    \n                \n                    \n                        \n                            Type :     Err\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/result.ts:34\n                            \n                        \n\n                \n                    \n                        These placeholder (_I, _O, _E) types are not expected to bring any\nvalue. They exist to allow inspecting the main types of a DecodeResult at\ncompile time.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            _I\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _I:     In\n\n                    \n                \n                    \n                        \n                            Type :     In\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/result.ts:38\n                            \n                        \n\n                \n                    \n                        See _E.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            _O\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _O:     Out\n\n                    \n                \n                    \n                        \n                            Type :     Out\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/result.ts:42\n                            \n                        \n\n                \n                    \n                        See _E.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \"decode-success\" | \"decode-failure\"\n\n                    \n                \n                    \n                        \n                            Type :     \"decode-success\" | \"decode-failure\"\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/result.ts:46\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            flatMap\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        flatMap(f: (r: Out) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:71\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        Out2\n                                \n                            \n                        \n\n                \n                    \n                            Transfom the result of a DecodeSuccess into a new DecodeResult by applying\nthe function f to it.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            flatMapError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        flatMapError(f: (r: Err[]) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:76\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        Err2\n                                \n                            \n                        \n\n                \n                    \n                            Transfom the result of a DecodeFailure into a new DecodeResult by applying\nthe function f to it. This operation allows to recover form a failed result.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            getUnsafeFailures\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getUnsafeFailures()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:122\n                            \n                        \n\n\n                \n                    \n                            Unwrap the result value of a DecodeFailure. If the current instance is of\ntype DecodeSuccess then this function will throw an exception.\nDo not use unless you are protecting from exceptions.\n\n\n                            \n                                Returns :     Err[]\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            getUnsafeSuccess\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getUnsafeSuccess()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:115\n                            \n                        \n\n\n                \n                    \n                            Unwrap the result value of a DecodeSuccess. If the current instance is of\ntype DecodeFailure then this function will throw an exception.\nDo not use unless you are protecting from exceptions.\n\n\n                            \n                                Returns :     Out\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            isFailure\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        isFailure()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:108\n                            \n                        \n\n\n                \n                    \n                            Return true if the current instance is of type DecodeFailure. It also\nprovide a guard value so that properties of DecodeFailure can be used\nin the right conditional scope.\n\n\n                            \n                                Returns :     DecodeFailure\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            isSuccess\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        isSuccess()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:101\n                            \n                        \n\n\n                \n                    \n                            Return true if the current instance is of type DecodeSuccess. It also\nprovide a guard value so that properties of DecodeSuccess can be used\nin the right conditional scope.\n\n\n                            \n                                Returns :     DecodeSuccess\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            map\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        map(f: (r: Out) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:82\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        Out2\n                                \n                            \n                        \n\n                \n                    \n                            Transfom the result of a DecodeSuccess into a new value of type Out2 by\napplying the function f to the original Out value.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            mapError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        mapError(f: (r: Err) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:88\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        Err2\n                                \n                            \n                        \n\n                \n                    \n                            Transfom the result of a DecodeFailure into a new value of type Err2 by\napplying the function f to the original Err value.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            mapInput\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        mapInput(f: (i: In) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:94\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        In2\n                                \n                            \n                        \n\n                \n                    \n                            Transform the input value associated with the current DecodeResult into\na new input of type In2.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        f\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     DecodeResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            match\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        match(o: literal type)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:62\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        O\n                                \n                            \n                        \n\n                \n                    \n                            Transform an instance of DecodeResult into any type O.\nTo perform the transformation an object is passed with 2 fields success\nand failure. Both fields must be populated with a function.\n\nsuccess will take a function DecodeSuccess -> O\nfailure will take a function DecodeFailure -> O\n\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        o\n                                                        \n                                                                    literal type\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     O\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Abstract\n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/result.ts:127\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        abstract class DecodeResultBase {\n  /**\n   * These placeholder (`_I`, `_O`, `_E`) types are not expected to bring any\n   * value. They exist to allow inspecting the main types of a DecodeResult at\n   * compile time.\n   */\n  readonly _E!: Err\n  /**\n   * See {@link _E}.\n   */\n  readonly _I!: In\n  /**\n   * See {@link _E}.\n   */\n  readonly _O!: Out\n  /**\n   * Type discriminator\n   */\n  abstract readonly kind: 'decode-success' | 'decode-failure'\n\n  /**\n   * Construct an instance of `{@link DecodeResult}`. The only field that is shared\n   * between `{@link DecodeSuccess}` and `{@link DecodeFailure}` is `input: In`.\n   */\n  constructor(readonly input: In) {}\n\n  /**\n   * Transform an instance of `{@link DecodeResult}` into any type `O`.\n   * To perform the transformation an object is passed with 2 fields `success`\n   * and `failure`. Both fields must be populated with a function.\n   *\n   * * `success` will take a function `DecodeSuccess -> O`\n   * * `failure` will take a function `DecodeFailure -> O`\n   */\n  abstract match(o: {\n    success: (s: DecodeSuccess) => O\n    failure: (f: DecodeFailure) => O\n  }): O\n\n  /**\n   * Transfom the result of a `DecodeSuccess` into a new `DecodeResult` by applying\n   * the function `f` to it.\n   */\n  abstract flatMap(f: (r: Out) => DecodeResult): DecodeResult\n  /**\n   * Transfom the result of a `DecodeFailure` into a new `DecodeResult` by applying\n   * the function `f` to it. This operation allows to recover form a failed result.\n   */\n  abstract flatMapError(f: (r: Err[]) => DecodeResult): DecodeResult\n\n  /**\n   * Transfom the result of a `DecodeSuccess` into a new value of type `Out2` by\n   * applying the function `f` to the original `Out` value.\n   */\n  abstract map(f: (r: Out) => Out2): DecodeResult\n\n  /**\n   * Transfom the result of a `DecodeFailure` into a new value of type `Err2` by\n   * applying the function `f` to the original `Err` value.\n   */\n  abstract mapError(f: (r: Err) => Err2): DecodeResult\n\n  /**\n   * Transform the input value associated with the current `DecodeResult` into\n   * a new input of type `In2`.\n   */\n  abstract mapInput(f: (i: In) => In2): DecodeResult\n\n  /**\n   * Return true if the current instance is of type `DecodeSuccess`. It also\n   * provide a guard value so that properties of `DecodeSuccess` can be used\n   * in the right conditional scope.\n   */\n  abstract isSuccess(): this is DecodeSuccess\n\n  /**\n   * Return true if the current instance is of type `DecodeFailure`. It also\n   * provide a guard value so that properties of `DecodeFailure` can be used\n   * in the right conditional scope.\n   */\n  abstract isFailure(): this is DecodeFailure\n\n  /**\n   * Unwrap the result value of a `DecodeSuccess`. If the current instance is of\n   * type `DecodeFailure` then this function will throw an exception.\n   * Do not use unless you are protecting from exceptions.\n   */\n  abstract getUnsafeSuccess(): Out\n\n  /**\n   * Unwrap the result value of a `DecodeFailure`. If the current instance is of\n   * type `DecodeSuccess` then this function will throw an exception.\n   * Do not use unless you are protecting from exceptions.\n   */\n  abstract getUnsafeFailures(): Err[]\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  abstract toString(): string\n}\n\nexport class DecodeSuccess extends DecodeResultBase {\n  /**\n   * Type discriminator\n   */\n  readonly kind = 'decode-success'\n\n  /**\n   * Contruct an instance of `DecodeSuccess`.\n   * @param input The input value that the next decoder should try to consume.\n   * @param value The value generated from the decoding operation.\n   */\n  constructor(input: In, readonly value: Out) {\n    super(input)\n  }\n\n  /**\n   * See {@link DecodeResultBase.match}\n   */\n  match(o: { success: (s: DecodeSuccess) => O; failure: (f: DecodeFailure) => O }): O {\n    return o.success(this)\n  }\n\n  /**\n   * See {@link DecodeResultBase.flatMap}\n   */\n  flatMap(f: (r: Out) => DecodeResult): DecodeResult {\n    return f(this.value)\n  }\n\n  /**\n   * See {@link DecodeResultBase.map}\n   */\n  map(f: (r: Out) => Out2): DecodeResult {\n    return this.flatMap(v => new DecodeSuccess(this.input, f(v)))\n  }\n\n  /**\n   * See {@link DecodeResultBase.flatMapError}\n   */\n  flatMapError(f: (r: Err[]) => DecodeResult): DecodeResult {\n    return new DecodeSuccess(this.input, this.value)\n  }\n\n  /**\n   * See {@link DecodeResultBase.mapError}\n   */\n  mapError(f: (r: Err) => Err2): DecodeResult {\n    return new DecodeSuccess(this.input, this.value)\n  }\n\n  /**\n   * See {@link DecodeResultBase.mapInput}\n   */\n  mapInput(f: (i: In) => In2): DecodeResult {\n    return new DecodeSuccess(f(this.input), this.value)\n  }\n\n  /**\n   * See {@link DecodeResultBase.isSuccess}\n   */\n  isSuccess(): this is DecodeSuccess {\n    return true\n  }\n\n  /**\n   * See {@link DecodeResultBase.isFailure}\n   */\n  isFailure(): this is DecodeFailure {\n    return false\n  }\n\n  /**\n   * See {@link DecodeResultBase.getUnsafeSuccess}\n   */\n  getUnsafeSuccess(): Out {\n    return this.value\n  }\n\n  /**\n   * See {@link DecodeResultBase.getUnsafeFailures}\n   */\n  getUnsafeFailures(): Err[] {\n    throw new Error(\"can't get failure from success\")\n  }\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString(): string {\n    return `DecodeSuccess: ${JSON.stringify(this.input)}`\n  }\n}\n\nexport class DecodeFailure extends DecodeResultBase {\n  /**\n   * Type discriminator\n   */\n  readonly kind = 'decode-failure'\n\n  /**\n   * Contains all the possible reasons of why a decoder failed.\n   */\n  readonly failures: Err[]\n\n  /**\n   * Contruct an instance of `DecodeFailure`.\n   * @param input The input value that corresponds to the place where the decoder\n   * failed to generate a valid result.\n   * @param failures The error messages associated with the reason why the decoder\n   * failed.\n   */\n  constructor(input: In, ...failures: Err[]) {\n    super(input)\n    this.failures = failures\n  }\n\n  /**\n   * See {@link DecodeResultBase.match}\n   */\n  match(o: {\n    success: (succ: DecodeSuccess) => O\n    failure: (fail: DecodeFailure) => O\n  }): O {\n    return o.failure(this)\n  }\n\n  /**\n   * See {@link DecodeResultBase.flatMap}\n   */\n  flatMap(f: (r: Out) => DecodeResult): DecodeResult {\n    return new DecodeFailure(this.input, ...this.failures)\n  }\n\n  /**\n   * See {@link DecodeResultBase.map}\n   */\n  map(f: (r: Out) => Out2): DecodeResult {\n    return new DecodeFailure(this.input, ...this.failures)\n  }\n\n  /**\n   * See {@link DecodeResultBase.flatMapError}\n   */\n  flatMapError(f: (r: Err[]) => DecodeResult): DecodeResult {\n    return f(this.failures)\n  }\n\n  /**\n   * See {@link DecodeResultBase.mapError}\n   */\n  mapError(f: (r: Err) => Err2): DecodeResult {\n    return failure(this.input, ...this.failures.map(f))\n  }\n\n  /**\n   * See {@link DecodeResultBase.mapInput}\n   */\n  mapInput(f: (i: In) => In2): DecodeResult {\n    return failure(f(this.input), ...this.failures)\n  }\n\n  /**\n   * See {@link DecodeResultBase.isSuccess}\n   */\n  isSuccess(): this is DecodeSuccess {\n    return false\n  }\n\n  /**\n   * See {@link DecodeResultBase.isFailure}\n   */\n  isFailure(): this is DecodeFailure {\n    return true\n  }\n\n  /**\n   * See {@link DecodeResultBase.getUnsafeSuccess}\n   */\n  getUnsafeSuccess(): Out {\n    throw new Error(\"can't get success from failure\")\n  }\n\n  /**\n   * See {@link DecodeResultBase.getUnsafeFailure}\n   */\n  getUnsafeFailures(): Err[] {\n    return this.failures\n  }\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString(): string {\n    return `DecodeFailure: ${JSON.stringify(this.input)}`\n  }\n}\n\n/**\n * `DecodeResult` it's an either type, aunion type of two possible constructors.\n * It can either be:\n *\n * * `DecodeSuccess`: a decoder was able to successfully decode a value\n * * `DecodeFailure`: a decoder failed to decode a value\n *\n * A `DecodeResult` brings three type parameters like in `{@link Decoder}`:\n *\n * * `In`: The input stream for a decoder.\n * * `Out`: The expected result from a decoder.\n * * `Err`: The type that contains information on why a decoder failed.\n */\nexport type DecodeResult = DecodeSuccess | DecodeFailure\n\n/**\n * Helper function to create an instance of `DecodeResult` from a succeeded decoding.\n */\nexport const success = (input: In, result: Out): DecodeResult =>\n  new DecodeSuccess(input, result)\n\n/**\n * Helper function to create an instance of `DecodeResult` from a failed decoding.\n */\nexport const failure = (input: In, ...failures: Err[]): DecodeResult =>\n  new DecodeFailure(input, ...failures)\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedAnyOf.html":{"url":"classes/ExpectedAnyOf.html","title":"class - ExpectedAnyOf","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedAnyOf\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_any_of.ts\n        \n\n            \n                Description\n            \n            \n                Error for any Entity that should match at least one of the conditions\ndescribed in the descriptions array.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entity: Entity, descriptions: string[])\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_any_of.ts:44\n                            \n                        \n\n                \n                    \n                            Construct an instance of ExpectedAnyOf\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                    Entity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        descriptions\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Human readable descriptions of all the missed matches.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-any-of'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_any_of.ts:44\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_any_of.ts:56\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, entityToString } from './entity'\n\n/**\n * Utility function to generate a comma separate list of values where the last\n * one is concatenated by `or`.\n */\nexport const concatOr = (values: string[]) => {\n  const length = values.length\n  if (length === 0) {\n    return ''\n  } else if (length \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedAtLeast.html":{"url":"classes/ExpectedAtLeast.html","title":"class - ExpectedAtLeast","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedAtLeast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_at_least.ts\n        \n\n            \n                Description\n            \n            \n                Error for an Entity that was not repeated at least min times.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(min: number, entity: Entity)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_at_least.ts:26\n                            \n                        \n\n                \n                    \n                            Construct an instance of ExpectedAtLeast\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        min\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                minimum (inclusive) number of expected repetitions\n\n                                                        \n                                                \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                    Entity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-at-least'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_at_least.ts:26\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_at_least.ts:38\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, entityToString } from './entity'\n\n/**\n * Error for an {@link Entity} that was not repeated at least `min` times.\n */\nexport class ExpectedAtLeast {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-at-least' = 'expected-at-least'\n\n  /**\n   * Construct an instance of `ExpectedAtLeast`\n   * @param min minimum (inclusive) number of expected repetitions\n   * @param entity\n   */\n  constructor(readonly min: number, readonly entity: Entity) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `at least ${this.min} ${entityToString(this.entity, this.min)}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedEoi.html":{"url":"classes/ExpectedEoi.html","title":"class - ExpectedEoi","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedEoi\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_eoi.ts\n        \n\n            \n                Description\n            \n            \n                Error for expected end of input.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-eot'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_eoi.ts:24\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_eoi.ts:29\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class ExpectedEoi {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-eot' = 'expected-eot'\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `end of input`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedField.html":{"url":"classes/ExpectedField.html","title":"class - ExpectedField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_field.ts\n        \n\n            \n                Description\n            \n            \n                Error for missing fieeld.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_field.ts:24\n                            \n                        \n\n                \n                    \n                            Construct an instance of ExpectedField\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                name of the missing field in a record/object.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-field'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_field.ts:24\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_field.ts:35\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class ExpectedField {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-field' = 'expected-field'\n\n  /**\n   * Construct an instance of `ExpectedField`\n   * @param field name of the missing field in a record/object.\n   */\n  constructor(readonly field: string) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `field \"${this.field}\"`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedMatch.html":{"url":"classes/ExpectedMatch.html","title":"class - ExpectedMatch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedMatch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_match.ts\n        \n\n            \n                Description\n            \n            \n                Error for an exact match that failed. The expectation is described as a\nstring.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_match.ts:25\n                            \n                        \n\n                \n                    \n                            Construct an instance of ExpectedMatch\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Human readable description of the missed match.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-match'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_match.ts:25\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_match.ts:36\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class ExpectedMatch {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-match' = 'expected-match'\n\n  /**\n   * Construct an instance of `ExpectedMatch`\n   * @param value Human readable description of the missed match.\n   */\n  constructor(readonly value: string) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `${this.value}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedNoneOf.html":{"url":"classes/ExpectedNoneOf.html","title":"class - ExpectedNoneOf","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedNoneOf\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_none_of.ts\n        \n\n            \n                Description\n            \n            \n                Error for a decoder that is expected to fail decoding an Entity for\nany of the values as they are described in the descriptions array.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entity: Entity, descriptions: string[])\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_none_of.ts:28\n                            \n                        \n\n                \n                    \n                            Construct an instance of ExpectedNoneOf\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                    Entity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        descriptions\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Human readable descriptions of the conditions that should\nnot have been matched.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'none-of-error'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_none_of.ts:28\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_none_of.ts:41\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, entityToString } from './entity'\nimport { concatOr } from './expected_any_of'\n\n/**\n * Error for a decoder that is expected to fail decoding an {@link Entity} for\n * any of the values as they are described in the `descriptions` array.\n */\nexport class ExpectedNoneOf {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'none-of-error' = 'none-of-error'\n\n  /**\n   * Construct an instance of `ExpectedNoneOf`\n   * @param entity\n   * @param descriptions Human readable descriptions of the conditions that should\n   * not have been matched.\n   */\n  constructor(readonly entity: Entity, readonly descriptions: string[]) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `no ${entityToString(this.entity, 1)} like ${concatOr(this.descriptions)}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedOnce.html":{"url":"classes/ExpectedOnce.html","title":"class - ExpectedOnce","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedOnce\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_once.ts\n        \n\n            \n                Description\n            \n            \n                Error for an Entity that was expected to be captured once by a\ndecoder.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entity: Entity)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_once.ts:27\n                            \n                        \n\n                \n                    \n                            Construct an instance of ExpectedOnce.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                    Entity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-once'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_once.ts:27\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_once.ts:37\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, entityToString } from './entity'\n\n/**\n * Error for an {@link Entity} that was expected to be captured once by a\n * decoder.\n */\nexport class ExpectedOnce {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-once' = 'expected-once'\n\n  /**\n   * Construct an instance of `ExpectedOnce`.\n   */\n  constructor(readonly entity: Entity) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `a ${entityToString(this.entity, 1)}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedWithinRange.html":{"url":"classes/ExpectedWithinRange.html","title":"class - ExpectedWithinRange","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedWithinRange\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/expected_within_range.ts\n        \n\n            \n                Description\n            \n            \n                Error for a decoder that should have captured a value between twp values\nas described in min and max.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(min: string, max: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/expected_within_range.ts:25\n                            \n                        \n\n                \n                    \n                            Construct an instance of ExpectedWithinRange.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        min\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                minimum number of occurrances expected (inclusive).\n\n                                                        \n                                                \n                                                \n                                                        max\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                maximum number of occurrances expected (inclusive).\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'expected-within-range'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/expected_within_range.ts:25\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/expected_within_range.ts:37\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class ExpectedWithinRange {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'expected-within-range' = 'expected-within-range'\n\n  /**\n   * Construct an instance of `ExpectedWithinRange`.\n   * @param min minimum number of occurrances expected (inclusive).\n   * @param max maximum number of occurrances expected (inclusive).\n   */\n  constructor(readonly min: string, readonly max: string) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `between ${this.min} and ${this.max}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatternMismatch.html":{"url":"classes/PatternMismatch.html","title":"class - PatternMismatch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatternMismatch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/pattern_mismatch.ts\n        \n\n            \n                Description\n            \n            \n                Expected error for a decoder that wasn't able to match pattern.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pattern: string)\n                    \n                \n                        \n                            \n                                Defined in src/error/pattern_mismatch.ts:24\n                            \n                        \n\n                \n                    \n                            Construct an instance of PatternMismatch.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        pattern\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Human readeable description of the pattern that wasn't matched.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'pattern-mismatch'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/pattern_mismatch.ts:24\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/pattern_mismatch.ts:35\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class PatternMismatch {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'pattern-mismatch' = 'pattern-mismatch'\n\n  /**\n   * Construct an instance of `PatternMismatch`.\n   * @param pattern Human readeable description of the pattern that wasn't matched.\n   */\n  constructor(readonly pattern: string) {}\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `to match pattern ${this.pattern}`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TextInput.html":{"url":"interfaces/TextInput.html","title":"interface - TextInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TextInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/text/input.ts\n        \n\n            \n                Description\n            \n            \n                TextInput stores the entire input value as a string and contains\nan index as the current character position inside the stream.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        index\n                                \n                                \n                                        input\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        index\n                                    \n                                \n                                \n                                    \n                                        index:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        input\n                                    \n                                \n                                \n                                    \n                                        input:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TextInput {\n  readonly input: string\n  readonly index: number\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnexpectedEoi.html":{"url":"classes/UnexpectedEoi.html","title":"class - UnexpectedEoi","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnexpectedEoi\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/error/unexpected_eoi.ts\n        \n\n            \n                Description\n            \n            \n                Error for a decoder that is not expecting an end of input.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                kind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            kind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        kind:     \n\n                    \n                \n                    \n                        \n                            Default value : 'unexpected-eoi'\n                        \n                    \n                        \n                            \n                                    Defined in src/error/unexpected_eoi.ts:24\n                            \n                        \n\n                \n                    \n                        Type discriminator\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/error/unexpected_eoi.ts:29\n                            \n                        \n\n\n                \n                    \n                            Provides a human readable representation of the value. Mostly for debugging.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class UnexpectedEoi {\n  /**\n   * Type discriminator\n   */\n  readonly kind: 'unexpected-eoi' = 'unexpected-eoi'\n\n  /**\n   * Provides a human readable representation of the value. Mostly for debugging.\n   */\n  toString() {\n    return `NOT end of input`\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValueInput.html":{"url":"interfaces/ValueInput.html","title":"interface - ValueInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ValueInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/value/input.ts\n        \n\n            \n                Description\n            \n            \n                ValueInput stores the current input value as a any (any JS value) and\ncontains a path value to identify the position in the current context.\npath is an array of either string values (field names of an object) or\nnumber values (index inside an array).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        input\n                                \n                                \n                                        path\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        input\n                                    \n                                \n                                \n                                    \n                                        input:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:     (string | number)[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     (string | number)[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ValueInput {\n  readonly input: any\n  readonly path: (string | number)[]\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nHow to Contribute\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\nContributor License Agreement\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to https://cla.developers.google.com/ to see\nyour current agreements on file or to sign a new one.\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\nCode reviews\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\nGitHub Help for more\ninformation on using pull requests.\nCommunity Guidelines\nThis project follows\nGoogle's Open Source Community Guidelines.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                class\n            \n            \n                Decoder\n            \n            \n                96 %\n                (25/26)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                fail\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                lazy\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                oneOf\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                sequence\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/decoder.ts\n            \n            \n                variable\n            \n            \n                succeed\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                class\n            \n            \n                DecodeFailure\n            \n            \n                96 %\n                (29/30)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                class\n            \n            \n                DecodeResultBase\n            \n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                class\n            \n            \n                DecodeSuccess\n            \n            \n                96 %\n                (28/29)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                variable\n            \n            \n                failure\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/result.ts\n            \n            \n                variable\n            \n            \n                success\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/error/custom_error.ts\n            \n            \n                class\n            \n            \n                CustomError\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/entity.ts\n            \n            \n                variable\n            \n            \n                entityToString\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/error/expected_any_of.ts\n            \n            \n                class\n            \n            \n                ExpectedAnyOf\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/expected_any_of.ts\n            \n            \n                variable\n            \n            \n                concatOr\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/error/expected_at_least.ts\n            \n            \n                class\n            \n            \n                ExpectedAtLeast\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/expected_eoi.ts\n            \n            \n                class\n            \n            \n                ExpectedEoi\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/error/expected_field.ts\n            \n            \n                class\n            \n            \n                ExpectedField\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/expected_match.ts\n            \n            \n                class\n            \n            \n                ExpectedMatch\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/expected_none_of.ts\n            \n            \n                class\n            \n            \n                ExpectedNoneOf\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/expected_once.ts\n            \n            \n                class\n            \n            \n                ExpectedOnce\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/expected_within_range.ts\n            \n            \n                class\n            \n            \n                ExpectedWithinRange\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/index.ts\n            \n            \n                variable\n            \n            \n                DecodeError\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/error/pattern_mismatch.ts\n            \n            \n                class\n            \n            \n                PatternMismatch\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/error/unexpected_eoi.ts\n            \n            \n                class\n            \n            \n                UnexpectedEoi\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                char\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                decodeText\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                digit\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                digits\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                eoi\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                failureToString\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                letter\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                letters\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                lowerCaseLetter\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                lowerCaseLetters\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                \n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                make\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                match\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                matchAnyCharOf\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                matchInsensitive\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                matchNoCharOf\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                optionalWhitespace\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                regexp\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                rest\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                takeCharBetween\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                takeCharWhile\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                testChar\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                upperCaseLetter\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                upperCaseLetters\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                whitespace\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/index.ts\n            \n            \n                variable\n            \n            \n                withPosition\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/text/input.ts\n            \n            \n                interface\n            \n            \n                TextInput\n            \n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                anyArrayValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                anyValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                arrayValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                booleanValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                decodeValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                failureToString\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                finiteNumberValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                integerValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                isToken\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                literalValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                make\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                nullableValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                nullValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                numberValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                objectValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                optionalValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                pathToString\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                safeIntegerValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                stringValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                testObject\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                testType\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                testValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                tupleValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                undefineableValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/index.ts\n            \n            \n                variable\n            \n            \n                undefinedValue\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/value/input.ts\n            \n            \n                interface\n            \n            \n                ValueInput\n            \n            \n                33 %\n                (1/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Entity   (src/.../entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/error/entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Entity\n                    \n                \n                    \n                        \n                            Enumeration that tries to capture different kind of entities that are\nnormally found has decoder inputs.\n\n                        \n                    \n                        \n                            \n                                 CHARACTER\n                            \n                        \n                        \n                            \n                                 PREDICATE\n                            \n                        \n                        \n                            \n                                 LETTER\n                            \n                        \n                        \n                            \n                                 UPPERCASE_LETTER\n                            \n                        \n                        \n                            \n                                 LOWER_CASE_LETTER\n                            \n                        \n                        \n                            \n                                 DIGIT\n                            \n                        \n                        \n                            \n                                 WHITESPACE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nParTSing\nParTSing is a decoder combinator library. You can use it to build parsers/decoders from string or really any input values.\nIf you want full control over what to decode your should start from partsing/core/decoder. It provides 3 types parameters\n\nIn for the input. Remember that you will need to decode one portion of your input at the time and your input probably needs to track somehow the current position.\nOut it's the type of the value if successfully decoded.\nErr it's the type of the failure returned when the parser fails.\n\nThe library provides two additional set of utility functions to decode string values (partsing/text) and native JS values (partsing/value).\nDecoder Error\nIf you adopt the generic Decoder directly, you can define the shape of your error. The library provides a DecoderError type that should fit most decoding needs. The type of errors available are defined in partsing/error.\nDecoderError provides a simple method to debug the result of the decoding (toString) but still leaves the flexibility to give granular control on the representation of the error.\nBoth [Text Decoding] and [Value Decoding] use DecodeError.\nText Decoding\nTo be able to keep track of the position of the decoding within a string, Text Decoding uses TextInput to track both the entire text input and the current index.\nThe decodeText function simplifies the inputs and outputs of decoding text. It takes a text decoder (Decoder) and return a function that takes a string input and returns a DecodeResult (where input and error are of type string).\nIf you intend to write your own regular expressions decoder functions, consider using the y (sticky) flag. When used, there is no need to reallocate slices of the input string saving memory and CPU cycles. The sticky flag is not available for all implementations of JS.\nValue Decoding\nTo be able to keep track of the position of the decoding within any value, Value Decoding uses ValueInput to track both the input value and the current position within it using a path. path is an array of either string (object field name) or number (array/tuple index position).\nThe decodeValue function simplifies the inputs and outputs of decoding values. It takes a value decoder (Decoder) and return a function that takes any and returns a DecodeResult (where input is of type any and error is of type string).\nExample\nA simple decoder combinator to parse color values from strings into class instances.\nclass RGB {\n  constructor(readonly rgb: number) {}\n}\n\nclass Grey {\n  constructor(readonly value: number) {}\n}\n\nclass HSL {\n  constructor(readonly hue: number, readonly saturation: number, readonly lightness: number) {}\n}\n\ntype Color = RGB | Grey | HSL\n\nconst ratioDecoder = regexp(/0[.]\\d+/y).map(Number)\nconst rgbDecoder   = regexp(/[#]([0-9a-f]{6})/iy, 1)\n                       .map(v => parseInt(v, 16))\n                       .map(v => new RGB(v))\nconst greyDecoder  = matchInsensitive('grey').or(DecodeError.combine, matchInsensitive('gray'))\n                       .skipNext(optionalWhitespace)\n                       .pickNext(ratioDecoder)\n                       .map(v => new Grey(v))\nconst hslDecoder   = matchInsensitive('hsl(')\n                       .pickNext(\n                         ratioDecoder\n                           .separatedByTimes(match(','), 3)\n                           .map(v => new HSL(v[0], v[1], v[2]))\n                       )\n                       .skipNext(match(')'))\n\nconst colorTextDecoder = decodeText(\n    oneOf(\n      DecodeError.combine,\n      rgbDecoder,\n      greyDecoder,\n      hslDecoder\n    ).skipNext(eoi) // make sure that there is nothing left to decode\n  )\n\n// all results are wrapped in a DecodeSuccess\n// colorTextDecoder('#003355')          == new RGB(0x003355)\n// colorTextDecoder('gray 0.3')         == new Grey(0.3)\n// colorTextDecoder('gray0.2')          == new Grey(0.2)\n// colorTextDecoder('HSL(0.1,0.2,0.3)') == new HSL(0.1,0.2,0.3)Another scenario where decoding comes in handy is to validate, type and transform payloads from JSON requests. You can decode a value (after being parsed by JSON.parse) into one of the Color types described above.\nA few examples of valid JSON payloads:\n\"#003366\"{ \"grey\": 0.5 }{ \"kind\": \"hsl\", \"h\": 0.2, \"s\": 0.5, \"l\": 0.8 }Here is a colorValueDecoder definition that can deal with those cases:\nconst ratioValue = numberValue.test(v => v >= 0 && v  ({ input, index: 0 }), v => v)\n\n// example: { \"grey\": 0.5 }\nconst greyValue = objectValue(\n    { grey: ratioValue },\n    [] // the empty array means that no fields are optional\n  ).map(v => new Grey(v.grey))\n\n// example: { \"kind\": \"hsl\", \"h\": 0.2, \"s\": 0.5, \"l\": 0.8 }\nconst hslValue = objectValue(\n    {\n      kind: literalValue('hsl'),\n      h: ratioValue,\n      s: ratioValue,\n      l: ratioValue\n    },\n    []\n  ).map(v => new HSL(v.h, v.s, v.l))\n\nconst colorValueDecoder = decodeValue(\n    oneOf(\n      DecodeError.combine,\n      rgbValue,\n      greyValue,\n      hslValue\n    )\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\n                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.You may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nAPPENDIX: How to apply the Apache License to your work.\nTo apply the Apache License to your work, attach the following\nboilerplate notice, with the fields enclosed by brackets \"[]\"\nreplaced with your own identifying information. (Don't include\nthe brackets!)  The text should be enclosed in the appropriate\ncomment syntax for the file format. We also recommend that a\nfile or class name and description of purpose be included on the\nsame \"printed page\" as the copyright notice for easier\nidentification within third-party archives.\nCopyright [yyyy] [name of copyright owner]\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DecodeError   (src/.../index.ts)\n                        \n                        \n                            DecodeResult   (src/.../result.ts)\n                        \n                        \n                            Decoding   (src/.../decoder.ts)\n                        \n                        \n                            Error   (src/.../type_level.ts)\n                        \n                        \n                            Input   (src/.../type_level.ts)\n                        \n                        \n                            MarkOptionalFields   (src/.../type_level.ts)\n                        \n                        \n                            Output   (src/.../type_level.ts)\n                        \n                        \n                            TextDecoder   (src/.../index.ts)\n                        \n                        \n                            TupleToUnion   (src/.../type_level.ts)\n                        \n                        \n                            ValueDecoder   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/error/index.ts\n    \n        \n            \n                \n                    \n                        \n                        DecodeError\n                    \n                \n                    \n                        \n                            Union type of all possible decoding errors.\n\n                        \n                    \n                \n                    \n                        DecodeError:     CustomError | ExpectedAnyOf | ExpectedAtLeast | ExpectedEoi | ExpectedField | ExpectedMatch | ExpectedNoneOf | ExpectedOnce | ExpectedWithinRange | PatternMismatch | UnexpectedEoi\n\n                    \n                \n            \n        \n\n    src/core/result.ts\n    \n        \n            \n                \n                    \n                        \n                        DecodeResult\n                    \n                \n                    \n                        \n                            DecodeResult it's an either type, aunion type of two possible constructors.\nIt can either be:\n\nDecodeSuccess: a decoder was able to successfully decode a value\nDecodeFailure: a decoder failed to decode a value\n\nA DecodeResult brings three type parameters like in Decoder:\n\nIn: The input stream for a decoder.\nOut: The expected result from a decoder.\nErr: The type that contains information on why a decoder failed.\n\n\n                        \n                    \n                \n                    \n                        DecodeResult:     DecodeSuccess | DecodeFailure\n\n                    \n                \n            \n        \n\n    src/core/decoder.ts\n    \n        \n            \n                \n                    \n                        \n                        Decoding\n                    \n                \n                    \n                        \n                            Type signature for a function that takes an input and decodes it into a\nresult object.\n\n                        \n                    \n                \n                    \n                        Decoding:     function\n\n                    \n                \n            \n        \n\n    src/core/type_level.ts\n    \n        \n            \n                \n                    \n                        \n                        Error\n                    \n                \n                    \n                        \n                            Extracts the Err type from a Decoder type.\n\n                        \n                    \n                \n                    \n                        Error:     \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        Input\n                    \n                \n                    \n                        \n                            Extracts the Int type from a Decoder type.\n\n                        \n                    \n                \n                    \n                        Input:     \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        MarkOptionalFields\n                    \n                \n                    \n                        \n                            Given a type for an object T and an array U of field names from U,\nreturn a new object type with the specified fields U marked as optional.\n\n                        \n                    \n                \n                    \n                        MarkOptionalFields:     \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        Output\n                    \n                \n                    \n                        \n                            Extracts the Out type from a Decoder type.\n\n                        \n                    \n                \n                    \n                        Output:     \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        TupleToUnion\n                    \n                \n                    \n                        \n                            This module contains type-level functions for compile-time usage.\n\n                        \n                    \n                \n                    \n                        TupleToUnion:      | never\n\n                    \n                \n            \n        \n\n    src/text/index.ts\n    \n        \n            \n                \n                    \n                        \n                        TextDecoder\n                    \n                \n                    \n                        \n                            Type alias for a decoder specialized in consuming values of type TextInput\nand generate errors of type DecodeError.\n\n                        \n                    \n                \n                    \n                        TextDecoder:     Decoder\n\n                    \n                \n            \n        \n\n    src/value/index.ts\n    \n        \n            \n                \n                    \n                        \n                        ValueDecoder\n                    \n                \n                    \n                        \n                            Type alias for a decoder specialized in consuming values of type ValueInput\nand generate errors of type DecodeError.\n\n                        \n                    \n                \n                    \n                        ValueDecoder:     Decoder\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
